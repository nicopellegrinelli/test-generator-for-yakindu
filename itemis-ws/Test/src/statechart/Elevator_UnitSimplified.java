/**
 * Generated by itemis CREATE code generator.
 */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Elevator_UnitSimplified implements ITimed, IEventDriven {

    public static class Direction {

        private Elevator_UnitSimplified parent;

        public Direction(Elevator_UnitSimplified parent) {
            this.parent = parent;
        }

        private boolean up;

        public void raiseUp() {
            parent.inEventQueue.add(() -> {
                up = true;
            });
            parent.runCycle();
        }

        private boolean down;

        public void raiseDown() {
            parent.inEventQueue.add(() -> {
                down = true;
            });
            parent.runCycle();
        }
    }

    public static class Level {

        private long current;

        private long getCurrent() {
            return current;
        }

        private void setCurrent(long value) {
            this.current = value;
        }

        private long userLocation;

        private long getUserLocation() {
            return userLocation;
        }

        private void setUserLocation(long value) {
            this.userLocation = value;
        }

        private long userInput;

        private long getUserInput() {
            return userInput;
        }

        private void setUserInput(long value) {
            this.userInput = value;
        }
    }

    public static class Input {

        private Elevator_UnitSimplified parent;

        public Input(Elevator_UnitSimplified parent) {
            this.parent = parent;
        }

        private boolean submit;

        public void raiseSubmit() {
            parent.inEventQueue.add(() -> {
                submit = true;
            });
            parent.runCycle();
        }

        private boolean up;

        public void raiseUp() {
            parent.inEventQueue.add(() -> {
                up = true;
            });
            parent.runCycle();
        }

        private boolean down;

        public void raiseDown() {
            parent.inEventQueue.add(() -> {
                down = true;
            });
            parent.runCycle();
        }

        private long value;

        private long getValue() {
            return value;
        }

        private void setValue(long value) {
            this.value = value;
        }
    }

    private Direction direction;

    private Level level;

    private Input input;

    public enum State {

        MAIN_REGION__ELEVATOR_UNAVAILABLE_,
        MAIN_REGION__ELEVATOR_AVAILABLE_,
        MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_,
        MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_,
        MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_,
        MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_,
        MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_,
        MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL_,
        MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_,
        MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_,
        MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_,
        $NULLSTATE$
    }

    private final State[] stateVector = new State[4];

    private ITimerService timerService;

    private final boolean[] timeEvents = new boolean[3];

    private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();

    private boolean completed;

    private boolean getCompleted() {
        return completed;
    }

    private void setCompleted(boolean value) {
        this.completed = value;
    }

    private boolean doCompletion;

    private boolean getDoCompletion() {
        return doCompletion;
    }

    private void setDoCompletion(boolean value) {
        this.doCompletion = value;
    }

    private boolean isExecuting;

    private boolean getIsExecuting() {
        return isExecuting;
    }

    private void setIsExecuting(boolean value) {
        this.isExecuting = value;
    }

    private long stateConfVectorPosition;

    private long getStateConfVectorPosition() {
        return stateConfVectorPosition;
    }

    private void setStateConfVectorPosition(long value) {
        this.stateConfVectorPosition = value;
    }

    public Elevator_UnitSimplified() {
        direction = new Direction(this);
        level = new Level();
        input = new Input(this);
        for (int i = 0; i < 4; i++) {
            stateVector[i] = State.$NULLSTATE$;
        }
        clearInEvents();
        /* Default init sequence for statechart Elevator_Unit */
        level.setCurrent(0l);
        level.setUserLocation(0l);
        level.setUserInput(0l);
        input.setValue(0l);
        isExecuting = false;
    }

    public void enter() {
        /* Activates the state machine. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default enter sequence for statechart Elevator_Unit */
        enterSequence_main_region_default();
        doCompletion = false;
        do {
            if (getCompleted()) {
                doCompletion = true;
            }
            completed = false;
            microStep();
            doCompletion = false;
        } while (getCompleted());
        isExecuting = false;
    }

    public void exit() {
        /* Deactivates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default exit sequence for statechart Elevator_Unit */
        exitSequence_main_region();
        isExecuting = false;
    }

    /**
     * @see IStatemachine#isActive()
     */
    public boolean isActive() {
        return stateVector[0] != State.$NULLSTATE$ || stateVector[1] != State.$NULLSTATE$ || stateVector[2] != State.$NULLSTATE$ || stateVector[3] != State.$NULLSTATE$;
    }

    /**
     * Always returns 'false' since this state machine can never become final.
     *
     * @see IStatemachine#isFinal()
     */
    public boolean isFinal() {
        return false;
    }

    private void clearInEvents() {
        toggle = false;
        stopped = false;
        inUse = false;
        direction.up = false;
        direction.down = false;
        input.submit = false;
        input.up = false;
        input.down = false;
        timeEvents[0] = false;
        timeEvents[1] = false;
        timeEvents[2] = false;
    }

    private void microStep() {
        long transitioned = -1l;
        stateConfVectorPosition = 0l;
        switch(stateVector[0]) {
            case MAIN_REGION__ELEVATOR_UNAVAILABLE_:
                transitioned = main_region__Elevator_Unavailable__react(transitioned);
                break;
            case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_:
                transitioned = main_region__Elevator_Available__activity__idle__react(transitioned);
                break;
            case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_:
                transitioned = main_region__Elevator_Available__activity__active__react(transitioned);
                break;
            default:
                break;
        }
        if (getStateConfVectorPosition() < 1l) {
            switch(stateVector[1]) {
                case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_:
                    transitioned = main_region__Elevator_Available__movement__upwards__react(transitioned);
                    break;
                case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_:
                    transitioned = main_region__Elevator_Available__movement__downwards__react(transitioned);
                    break;
                case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_:
                    transitioned = main_region__Elevator_Available__movement__standby__react(transitioned);
                    break;
                default:
                    break;
            }
        }
        if (getStateConfVectorPosition() < 2l) {
            switch(stateVector[2]) {
                case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_:
                    transitioned = main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator__react(transitioned);
                    break;
                default:
                    break;
            }
        }
        if (getStateConfVectorPosition() < 3l) {
            switch(stateVector[3]) {
                case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_:
                    main_region__Elevator_Available__input__gettingInput__react(transitioned);
                    break;
                case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_:
                    main_region__Elevator_Available__input__submitInput__react(transitioned);
                    break;
                default:
                    break;
            }
        }
    }

    private void runCycle() {
        /* Performs a 'run to completion' step. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        nextEvent();
        do {
            doCompletion = false;
            do {
                if (getCompleted()) {
                    doCompletion = true;
                }
                completed = false;
                microStep();
                doCompletion = false;
            } while (getCompleted());
            clearInEvents();
        } while (nextEvent());
        isExecuting = false;
    }

    private boolean nextEvent() {
        if (!inEventQueue.isEmpty()) {
            inEventQueue.poll().run();
            return true;
        }
        return false;
    }

    /**
     * Returns true if the given state is currently active otherwise false.
     */
    public boolean isStateActive(State state) {
        switch(state) {
            case MAIN_REGION__ELEVATOR_UNAVAILABLE_:
                return stateVector[0] == State.MAIN_REGION__ELEVATOR_UNAVAILABLE_;
            case MAIN_REGION__ELEVATOR_AVAILABLE_:
                return stateVector[0].ordinal() >= State.MAIN_REGION__ELEVATOR_AVAILABLE_.ordinal() && stateVector[0].ordinal() <= State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_.ordinal();
            case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_:
                return stateVector[0] == State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_;
            case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_:
                return stateVector[0] == State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_;
            case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_:
                return stateVector[1] == State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_;
            case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_:
                return stateVector[1] == State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_;
            case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_:
                return stateVector[1] == State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_;
            case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL_:
                return stateVector[2].ordinal() >= State.MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL_.ordinal() && stateVector[2].ordinal() <= State.MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_.ordinal();
            case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_:
                return stateVector[2] == State.MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_;
            case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_:
                return stateVector[3] == State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_;
            case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_:
                return stateVector[3] == State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_;
            default:
                return false;
        }
    }

    public void setTimerService(ITimerService timerService) {
        this.timerService = timerService;
    }

    private ITimerService getTimerService() {
        return timerService;
    }

    public void raiseTimeEvent(int eventID) {
        inEventQueue.add(() -> {
            timeEvents[eventID] = true;
        });
        runCycle();
    }

    public Direction direction() {
        return direction;
    }

    public Level level() {
        return level;
    }

    public Input input() {
        return input;
    }

    private boolean toggle;

    public void raiseToggle() {
        inEventQueue.add(() -> {
            toggle = true;
        });
        runCycle();
    }

    private boolean stopped;

    public void raiseStopped() {
        inEventQueue.add(() -> {
            stopped = true;
        });
        runCycle();
    }

    private boolean inUse;

    public void raiseInUse() {
        inEventQueue.add(() -> {
            inUse = true;
        });
        runCycle();
    }

    /* Entry action for state '<upwards>'. */
    private void entryAction_main_region__Elevator_Available__movement__upwards_() {
        /* Entry action for state '<upwards>'. */
        timerService.setTimer(this, 0, 100l, false);
    }

    /* Entry action for state '<downwards>'. */
    private void entryAction_main_region__Elevator_Available__movement__downwards_() {
        /* Entry action for state '<downwards>'. */
        timerService.setTimer(this, 1, 100l, false);
    }

    /* Entry action for state '<readingDataFromElevator>'. */
    private void entryAction_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_() {
        /* Entry action for state '<readingDataFromElevator>'. */
        timerService.setTimer(this, 2, 500l, false);
    }

    private void entryAction_main_region__Elevator_Available__input__submitInput_() {
        /* Entry action for state '<submitInput>'. */
        level.setUserInput(input.value);
        level.setUserLocation(input.value);
        completed = true;
    }

    /* Exit action for state '<upwards>'. */
    private void exitAction_main_region__Elevator_Available__movement__upwards_() {
        /* Exit action for state '<upwards>'. */
        timerService.unsetTimer(this, 0);
    }

    /* Exit action for state '<downwards>'. */
    private void exitAction_main_region__Elevator_Available__movement__downwards_() {
        /* Exit action for state '<downwards>'. */
        timerService.unsetTimer(this, 1);
    }

    /* Exit action for state '<readingDataFromElevator>'. */
    private void exitAction_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_() {
        /* Exit action for state '<readingDataFromElevator>'. */
        timerService.unsetTimer(this, 2);
    }

    /* 'default' enter sequence for state <Elevator_Unavailable> */
    private void enterSequence_main_region__Elevator_Unavailable__default() {
        /* 'default' enter sequence for state <Elevator_Unavailable> */
        stateVector[0] = State.MAIN_REGION__ELEVATOR_UNAVAILABLE_;
        stateConfVectorPosition = 0;
    }

    /* 'default' enter sequence for state <Elevator_Available> */
    private void enterSequence_main_region__Elevator_Available__default() {
        /* 'default' enter sequence for state <Elevator_Available> */
        enterSequence_main_region__Elevator_Available__activity_default();
        enterSequence_main_region__Elevator_Available__movement_default();
        enterSequence_main_region__Elevator_Available__level_default();
        enterSequence_main_region__Elevator_Available__input_default();
    }

    /* 'default' enter sequence for state <idle> */
    private void enterSequence_main_region__Elevator_Available__activity__idle__default() {
        /* 'default' enter sequence for state <idle> */
        stateVector[0] = State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_;
        stateConfVectorPosition = 0;
    }

    /* 'default' enter sequence for state <active> */
    private void enterSequence_main_region__Elevator_Available__activity__active__default() {
        /* 'default' enter sequence for state <active> */
        stateVector[0] = State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_;
        stateConfVectorPosition = 0;
    }

    /* 'default' enter sequence for state <upwards> */
    private void enterSequence_main_region__Elevator_Available__movement__upwards__default() {
        /* 'default' enter sequence for state <upwards> */
        entryAction_main_region__Elevator_Available__movement__upwards_();
        stateVector[1] = State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_;
        stateConfVectorPosition = 1;
    }

    /* 'default' enter sequence for state <downwards> */
    private void enterSequence_main_region__Elevator_Available__movement__downwards__default() {
        /* 'default' enter sequence for state <downwards> */
        entryAction_main_region__Elevator_Available__movement__downwards_();
        stateVector[1] = State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_;
        stateConfVectorPosition = 1;
    }

    /* 'default' enter sequence for state <standby> */
    private void enterSequence_main_region__Elevator_Available__movement__standby__default() {
        /* 'default' enter sequence for state <standby> */
        stateVector[1] = State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_;
        stateConfVectorPosition = 1;
    }

    /* 'default' enter sequence for state <ElevatorLevel> */
    private void enterSequence_main_region__Elevator_Available__level__ElevatorLevel__default() {
        /* 'default' enter sequence for state <ElevatorLevel> */
        enterSequence_main_region__Elevator_Available__level__ElevatorLevel__r1_default();
    }

    /* 'default' enter sequence for state <readingDataFromElevator> */
    private void enterSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator__default() {
        /* 'default' enter sequence for state <readingDataFromElevator> */
        entryAction_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
        stateVector[2] = State.MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_;
        stateConfVectorPosition = 2;
    }

    /* 'default' enter sequence for state <gettingInput> */
    private void enterSequence_main_region__Elevator_Available__input__gettingInput__default() {
        /* 'default' enter sequence for state <gettingInput> */
        stateVector[3] = State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_;
        stateConfVectorPosition = 3;
    }

    /* 'default' enter sequence for state <submitInput> */
    private void enterSequence_main_region__Elevator_Available__input__submitInput__default() {
        /* 'default' enter sequence for state <submitInput> */
        entryAction_main_region__Elevator_Available__input__submitInput_();
        stateVector[3] = State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_;
        stateConfVectorPosition = 3;
    }

    /* 'default' enter sequence for region main region */
    private void enterSequence_main_region_default() {
        /* 'default' enter sequence for region main region */
        react_main_region__entry_Default();
    }

    /* 'default' enter sequence for region activity */
    private void enterSequence_main_region__Elevator_Available__activity_default() {
        /* 'default' enter sequence for region activity */
        react_main_region__Elevator_Available__activity__entry_Default();
    }

    /* 'default' enter sequence for region movement */
    private void enterSequence_main_region__Elevator_Available__movement_default() {
        /* 'default' enter sequence for region movement */
        react_main_region__Elevator_Available__movement__entry_Default();
    }

    /* 'default' enter sequence for region level */
    private void enterSequence_main_region__Elevator_Available__level_default() {
        /* 'default' enter sequence for region level */
        react_main_region__Elevator_Available__level__entry_Default();
    }

    /* 'default' enter sequence for region r1 */
    private void enterSequence_main_region__Elevator_Available__level__ElevatorLevel__r1_default() {
        /* 'default' enter sequence for region r1 */
        react_main_region__Elevator_Available__level__ElevatorLevel__r1__entry_Default();
    }

    /* 'default' enter sequence for region input */
    private void enterSequence_main_region__Elevator_Available__input_default() {
        /* 'default' enter sequence for region input */
        react_main_region__Elevator_Available__input__entry_Default();
    }

    /* Default exit sequence for state <Elevator_Unavailable> */
    private void exitSequence_main_region__Elevator_Unavailable_() {
        /* Default exit sequence for state <Elevator_Unavailable> */
        stateVector[0] = State.$NULLSTATE$;
        stateConfVectorPosition = 0;
    }

    /* Default exit sequence for state <Elevator_Available> */
    private void exitSequence_main_region__Elevator_Available_() {
        /* Default exit sequence for state <Elevator_Available> */
        exitSequence_main_region__Elevator_Available__activity();
        exitSequence_main_region__Elevator_Available__movement();
        exitSequence_main_region__Elevator_Available__level();
        exitSequence_main_region__Elevator_Available__input();
    }

    /* Default exit sequence for state <idle> */
    private void exitSequence_main_region__Elevator_Available__activity__idle_() {
        /* Default exit sequence for state <idle> */
        stateVector[0] = State.$NULLSTATE$;
        stateConfVectorPosition = 0;
    }

    /* Default exit sequence for state <active> */
    private void exitSequence_main_region__Elevator_Available__activity__active_() {
        /* Default exit sequence for state <active> */
        stateVector[0] = State.$NULLSTATE$;
        stateConfVectorPosition = 0;
    }

    /* Default exit sequence for state <upwards> */
    private void exitSequence_main_region__Elevator_Available__movement__upwards_() {
        /* Default exit sequence for state <upwards> */
        stateVector[1] = State.$NULLSTATE$;
        stateConfVectorPosition = 1;
        exitAction_main_region__Elevator_Available__movement__upwards_();
    }

    /* Default exit sequence for state <downwards> */
    private void exitSequence_main_region__Elevator_Available__movement__downwards_() {
        /* Default exit sequence for state <downwards> */
        stateVector[1] = State.$NULLSTATE$;
        stateConfVectorPosition = 1;
        exitAction_main_region__Elevator_Available__movement__downwards_();
    }

    /* Default exit sequence for state <standby> */
    private void exitSequence_main_region__Elevator_Available__movement__standby_() {
        /* Default exit sequence for state <standby> */
        stateVector[1] = State.$NULLSTATE$;
        stateConfVectorPosition = 1;
    }

    /* Default exit sequence for state <ElevatorLevel> */
    private void exitSequence_main_region__Elevator_Available__level__ElevatorLevel_() {
        /* Default exit sequence for state <ElevatorLevel> */
        exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1();
    }

    /* Default exit sequence for state <readingDataFromElevator> */
    private void exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_() {
        /* Default exit sequence for state <readingDataFromElevator> */
        stateVector[2] = State.$NULLSTATE$;
        stateConfVectorPosition = 2;
        exitAction_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
    }

    /* Default exit sequence for state <gettingInput> */
    private void exitSequence_main_region__Elevator_Available__input__gettingInput_() {
        /* Default exit sequence for state <gettingInput> */
        stateVector[3] = State.$NULLSTATE$;
        stateConfVectorPosition = 3;
    }

    /* Default exit sequence for state <submitInput> */
    private void exitSequence_main_region__Elevator_Available__input__submitInput_() {
        /* Default exit sequence for state <submitInput> */
        stateVector[3] = State.$NULLSTATE$;
        stateConfVectorPosition = 3;
    }

    /* Default exit sequence for region main region */
    private void exitSequence_main_region() {
        /* Default exit sequence for region main region */
        switch(stateVector[0]) {
            case MAIN_REGION__ELEVATOR_UNAVAILABLE_:
                exitSequence_main_region__Elevator_Unavailable_();
                break;
            case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_:
                exitSequence_main_region__Elevator_Available__activity__idle_();
                break;
            case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_:
                exitSequence_main_region__Elevator_Available__activity__active_();
                break;
            default:
                break;
        }
        switch(stateVector[1]) {
            case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_:
                exitSequence_main_region__Elevator_Available__movement__upwards_();
                break;
            case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_:
                exitSequence_main_region__Elevator_Available__movement__downwards_();
                break;
            case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_:
                exitSequence_main_region__Elevator_Available__movement__standby_();
                break;
            default:
                break;
        }
        switch(stateVector[2]) {
            case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_:
                exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
                break;
            default:
                break;
        }
        switch(stateVector[3]) {
            case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_:
                exitSequence_main_region__Elevator_Available__input__gettingInput_();
                break;
            case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_:
                exitSequence_main_region__Elevator_Available__input__submitInput_();
                break;
            default:
                break;
        }
    }

    /* Default exit sequence for region activity */
    private void exitSequence_main_region__Elevator_Available__activity() {
        /* Default exit sequence for region activity */
        switch(stateVector[0]) {
            case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_:
                exitSequence_main_region__Elevator_Available__activity__idle_();
                break;
            case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_:
                exitSequence_main_region__Elevator_Available__activity__active_();
                break;
            default:
                break;
        }
    }

    /* Default exit sequence for region movement */
    private void exitSequence_main_region__Elevator_Available__movement() {
        /* Default exit sequence for region movement */
        switch(stateVector[1]) {
            case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_:
                exitSequence_main_region__Elevator_Available__movement__upwards_();
                break;
            case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_:
                exitSequence_main_region__Elevator_Available__movement__downwards_();
                break;
            case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_:
                exitSequence_main_region__Elevator_Available__movement__standby_();
                break;
            default:
                break;
        }
    }

    /* Default exit sequence for region level */
    private void exitSequence_main_region__Elevator_Available__level() {
        /* Default exit sequence for region level */
        switch(stateVector[2]) {
            case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_:
                exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
                break;
            default:
                break;
        }
    }

    /* Default exit sequence for region r1 */
    private void exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1() {
        /* Default exit sequence for region r1 */
        switch(stateVector[2]) {
            case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_:
                exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
                break;
            default:
                break;
        }
    }

    /* Default exit sequence for region input */
    private void exitSequence_main_region__Elevator_Available__input() {
        /* Default exit sequence for region input */
        switch(stateVector[3]) {
            case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_:
                exitSequence_main_region__Elevator_Available__input__gettingInput_();
                break;
            case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_:
                exitSequence_main_region__Elevator_Available__input__submitInput_();
                break;
            default:
                break;
        }
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region__Elevator_Unavailable__default();
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__Elevator_Available__activity__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region__Elevator_Available__activity__idle__default();
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__Elevator_Available__movement__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region__Elevator_Available__movement__standby__default();
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__Elevator_Available__level__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region__Elevator_Available__level__ElevatorLevel__default();
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__Elevator_Available__level__ElevatorLevel__r1__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator__default();
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__Elevator_Available__input__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region__Elevator_Available__input__gettingInput__default();
    }

    private long react(long transitioned_before) {
        /* State machine reactions. */
        return transitioned_before;
    }

    private long main_region__Elevator_Unavailable__react(long transitioned_before) {
        /* The reactions of state <Elevator_Unavailable>. */
        long transitioned_after = transitioned_before;
        if (!(getDoCompletion())) {
            if (transitioned_after < 0l) {
                if (toggle) {
                    exitSequence_main_region__Elevator_Unavailable_();
                    enterSequence_main_region__Elevator_Available__default();
                    react(0l);
                    transitioned_after = 0l;
                }
            }
            /* If no transition was taken */
            if (transitioned_after == transitioned_before) {
                /* then execute local reactions. */
                transitioned_after = react(transitioned_before);
            }
        }
        return transitioned_after;
    }

    private long main_region__Elevator_Available__react(long transitioned_before) {
        /* The reactions of state <Elevator_Available>. */
        long transitioned_after = transitioned_before;
        if (!(getDoCompletion())) {
            if (transitioned_after < 0l) {
                if (toggle) {
                    exitSequence_main_region__Elevator_Available_();
                    enterSequence_main_region__Elevator_Unavailable__default();
                    react(0l);
                    transitioned_after = 3l;
                }
            }
            /* If no transition was taken */
            if (transitioned_after == transitioned_before) {
                /* then execute local reactions. */
                transitioned_after = react(transitioned_before);
            }
        }
        return transitioned_after;
    }

    private long main_region__Elevator_Available__activity__idle__react(long transitioned_before) {
        /* The reactions of state <idle>. */
        long transitioned_after = transitioned_before;
        if (!(getDoCompletion())) {
            if (transitioned_after < 0l) {
                if (inUse) {
                    exitSequence_main_region__Elevator_Available__activity__idle_();
                    enterSequence_main_region__Elevator_Available__activity__active__default();
                    transitioned_after = 0l;
                }
            }
        }
        return transitioned_after;
    }

    private long main_region__Elevator_Available__activity__active__react(long transitioned_before) {
        /* The reactions of state <active>. */
        long transitioned_after = transitioned_before;
        if (!(getDoCompletion())) {
            if (transitioned_after < 0l) {
                if (stopped) {
                    exitSequence_main_region__Elevator_Available__activity__active_();
                    enterSequence_main_region__Elevator_Available__activity__idle__default();
                    transitioned_after = 0l;
                }
            }
        }
        return transitioned_after;
    }

    private long main_region__Elevator_Available__movement__upwards__react(long transitioned_before) {
        /* The reactions of state <upwards>. */
        long transitioned_after = transitioned_before;
        if (!(getDoCompletion())) {
            if (transitioned_after < 1l) {
                if (direction.down) {
                    exitSequence_main_region__Elevator_Available__movement__upwards_();
                    enterSequence_main_region__Elevator_Available__movement__downwards__default();
                    transitioned_after = 1l;
                } else {
                    if (stopped) {
                        exitSequence_main_region__Elevator_Available__movement__upwards_();
                        enterSequence_main_region__Elevator_Available__movement__standby__default();
                        transitioned_after = 1l;
                    } else {
                        if (timeEvents[0]) {
                            exitSequence_main_region__Elevator_Available__movement__upwards_();
                            level.current++;
                            timeEvents[0] = false;
                            enterSequence_main_region__Elevator_Available__movement__upwards__default();
                            transitioned_after = 1l;
                        }
                    }
                }
            }
        }
        return transitioned_after;
    }

    private long main_region__Elevator_Available__movement__downwards__react(long transitioned_before) {
        /* The reactions of state <downwards>. */
        long transitioned_after = transitioned_before;
        if (!(getDoCompletion())) {
            if (transitioned_after < 1l) {
                if (direction.up) {
                    exitSequence_main_region__Elevator_Available__movement__downwards_();
                    enterSequence_main_region__Elevator_Available__movement__upwards__default();
                    transitioned_after = 1l;
                } else {
                    if (inUse) {
                        exitSequence_main_region__Elevator_Available__movement__downwards_();
                        enterSequence_main_region__Elevator_Available__movement__standby__default();
                        transitioned_after = 1l;
                    } else {
                        if (timeEvents[1]) {
                            exitSequence_main_region__Elevator_Available__movement__downwards_();
                            level.current--;
                            timeEvents[1] = false;
                            enterSequence_main_region__Elevator_Available__movement__downwards__default();
                            transitioned_after = 1l;
                        }
                    }
                }
            }
        }
        return transitioned_after;
    }

    private long main_region__Elevator_Available__movement__standby__react(long transitioned_before) {
        /* The reactions of state <standby>. */
        long transitioned_after = transitioned_before;
        if (!(getDoCompletion())) {
            if (transitioned_after < 1l) {
                if (direction.down) {
                    exitSequence_main_region__Elevator_Available__movement__standby_();
                    enterSequence_main_region__Elevator_Available__movement__downwards__default();
                    transitioned_after = 1l;
                } else {
                    if (direction.up) {
                        exitSequence_main_region__Elevator_Available__movement__standby_();
                        enterSequence_main_region__Elevator_Available__movement__upwards__default();
                        transitioned_after = 1l;
                    }
                }
            }
        }
        return transitioned_after;
    }

    private long main_region__Elevator_Available__level__ElevatorLevel__react(long transitioned_before) {
        /* The reactions of state <ElevatorLevel>. */
        long transitioned_after = transitioned_before;
        if (!(getDoCompletion())) {
            if (transitioned_after < 2l) {
                if (level.getCurrent() > level.getUserLocation()) {
                    exitSequence_main_region__Elevator_Available__level__ElevatorLevel_();
                    direction.raiseDown();
                    enterSequence_main_region__Elevator_Available__level__ElevatorLevel__default();
                    transitioned_after = 2l;
                } else {
                    if (level.getCurrent() < level.getUserLocation()) {
                        exitSequence_main_region__Elevator_Available__level__ElevatorLevel_();
                        direction.raiseUp();
                        enterSequence_main_region__Elevator_Available__level__ElevatorLevel__default();
                        transitioned_after = 2l;
                    }
                }
            }
        }
        return transitioned_after;
    }

    private long main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator__react(long transitioned_before) {
        /* The reactions of state <readingDataFromElevator>. */
        long transitioned_after = transitioned_before;
        if (!(getDoCompletion())) {
            if (transitioned_after < 2l) {
                if (((timeEvents[2]) && (level.getCurrent() == level.getUserLocation()))) {
                    exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
                    raiseStopped();
                    timeEvents[2] = false;
                    enterSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator__default();
                    main_region__Elevator_Available__level__ElevatorLevel__react(2l);
                    transitioned_after = 2l;
                }
            }
            /* If no transition was taken */
            if (transitioned_after == transitioned_before) {
                /* then execute local reactions. */
                transitioned_after = main_region__Elevator_Available__level__ElevatorLevel__react(transitioned_before);
            }
        }
        return transitioned_after;
    }

    private long main_region__Elevator_Available__input__gettingInput__react(long transitioned_before) {
        /* The reactions of state <gettingInput>. */
        long transitioned_after = transitioned_before;
        if (!(getDoCompletion())) {
            if (transitioned_after < 3l) {
                if (input.submit) {
                    exitSequence_main_region__Elevator_Available__input__gettingInput_();
                    enterSequence_main_region__Elevator_Available__input__submitInput__default();
                    main_region__Elevator_Available__react(0l);
                    transitioned_after = 3l;
                } else {
                    if (input.up) {
                        exitSequence_main_region__Elevator_Available__input__gettingInput_();
                        input.value++;
                        enterSequence_main_region__Elevator_Available__input__gettingInput__default();
                        main_region__Elevator_Available__react(0l);
                        transitioned_after = 3l;
                    } else {
                        if (input.down) {
                            exitSequence_main_region__Elevator_Available__input__gettingInput_();
                            input.value--;
                            enterSequence_main_region__Elevator_Available__input__gettingInput__default();
                            main_region__Elevator_Available__react(0l);
                            transitioned_after = 3l;
                        }
                    }
                }
            }
            /* If no transition was taken */
            if (transitioned_after == transitioned_before) {
                /* then execute local reactions. */
                transitioned_after = main_region__Elevator_Available__react(transitioned_before);
            }
        }
        return transitioned_after;
    }

    private long main_region__Elevator_Available__input__submitInput__react(long transitioned_before) {
        /* The reactions of state <submitInput>. */
        long transitioned_after = transitioned_before;
        if (getDoCompletion()) {
            /* Default exit sequence for state <submitInput> */
            stateVector[3] = State.$NULLSTATE$;
            stateConfVectorPosition = 3;
            /* 'default' enter sequence for state <gettingInput> */
            stateVector[3] = State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_;
            stateConfVectorPosition = 3;
            main_region__Elevator_Available__react(0l);
        } else {
            /* If no transition was taken */
            if (transitioned_after == transitioned_before) {
                /* then execute local reactions. */
                transitioned_after = main_region__Elevator_Available__react(transitioned_before);
            }
        }
        return transitioned_after;
    }

    /* Can be used by the client code to trigger a run to completion step without raising an event. */
    public void triggerWithoutEvent() {
        runCycle();
    }
}
