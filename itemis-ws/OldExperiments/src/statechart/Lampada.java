/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class Lampada implements IEventDriven {
	public enum State {
		MAIN_REGION_OFF,
		MAIN_REGION_STANDBY,
		MAIN_REGION_ON,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Lampada() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Lampada */
		setVal(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Lampada */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Lampada */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		poweroff = false;
		poweron = false;
		pushbutton = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_OFF:
			main_region_OFF_react(-1l);
			break;
		case MAIN_REGION_STANDBY:
			main_region_STANDBY_react(-1l);
			break;
		case MAIN_REGION_ON:
			main_region_ON_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_OFF:
			return stateVector[0] == State.MAIN_REGION_OFF;
		case MAIN_REGION_STANDBY:
			return stateVector[0] == State.MAIN_REGION_STANDBY;
		case MAIN_REGION_ON:
			return stateVector[0] == State.MAIN_REGION_ON;
		default:
			return false;
		}
	}
	
	
	private boolean poweroff;
	
	
	public void raisePoweroff() {
		inEventQueue.add(() -> {
			poweroff = true;
		});
		runCycle();
	}
	
	private boolean poweron;
	
	
	public void raisePoweron() {
		inEventQueue.add(() -> {
			poweron = true;
		});
		runCycle();
	}
	
	private boolean pushbutton;
	
	
	public void raisePushbutton() {
		inEventQueue.add(() -> {
			pushbutton = true;
		});
		runCycle();
	}
	
	private boolean teardown;
	
	
	protected void raiseTeardown() {
		teardown = true;
		teardownObservable.next(null);
	}
	
	private Observable<Void> teardownObservable = new Observable<Void>();
	
	public Observable<Void> getTeardown() {
		return teardownObservable;
	}
	
	private long val;
	
	public long getVal() {
		return val;
	}
	
	public void setVal(long value) {
		this.val = value;
	}
	
	/* 'default' enter sequence for state OFF */
	private void enterSequence_main_region_OFF_default() {
		/* 'default' enter sequence for state OFF */
		stateVector[0] = State.MAIN_REGION_OFF;
	}
	
	/* 'default' enter sequence for state STANDBY */
	private void enterSequence_main_region_STANDBY_default() {
		/* 'default' enter sequence for state STANDBY */
		stateVector[0] = State.MAIN_REGION_STANDBY;
	}
	
	/* 'default' enter sequence for state ON */
	private void enterSequence_main_region_ON_default() {
		/* 'default' enter sequence for state ON */
		stateVector[0] = State.MAIN_REGION_ON;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state OFF */
	private void exitSequence_main_region_OFF() {
		/* Default exit sequence for state OFF */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state STANDBY */
	private void exitSequence_main_region_STANDBY() {
		/* Default exit sequence for state STANDBY */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state ON */
	private void exitSequence_main_region_ON() {
		/* Default exit sequence for state ON */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_OFF:
			exitSequence_main_region_OFF();
			break;
		case MAIN_REGION_STANDBY:
			exitSequence_main_region_STANDBY();
			break;
		case MAIN_REGION_ON:
			exitSequence_main_region_ON();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_OFF_default();
	}
	
	private long main_region_OFF_react(long transitioned_before) {
		/* The reactions of state OFF. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (poweron) {
				exitSequence_main_region_OFF();
				enterSequence_main_region_STANDBY_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_STANDBY_react(long transitioned_before) {
		/* The reactions of state STANDBY. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (poweroff) {
				exitSequence_main_region_STANDBY();
				enterSequence_main_region_OFF_default();
				transitioned_after = 0l;
			} else {
				if (pushbutton) {
					exitSequence_main_region_STANDBY();
					enterSequence_main_region_ON_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_ON_react(long transitioned_before) {
		/* The reactions of state ON. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (poweroff) {
				exitSequence_main_region_ON();
				setVal(90l);
				enterSequence_main_region_OFF_default();
				transitioned_after = 0l;
			} else {
				if (pushbutton) {
					exitSequence_main_region_ON();
					enterSequence_main_region_STANDBY_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
