/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Tracker implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_PREPARING,
		MAIN_REGION_DRIVING,
		MAIN_REGION_DRIVING_TRACKING_FIRST,
		MAIN_REGION_DRIVING_TRACKING_OCCUPY,
		MAIN_REGION_DRIVING_TRACKING_FREE,
		MAIN_REGION_IDLE,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[4];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean completed;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Tracker() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Tracker */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Tracker */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		received = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
	}
	
	private void clearInternalEvents() {
		completed = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_PREPARING:
			main_region_Preparing_react(-1l);
			break;
		case MAIN_REGION_DRIVING_TRACKING_FIRST:
			main_region_Driving_Tracking_First_react(-1l);
			break;
		case MAIN_REGION_DRIVING_TRACKING_OCCUPY:
			main_region_Driving_Tracking_Occupy_react(-1l);
			break;
		case MAIN_REGION_DRIVING_TRACKING_FREE:
			main_region_Driving_Tracking_Free_react(-1l);
			break;
		case MAIN_REGION_IDLE:
			main_region_Idle_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			clearInternalEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return true;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_PREPARING:
			return stateVector[0] == State.MAIN_REGION_PREPARING;
		case MAIN_REGION_DRIVING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_DRIVING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_DRIVING_TRACKING_FREE.ordinal();
		case MAIN_REGION_DRIVING_TRACKING_FIRST:
			return stateVector[0] == State.MAIN_REGION_DRIVING_TRACKING_FIRST;
		case MAIN_REGION_DRIVING_TRACKING_OCCUPY:
			return stateVector[0] == State.MAIN_REGION_DRIVING_TRACKING_OCCUPY;
		case MAIN_REGION_DRIVING_TRACKING_FREE:
			return stateVector[0] == State.MAIN_REGION_DRIVING_TRACKING_FREE;
		case MAIN_REGION_IDLE:
			return stateVector[0] == State.MAIN_REGION_IDLE;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	protected void raiseCompleted() {
		internalEventQueue.add(() -> {
			completed = true;
		});
	}
	
	public interface OperationCallback {
	
		public void first();
		
		public void free();
		
		public void occupy();
		
		public boolean valid();
		
		public boolean last();
		
		public void clear();
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean received;
	
	
	public void raiseReceived() {
		inEventQueue.add(() -> {
			received = true;
		});
		runCycle();
	}
	
	public static final long start = 1000l;
	
	public long getStart() {
		return start;
	}
	
	public static final long step = 300l;
	
	public long getStep() {
		return step;
	}
	
	/* Entry action for state 'Preparing'. */
	private void entryAction_main_region_Preparing() {
		/* Entry action for state 'Preparing'. */
		timerService.setTimer(this, 0, getStart(), false);
	}
	
	/* Entry action for state 'First'. */
	private void entryAction_main_region_Driving_Tracking_First() {
		/* Entry action for state 'First'. */
		timerService.setTimer(this, 1, getStep(), false);
		operationCallback.first();
	}
	
	/* Entry action for state 'Occupy'. */
	private void entryAction_main_region_Driving_Tracking_Occupy() {
		/* Entry action for state 'Occupy'. */
		timerService.setTimer(this, 2, getStep(), false);
		operationCallback.occupy();
	}
	
	/* Entry action for state 'Free'. */
	private void entryAction_main_region_Driving_Tracking_Free() {
		/* Entry action for state 'Free'. */
		timerService.setTimer(this, 3, getStep(), false);
		operationCallback.free();
		raiseCompleted();
	}
	
	/* Entry action for state 'Idle'. */
	private void entryAction_main_region_Idle() {
		/* Entry action for state 'Idle'. */
		operationCallback.clear();
	}
	
	/* Exit action for state 'Preparing'. */
	private void exitAction_main_region_Preparing() {
		/* Exit action for state 'Preparing'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'First'. */
	private void exitAction_main_region_Driving_Tracking_First() {
		/* Exit action for state 'First'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Occupy'. */
	private void exitAction_main_region_Driving_Tracking_Occupy() {
		/* Exit action for state 'Occupy'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Free'. */
	private void exitAction_main_region_Driving_Tracking_Free() {
		/* Exit action for state 'Free'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* 'default' enter sequence for state Preparing */
	private void enterSequence_main_region_Preparing_default() {
		/* 'default' enter sequence for state Preparing */
		entryAction_main_region_Preparing();
		stateVector[0] = State.MAIN_REGION_PREPARING;
	}
	
	/* 'default' enter sequence for state Driving */
	private void enterSequence_main_region_Driving_default() {
		/* 'default' enter sequence for state Driving */
		enterSequence_main_region_Driving_Tracking_default();
	}
	
	/* 'default' enter sequence for state First */
	private void enterSequence_main_region_Driving_Tracking_First_default() {
		/* 'default' enter sequence for state First */
		entryAction_main_region_Driving_Tracking_First();
		stateVector[0] = State.MAIN_REGION_DRIVING_TRACKING_FIRST;
	}
	
	/* 'default' enter sequence for state Occupy */
	private void enterSequence_main_region_Driving_Tracking_Occupy_default() {
		/* 'default' enter sequence for state Occupy */
		entryAction_main_region_Driving_Tracking_Occupy();
		stateVector[0] = State.MAIN_REGION_DRIVING_TRACKING_OCCUPY;
	}
	
	/* 'default' enter sequence for state Free */
	private void enterSequence_main_region_Driving_Tracking_Free_default() {
		/* 'default' enter sequence for state Free */
		entryAction_main_region_Driving_Tracking_Free();
		stateVector[0] = State.MAIN_REGION_DRIVING_TRACKING_FREE;
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_main_region_Idle_default() {
		/* 'default' enter sequence for state Idle */
		entryAction_main_region_Idle();
		stateVector[0] = State.MAIN_REGION_IDLE;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Tracking */
	private void enterSequence_main_region_Driving_Tracking_default() {
		/* 'default' enter sequence for region Tracking */
		react_main_region_Driving_Tracking__entry_Default();
	}
	
	/* Default exit sequence for state Preparing */
	private void exitSequence_main_region_Preparing() {
		/* Default exit sequence for state Preparing */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Preparing();
	}
	
	/* Default exit sequence for state Driving */
	private void exitSequence_main_region_Driving() {
		/* Default exit sequence for state Driving */
		exitSequence_main_region_Driving_Tracking();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state First */
	private void exitSequence_main_region_Driving_Tracking_First() {
		/* Default exit sequence for state First */
		stateVector[0] = State.MAIN_REGION_DRIVING;
		exitAction_main_region_Driving_Tracking_First();
	}
	
	/* Default exit sequence for state Occupy */
	private void exitSequence_main_region_Driving_Tracking_Occupy() {
		/* Default exit sequence for state Occupy */
		stateVector[0] = State.MAIN_REGION_DRIVING;
		exitAction_main_region_Driving_Tracking_Occupy();
	}
	
	/* Default exit sequence for state Free */
	private void exitSequence_main_region_Driving_Tracking_Free() {
		/* Default exit sequence for state Free */
		stateVector[0] = State.MAIN_REGION_DRIVING;
		exitAction_main_region_Driving_Tracking_Free();
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_main_region_Idle() {
		/* Default exit sequence for state Idle */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_PREPARING:
			exitSequence_main_region_Preparing();
			break;
		case MAIN_REGION_DRIVING:
			exitSequence_main_region_Driving();
			break;
		case MAIN_REGION_DRIVING_TRACKING_FIRST:
			exitSequence_main_region_Driving_Tracking_First();
			break;
		case MAIN_REGION_DRIVING_TRACKING_OCCUPY:
			exitSequence_main_region_Driving_Tracking_Occupy();
			break;
		case MAIN_REGION_DRIVING_TRACKING_FREE:
			exitSequence_main_region_Driving_Tracking_Free();
			break;
		case MAIN_REGION_IDLE:
			exitSequence_main_region_Idle();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Tracking */
	private void exitSequence_main_region_Driving_Tracking() {
		/* Default exit sequence for region Tracking */
		switch (stateVector[0]) {
		case MAIN_REGION_DRIVING_TRACKING_FIRST:
			exitSequence_main_region_Driving_Tracking_First();
			break;
		case MAIN_REGION_DRIVING_TRACKING_OCCUPY:
			exitSequence_main_region_Driving_Tracking_Occupy();
			break;
		case MAIN_REGION_DRIVING_TRACKING_FREE:
			exitSequence_main_region_Driving_Tracking_Free();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		/* The reactions of state null. */
		if (operationCallback.valid()) {
			enterSequence_main_region_Driving_default();
		} else {
			enterSequence_main_region_Idle_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Idle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Driving_Tracking__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Driving_Tracking_First_default();
	}
	
	private long main_region_Preparing_react(long transitioned_before) {
		/* The reactions of state Preparing. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (received) {
				exitSequence_main_region_Preparing();
				enterSequence_main_region_Preparing_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Preparing();
					timeEvents[0] = false;
					react_main_region__choice_0();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Driving_react(long transitioned_before) {
		/* The reactions of state Driving. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((completed) && (operationCallback.last()))) {
				exitSequence_main_region_Driving();
				enterSequence_main_region_Idle_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Driving_Tracking_First_react(long transitioned_before) {
		/* The reactions of state First. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Driving_Tracking_First();
				timeEvents[1] = false;
				enterSequence_main_region_Driving_Tracking_Occupy_default();
				main_region_Driving_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Driving_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Driving_Tracking_Occupy_react(long transitioned_before) {
		/* The reactions of state Occupy. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_main_region_Driving_Tracking_Occupy();
				timeEvents[2] = false;
				enterSequence_main_region_Driving_Tracking_Free_default();
				main_region_Driving_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Driving_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Driving_Tracking_Free_react(long transitioned_before) {
		/* The reactions of state Free. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[3]) {
				exitSequence_main_region_Driving_Tracking_Free();
				timeEvents[3] = false;
				enterSequence_main_region_Driving_Tracking_Occupy_default();
				main_region_Driving_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Driving_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Idle_react(long transitioned_before) {
		/* The reactions of state Idle. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (received) {
				exitSequence_main_region_Idle();
				enterSequence_main_region_Preparing_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
