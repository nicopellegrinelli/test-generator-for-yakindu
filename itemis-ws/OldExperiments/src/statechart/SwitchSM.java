/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class SwitchSM implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_WAIT_FOR_START,
		MAIN_REGION_INIT,
		MAIN_REGION_OPERATING,
		MAIN_REGION_OPERATING_OPERATING_UNLOCKED,
		MAIN_REGION_OPERATING_OPERATING_LOCKED,
		MAIN_REGION_OPERATING_OPERATING_TURNING,
		MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_RIGHT,
		MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_LEFT,
		MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_PENDING,
		MAIN_REGION_FAILED,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public SwitchSM() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Switch */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Switch */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		clear = false;
		start = false;
		leftResponse = false;
		rightResponse = false;
		response = false;
		queued = false;
		failed = false;
		unlock = false;
		turn = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_WAIT_FOR_START:
			main_region_Wait_for_Start_react(-1l);
			break;
		case MAIN_REGION_INIT:
			main_region_Init_react(-1l);
			break;
		case MAIN_REGION_OPERATING_OPERATING_UNLOCKED:
			main_region_Operating_operating_Unlocked_react(-1l);
			break;
		case MAIN_REGION_OPERATING_OPERATING_LOCKED:
			main_region_Operating_operating_Locked_react(-1l);
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_RIGHT:
			main_region_Operating_operating_Turning_Turning_process_Turn_Right_react(-1l);
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_LEFT:
			main_region_Operating_operating_Turning_Turning_process_Turn_Left_react(-1l);
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_PENDING:
			main_region_Operating_operating_Turning_Turning_process_Pending_react(-1l);
			break;
		case MAIN_REGION_FAILED:
			main_region_Failed_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_WAIT_FOR_START:
			return stateVector[0] == State.MAIN_REGION_WAIT_FOR_START;
		case MAIN_REGION_INIT:
			return stateVector[0] == State.MAIN_REGION_INIT;
		case MAIN_REGION_OPERATING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_PENDING.ordinal();
		case MAIN_REGION_OPERATING_OPERATING_UNLOCKED:
			return stateVector[0] == State.MAIN_REGION_OPERATING_OPERATING_UNLOCKED;
		case MAIN_REGION_OPERATING_OPERATING_LOCKED:
			return stateVector[0] == State.MAIN_REGION_OPERATING_OPERATING_LOCKED;
		case MAIN_REGION_OPERATING_OPERATING_TURNING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING_OPERATING_TURNING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_PENDING.ordinal();
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_RIGHT:
			return stateVector[0] == State.MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_RIGHT;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_LEFT:
			return stateVector[0] == State.MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_LEFT;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_PENDING:
			return stateVector[0] == State.MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_PENDING;
		case MAIN_REGION_FAILED:
			return stateVector[0] == State.MAIN_REGION_FAILED;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	public interface OperationCallback {
	
		public void inc();
		
		public void dec();
		
		public void left();
		
		public void right();
		
		public void request();
		
		public boolean doTurnLeft();
		
		public boolean isFree();
		
		public void fail();
		
		public void pending();
		
		public void lock(boolean do_it);
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean clear;
	
	
	public void raiseClear() {
		inEventQueue.add(() -> {
			clear = true;
		});
		runCycle();
	}
	
	private boolean start;
	
	
	public void raiseStart() {
		inEventQueue.add(() -> {
			start = true;
		});
		runCycle();
	}
	
	private boolean leftResponse;
	
	
	public void raiseLeftResponse() {
		inEventQueue.add(() -> {
			leftResponse = true;
		});
		runCycle();
	}
	
	private boolean rightResponse;
	
	
	public void raiseRightResponse() {
		inEventQueue.add(() -> {
			rightResponse = true;
		});
		runCycle();
	}
	
	private boolean response;
	
	
	public void raiseResponse() {
		inEventQueue.add(() -> {
			response = true;
		});
		runCycle();
	}
	
	private boolean queued;
	
	
	public void raiseQueued() {
		inEventQueue.add(() -> {
			queued = true;
		});
		runCycle();
	}
	
	private boolean failed;
	
	
	public void raiseFailed() {
		inEventQueue.add(() -> {
			failed = true;
		});
		runCycle();
	}
	
	private boolean unlock;
	
	
	public void raiseUnlock() {
		inEventQueue.add(() -> {
			unlock = true;
		});
		runCycle();
	}
	
	private boolean turn;
	
	
	public void raiseTurn() {
		inEventQueue.add(() -> {
			turn = true;
		});
		runCycle();
	}
	
	private boolean started;
	
	
	protected void raiseStarted() {
		started = true;
		startedObservable.next(null);
	}
	
	private Observable<Void> startedObservable = new Observable<Void>();
	
	public Observable<Void> getStarted() {
		return startedObservable;
	}
	
	private boolean entered;
	
	
	protected void raiseEntered() {
		entered = true;
		enteredObservable.next(null);
	}
	
	private Observable<Void> enteredObservable = new Observable<Void>();
	
	public Observable<Void> getEntered() {
		return enteredObservable;
	}
	
	private boolean stop;
	
	
	protected void raiseStop() {
		stop = true;
		stopObservable.next(null);
	}
	
	private Observable<Void> stopObservable = new Observable<Void>();
	
	public Observable<Void> getStop() {
		return stopObservable;
	}
	
	public static final long timeout = 2000l;
	
	public long getTimeout() {
		return timeout;
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_main_region_Init() {
		/* Entry action for state 'Init'. */
		timerService.setTimer(this, 0, getTimeout(), false);
		raiseEntered();
		operationCallback.inc();
		operationCallback.pending();
		operationCallback.request();
	}
	
	/* Entry action for state 'Unlocked'. */
	private void entryAction_main_region_Operating_operating_Unlocked() {
		/* Entry action for state 'Unlocked'. */
		operationCallback.lock(false);
	}
	
	/* Entry action for state 'Locked'. */
	private void entryAction_main_region_Operating_operating_Locked() {
		/* Entry action for state 'Locked'. */
		operationCallback.lock(true);
	}
	
	/* Entry action for state 'Turning'. */
	private void entryAction_main_region_Operating_operating_Turning() {
		/* Entry action for state 'Turning'. */
		timerService.setTimer(this, 1, getTimeout(), false);
		operationCallback.inc();
		operationCallback.pending();
	}
	
	/* Entry action for state 'Turn Right'. */
	private void entryAction_main_region_Operating_operating_Turning_Turning_process_Turn_Right() {
		/* Entry action for state 'Turn Right'. */
		operationCallback.right();
	}
	
	/* Entry action for state 'Turn Left'. */
	private void entryAction_main_region_Operating_operating_Turning_Turning_process_Turn_Left() {
		/* Entry action for state 'Turn Left'. */
		operationCallback.left();
	}
	
	/* Entry action for state 'Failed'. */
	private void entryAction_main_region_Failed() {
		/* Entry action for state 'Failed'. */
		operationCallback.fail();
		raiseStop();
	}
	
	/* Exit action for state 'Init'. */
	private void exitAction_main_region_Init() {
		/* Exit action for state 'Init'. */
		timerService.unsetTimer(this, 0);
		operationCallback.dec();
	}
	
	/* Exit action for state 'Turning'. */
	private void exitAction_main_region_Operating_operating_Turning() {
		/* Exit action for state 'Turning'. */
		timerService.unsetTimer(this, 1);
		operationCallback.dec();
	}
	
	/* 'default' enter sequence for state Wait for Start */
	private void enterSequence_main_region_Wait_for_Start_default() {
		/* 'default' enter sequence for state Wait for Start */
		stateVector[0] = State.MAIN_REGION_WAIT_FOR_START;
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Init_default() {
		/* 'default' enter sequence for state Init */
		entryAction_main_region_Init();
		stateVector[0] = State.MAIN_REGION_INIT;
	}
	
	/* 'default' enter sequence for state Operating */
	private void enterSequence_main_region_Operating_default() {
		/* 'default' enter sequence for state Operating */
		enterSequence_main_region_Operating_operating_default();
	}
	
	/* 'default' enter sequence for state Unlocked */
	private void enterSequence_main_region_Operating_operating_Unlocked_default() {
		/* 'default' enter sequence for state Unlocked */
		entryAction_main_region_Operating_operating_Unlocked();
		stateVector[0] = State.MAIN_REGION_OPERATING_OPERATING_UNLOCKED;
	}
	
	/* 'default' enter sequence for state Locked */
	private void enterSequence_main_region_Operating_operating_Locked_default() {
		/* 'default' enter sequence for state Locked */
		entryAction_main_region_Operating_operating_Locked();
		stateVector[0] = State.MAIN_REGION_OPERATING_OPERATING_LOCKED;
	}
	
	/* 'Switch.main_region.Operating.operating.Turning' enter sequence for state Turning */
	private void enterSequence_main_region_Operating_operating_Turning_Switch_main_region_Operating_operating_Turning() {
		/* 'Switch.main_region.Operating.operating.Turning' enter sequence for state Turning */
		stateVector[0] = State.MAIN_REGION_OPERATING_OPERATING_TURNING;
	}
	
	/* 'default' enter sequence for state Turn Right */
	private void enterSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Right_default() {
		/* 'default' enter sequence for state Turn Right */
		entryAction_main_region_Operating_operating_Turning_Turning_process_Turn_Right();
		stateVector[0] = State.MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_RIGHT;
	}
	
	/* 'default' enter sequence for state Turn Left */
	private void enterSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Left_default() {
		/* 'default' enter sequence for state Turn Left */
		entryAction_main_region_Operating_operating_Turning_Turning_process_Turn_Left();
		stateVector[0] = State.MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_LEFT;
	}
	
	/* 'default' enter sequence for state Pending */
	private void enterSequence_main_region_Operating_operating_Turning_Turning_process_Pending_default() {
		/* 'default' enter sequence for state Pending */
		stateVector[0] = State.MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_PENDING;
	}
	
	/* 'default' enter sequence for state Failed */
	private void enterSequence_main_region_Failed_default() {
		/* 'default' enter sequence for state Failed */
		entryAction_main_region_Failed();
		stateVector[0] = State.MAIN_REGION_FAILED;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region operating */
	private void enterSequence_main_region_Operating_operating_default() {
		/* 'default' enter sequence for region operating */
		react_main_region_Operating_operating__entry_Default();
	}
	
	/* Default exit sequence for state Wait for Start */
	private void exitSequence_main_region_Wait_for_Start() {
		/* Default exit sequence for state Wait for Start */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Init() {
		/* Default exit sequence for state Init */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Init();
	}
	
	/* Default exit sequence for state Operating */
	private void exitSequence_main_region_Operating() {
		/* Default exit sequence for state Operating */
		exitSequence_main_region_Operating_operating();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Unlocked */
	private void exitSequence_main_region_Operating_operating_Unlocked() {
		/* Default exit sequence for state Unlocked */
		stateVector[0] = State.MAIN_REGION_OPERATING;
	}
	
	/* Default exit sequence for state Locked */
	private void exitSequence_main_region_Operating_operating_Locked() {
		/* Default exit sequence for state Locked */
		stateVector[0] = State.MAIN_REGION_OPERATING;
	}
	
	/* Default exit sequence for state Turning */
	private void exitSequence_main_region_Operating_operating_Turning() {
		/* Default exit sequence for state Turning */
		exitSequence_main_region_Operating_operating_Turning_Turning_process();
		stateVector[0] = State.MAIN_REGION_OPERATING;
		exitAction_main_region_Operating_operating_Turning();
	}
	
	/* Default exit sequence for state Turn Right */
	private void exitSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Right() {
		/* Default exit sequence for state Turn Right */
		stateVector[0] = State.MAIN_REGION_OPERATING_OPERATING_TURNING;
	}
	
	/* Default exit sequence for state Turn Left */
	private void exitSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Left() {
		/* Default exit sequence for state Turn Left */
		stateVector[0] = State.MAIN_REGION_OPERATING_OPERATING_TURNING;
	}
	
	/* Default exit sequence for state Pending */
	private void exitSequence_main_region_Operating_operating_Turning_Turning_process_Pending() {
		/* Default exit sequence for state Pending */
		stateVector[0] = State.MAIN_REGION_OPERATING_OPERATING_TURNING;
	}
	
	/* Default exit sequence for state Failed */
	private void exitSequence_main_region_Failed() {
		/* Default exit sequence for state Failed */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_WAIT_FOR_START:
			exitSequence_main_region_Wait_for_Start();
			break;
		case MAIN_REGION_INIT:
			exitSequence_main_region_Init();
			break;
		case MAIN_REGION_OPERATING:
			exitSequence_main_region_Operating();
			break;
		case MAIN_REGION_OPERATING_OPERATING_UNLOCKED:
			exitSequence_main_region_Operating_operating_Unlocked();
			break;
		case MAIN_REGION_OPERATING_OPERATING_LOCKED:
			exitSequence_main_region_Operating_operating_Locked();
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING:
			exitSequence_main_region_Operating_operating_Turning();
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_RIGHT:
			exitSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Right();
			exitAction_main_region_Operating_operating_Turning();
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_LEFT:
			exitSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Left();
			exitAction_main_region_Operating_operating_Turning();
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_PENDING:
			exitSequence_main_region_Operating_operating_Turning_Turning_process_Pending();
			exitAction_main_region_Operating_operating_Turning();
			break;
		case MAIN_REGION_FAILED:
			exitSequence_main_region_Failed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region operating */
	private void exitSequence_main_region_Operating_operating() {
		/* Default exit sequence for region operating */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_OPERATING_UNLOCKED:
			exitSequence_main_region_Operating_operating_Unlocked();
			break;
		case MAIN_REGION_OPERATING_OPERATING_LOCKED:
			exitSequence_main_region_Operating_operating_Locked();
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING:
			exitSequence_main_region_Operating_operating_Turning();
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_RIGHT:
			exitSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Right();
			exitAction_main_region_Operating_operating_Turning();
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_LEFT:
			exitSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Left();
			exitAction_main_region_Operating_operating_Turning();
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_PENDING:
			exitSequence_main_region_Operating_operating_Turning_Turning_process_Pending();
			exitAction_main_region_Operating_operating_Turning();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Turning process */
	private void exitSequence_main_region_Operating_operating_Turning_Turning_process() {
		/* Default exit sequence for region Turning process */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_RIGHT:
			exitSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Right();
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_TURN_LEFT:
			exitSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Left();
			break;
		case MAIN_REGION_OPERATING_OPERATING_TURNING_TURNING_PROCESS_PENDING:
			exitSequence_main_region_Operating_operating_Turning_Turning_process_Pending();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Operating_operating__choice_0() {
		/* The reactions of state null. */
		if (operationCallback.isFree()) {
			enterSequence_main_region_Operating_operating_Unlocked_default();
		} else {
			enterSequence_main_region_Operating_operating_Locked_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Operating_operating_Turning_Turning_process__choice_0() {
		/* The reactions of state null. */
		if (operationCallback.doTurnLeft()) {
			enterSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Left_default();
		} else {
			enterSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Right_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Wait_for_Start_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Operating_operating__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Operating_operating_Unlocked_default();
	}
	
	private long main_region_Wait_for_Start_react(long transitioned_before) {
		/* The reactions of state Wait for Start. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (start) {
				exitSequence_main_region_Wait_for_Start();
				enterSequence_main_region_Init_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Init_react(long transitioned_before) {
		/* The reactions of state Init. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (response) {
				exitSequence_main_region_Init();
				raiseStarted();
				enterSequence_main_region_Operating_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Init();
					timeEvents[0] = false;
					enterSequence_main_region_Failed_default();
					transitioned_after = 0l;
				} else {
					if (failed) {
						exitSequence_main_region_Init();
						enterSequence_main_region_Failed_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_react(long transitioned_before) {
		/* The reactions of state Operating. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (failed) {
				exitSequence_main_region_Operating();
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			} else {
				if (start) {
					exitSequence_main_region_Operating();
					enterSequence_main_region_Init_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_operating_Unlocked_react(long transitioned_before) {
		/* The reactions of state Unlocked. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (turn) {
				exitSequence_main_region_Operating_operating_Unlocked();
				enterSequence_main_region_Operating_operating_Turning_Switch_main_region_Operating_operating_Turning();
				entryAction_main_region_Operating_operating_Turning();
				react_main_region_Operating_operating_Turning_Turning_process__choice_0();
				main_region_Operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_operating_Locked_react(long transitioned_before) {
		/* The reactions of state Locked. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (unlock) {
				exitSequence_main_region_Operating_operating_Locked();
				enterSequence_main_region_Operating_operating_Unlocked_default();
				main_region_Operating_react(0l);
				transitioned_after = 0l;
			} else {
				if (response) {
					exitSequence_main_region_Operating();
					enterSequence_main_region_Failed_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_operating_Turning_react(long transitioned_before) {
		/* The reactions of state Turning. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Operating();
				timeEvents[1] = false;
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			} else {
				if (leftResponse) {
					exitSequence_main_region_Operating_operating_Turning();
					react_main_region_Operating_operating__choice_0();
					transitioned_after = 0l;
				} else {
					if (rightResponse) {
						exitSequence_main_region_Operating_operating_Turning();
						react_main_region_Operating_operating__choice_0();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_operating_Turning_Turning_process_Turn_Right_react(long transitioned_before) {
		/* The reactions of state Turn Right. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (queued) {
				exitSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Right();
				enterSequence_main_region_Operating_operating_Turning_Turning_process_Pending_default();
				main_region_Operating_operating_Turning_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_operating_Turning_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_operating_Turning_Turning_process_Turn_Left_react(long transitioned_before) {
		/* The reactions of state Turn Left. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (queued) {
				exitSequence_main_region_Operating_operating_Turning_Turning_process_Turn_Left();
				enterSequence_main_region_Operating_operating_Turning_Turning_process_Pending_default();
				main_region_Operating_operating_Turning_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_operating_Turning_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_operating_Turning_Turning_process_Pending_react(long transitioned_before) {
		/* The reactions of state Pending. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Operating_operating_Turning_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Failed_react(long transitioned_before) {
		/* The reactions of state Failed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (clear) {
				exitSequence_main_region_Failed();
				enterSequence_main_region_Wait_for_Start_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
