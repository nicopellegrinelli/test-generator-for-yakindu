/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class TrafficLightStateMachine implements ITimed, IEventDriven {
	public enum State {
		TRAFFICLIGHT_OPERATING,
		TRAFFICLIGHT_OPERATING_R_PREPARE,
		TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO,
		TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP,
		TRAFFICLIGHT_OPERATING_R_STOP,
		TRAFFICLIGHT_OPERATING_R_GO,
		TRAFFICLIGHT_STANDBY,
		TRAFFICLIGHT_STANDBY_BLINK_ON,
		TRAFFICLIGHT_STANDBY_BLINK_OFF,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public TrafficLightStateMachine() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart TrafficLightStateMachine */
		/* Entry action for statechart 'TrafficLightStateMachine'. */
		raiseRedOff();
		raiseYellowOff();
		raiseGreenOff();
		enterSequence_trafficlight_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart TrafficLightStateMachine */
		exitSequence_trafficlight();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		standby = false;
		operate = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO:
			trafficlight_operating_r_prepare_switch_to_go_react(-1l);
			break;
		case TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP:
			trafficlight_operating_r_prepare_switch_to_stop_react(-1l);
			break;
		case TRAFFICLIGHT_OPERATING_R_STOP:
			trafficlight_operating_r_stop_react(-1l);
			break;
		case TRAFFICLIGHT_OPERATING_R_GO:
			trafficlight_operating_r_go_react(-1l);
			break;
		case TRAFFICLIGHT_STANDBY_BLINK_ON:
			trafficlight_standby_blink_on_react(-1l);
			break;
		case TRAFFICLIGHT_STANDBY_BLINK_OFF:
			trafficlight_standby_blink_off_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case TRAFFICLIGHT_OPERATING:
			return stateVector[0].ordinal() >= State.
					TRAFFICLIGHT_OPERATING.ordinal()&& stateVector[0].ordinal() <= State.TRAFFICLIGHT_OPERATING_R_GO.ordinal();
		case TRAFFICLIGHT_OPERATING_R_PREPARE:
			return stateVector[0].ordinal() >= State.
					TRAFFICLIGHT_OPERATING_R_PREPARE.ordinal()&& stateVector[0].ordinal() <= State.TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP.ordinal();
		case TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO:
			return stateVector[0] == State.TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO;
		case TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP:
			return stateVector[0] == State.TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP;
		case TRAFFICLIGHT_OPERATING_R_STOP:
			return stateVector[0] == State.TRAFFICLIGHT_OPERATING_R_STOP;
		case TRAFFICLIGHT_OPERATING_R_GO:
			return stateVector[0] == State.TRAFFICLIGHT_OPERATING_R_GO;
		case TRAFFICLIGHT_STANDBY:
			return stateVector[0].ordinal() >= State.
					TRAFFICLIGHT_STANDBY.ordinal()&& stateVector[0].ordinal() <= State.TRAFFICLIGHT_STANDBY_BLINK_OFF.ordinal();
		case TRAFFICLIGHT_STANDBY_BLINK_ON:
			return stateVector[0] == State.TRAFFICLIGHT_STANDBY_BLINK_ON;
		case TRAFFICLIGHT_STANDBY_BLINK_OFF:
			return stateVector[0] == State.TRAFFICLIGHT_STANDBY_BLINK_OFF;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean redOn;
	
	
	protected void raiseRedOn() {
		redOn = true;
		redOnObservable.next(null);
	}
	
	private Observable<Void> redOnObservable = new Observable<Void>();
	
	public Observable<Void> getRedOn() {
		return redOnObservable;
	}
	
	private boolean redOff;
	
	
	protected void raiseRedOff() {
		redOff = true;
		redOffObservable.next(null);
	}
	
	private Observable<Void> redOffObservable = new Observable<Void>();
	
	public Observable<Void> getRedOff() {
		return redOffObservable;
	}
	
	private boolean yellowOn;
	
	
	protected void raiseYellowOn() {
		yellowOn = true;
		yellowOnObservable.next(null);
	}
	
	private Observable<Void> yellowOnObservable = new Observable<Void>();
	
	public Observable<Void> getYellowOn() {
		return yellowOnObservable;
	}
	
	private boolean yellowOff;
	
	
	protected void raiseYellowOff() {
		yellowOff = true;
		yellowOffObservable.next(null);
	}
	
	private Observable<Void> yellowOffObservable = new Observable<Void>();
	
	public Observable<Void> getYellowOff() {
		return yellowOffObservable;
	}
	
	private boolean greenOn;
	
	
	protected void raiseGreenOn() {
		greenOn = true;
		greenOnObservable.next(null);
	}
	
	private Observable<Void> greenOnObservable = new Observable<Void>();
	
	public Observable<Void> getGreenOn() {
		return greenOnObservable;
	}
	
	private boolean greenOff;
	
	
	protected void raiseGreenOff() {
		greenOff = true;
		greenOffObservable.next(null);
	}
	
	private Observable<Void> greenOffObservable = new Observable<Void>();
	
	public Observable<Void> getGreenOff() {
		return greenOffObservable;
	}
	
	private boolean standby;
	
	
	public void raiseStandby() {
		inEventQueue.add(() -> {
			standby = true;
		});
		runCycle();
	}
	
	private boolean operate;
	
	
	public void raiseOperate() {
		inEventQueue.add(() -> {
			operate = true;
		});
		runCycle();
	}
	
	/* Entry action for state 'prepare'. */
	private void entryAction_trafficlight_operating_r_prepare() {
		/* Entry action for state 'prepare'. */
		raiseYellowOn();
	}
	
	/* Entry action for state 'to go'. */
	private void entryAction_trafficlight_operating_r_prepare_switch_to_go() {
		/* Entry action for state 'to go'. */
		timerService.setTimer(this, 0, (1l * 1000l), false);
		raiseRedOn();
	}
	
	/* Entry action for state 'to stop'. */
	private void entryAction_trafficlight_operating_r_prepare_switch_to_stop() {
		/* Entry action for state 'to stop'. */
		timerService.setTimer(this, 1, (1l * 1000l), false);
	}
	
	/* Entry action for state 'stop'. */
	private void entryAction_trafficlight_operating_r_stop() {
		/* Entry action for state 'stop'. */
		timerService.setTimer(this, 2, (3l * 1000l), false);
		raiseRedOn();
	}
	
	/* Entry action for state 'go'. */
	private void entryAction_trafficlight_operating_r_go() {
		/* Entry action for state 'go'. */
		timerService.setTimer(this, 3, (3l * 1000l), false);
		raiseGreenOn();
	}
	
	/* Entry action for state 'on'. */
	private void entryAction_trafficlight_standby_blink_on() {
		/* Entry action for state 'on'. */
		timerService.setTimer(this, 4, (1l * 1000l), false);
		raiseYellowOn();
	}
	
	/* Entry action for state 'off'. */
	private void entryAction_trafficlight_standby_blink_off() {
		/* Entry action for state 'off'. */
		timerService.setTimer(this, 5, (1l * 1000l), false);
	}
	
	/* Exit action for state 'prepare'. */
	private void exitAction_trafficlight_operating_r_prepare() {
		/* Exit action for state 'prepare'. */
		raiseYellowOff();
	}
	
	/* Exit action for state 'to go'. */
	private void exitAction_trafficlight_operating_r_prepare_switch_to_go() {
		/* Exit action for state 'to go'. */
		timerService.unsetTimer(this, 0);
		raiseRedOff();
	}
	
	/* Exit action for state 'to stop'. */
	private void exitAction_trafficlight_operating_r_prepare_switch_to_stop() {
		/* Exit action for state 'to stop'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'stop'. */
	private void exitAction_trafficlight_operating_r_stop() {
		/* Exit action for state 'stop'. */
		timerService.unsetTimer(this, 2);
		raiseRedOff();
	}
	
	/* Exit action for state 'go'. */
	private void exitAction_trafficlight_operating_r_go() {
		/* Exit action for state 'go'. */
		timerService.unsetTimer(this, 3);
		raiseGreenOff();
	}
	
	/* Exit action for state 'on'. */
	private void exitAction_trafficlight_standby_blink_on() {
		/* Exit action for state 'on'. */
		timerService.unsetTimer(this, 4);
		raiseYellowOff();
	}
	
	/* Exit action for state 'off'. */
	private void exitAction_trafficlight_standby_blink_off() {
		/* Exit action for state 'off'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state operating */
	private void enterSequence_trafficlight_operating_default() {
		/* 'default' enter sequence for state operating */
		enterSequence_trafficlight_operating_r_default();
	}
	
	/* 'default' enter sequence for state to go */
	private void enterSequence_trafficlight_operating_r_prepare_switch_to_go_default() {
		/* 'default' enter sequence for state to go */
		entryAction_trafficlight_operating_r_prepare_switch_to_go();
		stateVector[0] = State.TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO;
	}
	
	/* 'default' enter sequence for state to stop */
	private void enterSequence_trafficlight_operating_r_prepare_switch_to_stop_default() {
		/* 'default' enter sequence for state to stop */
		entryAction_trafficlight_operating_r_prepare_switch_to_stop();
		stateVector[0] = State.TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP;
	}
	
	/* 'default' enter sequence for state stop */
	private void enterSequence_trafficlight_operating_r_stop_default() {
		/* 'default' enter sequence for state stop */
		entryAction_trafficlight_operating_r_stop();
		stateVector[0] = State.TRAFFICLIGHT_OPERATING_R_STOP;
	}
	
	/* 'default' enter sequence for state go */
	private void enterSequence_trafficlight_operating_r_go_default() {
		/* 'default' enter sequence for state go */
		entryAction_trafficlight_operating_r_go();
		stateVector[0] = State.TRAFFICLIGHT_OPERATING_R_GO;
	}
	
	/* 'default' enter sequence for state standby */
	private void enterSequence_trafficlight_standby_default() {
		/* 'default' enter sequence for state standby */
		enterSequence_trafficlight_standby_blink_default();
	}
	
	/* 'default' enter sequence for state on */
	private void enterSequence_trafficlight_standby_blink_on_default() {
		/* 'default' enter sequence for state on */
		entryAction_trafficlight_standby_blink_on();
		stateVector[0] = State.TRAFFICLIGHT_STANDBY_BLINK_ON;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_trafficlight_standby_blink_off_default() {
		/* 'default' enter sequence for state off */
		entryAction_trafficlight_standby_blink_off();
		stateVector[0] = State.TRAFFICLIGHT_STANDBY_BLINK_OFF;
	}
	
	/* 'default' enter sequence for region trafficlight */
	private void enterSequence_trafficlight_default() {
		/* 'default' enter sequence for region trafficlight */
		react_trafficlight__entry_Default();
	}
	
	/* 'default' enter sequence for region r */
	private void enterSequence_trafficlight_operating_r_default() {
		/* 'default' enter sequence for region r */
		react_trafficlight_operating_r__entry_Default();
	}
	
	/* 'default' enter sequence for region blink */
	private void enterSequence_trafficlight_standby_blink_default() {
		/* 'default' enter sequence for region blink */
		react_trafficlight_standby_blink__entry_Default();
	}
	
	/* Default exit sequence for state operating */
	private void exitSequence_trafficlight_operating() {
		/* Default exit sequence for state operating */
		exitSequence_trafficlight_operating_r();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state prepare */
	private void exitSequence_trafficlight_operating_r_prepare() {
		/* Default exit sequence for state prepare */
		exitSequence_trafficlight_operating_r_prepare_switch();
		stateVector[0] = State.TRAFFICLIGHT_OPERATING;
		exitAction_trafficlight_operating_r_prepare();
	}
	
	/* Default exit sequence for state to go */
	private void exitSequence_trafficlight_operating_r_prepare_switch_to_go() {
		/* Default exit sequence for state to go */
		stateVector[0] = State.TRAFFICLIGHT_OPERATING_R_PREPARE;
		exitAction_trafficlight_operating_r_prepare_switch_to_go();
	}
	
	/* Default exit sequence for state to stop */
	private void exitSequence_trafficlight_operating_r_prepare_switch_to_stop() {
		/* Default exit sequence for state to stop */
		stateVector[0] = State.TRAFFICLIGHT_OPERATING_R_PREPARE;
		exitAction_trafficlight_operating_r_prepare_switch_to_stop();
	}
	
	/* Default exit sequence for state stop */
	private void exitSequence_trafficlight_operating_r_stop() {
		/* Default exit sequence for state stop */
		stateVector[0] = State.TRAFFICLIGHT_OPERATING;
		exitAction_trafficlight_operating_r_stop();
	}
	
	/* Default exit sequence for state go */
	private void exitSequence_trafficlight_operating_r_go() {
		/* Default exit sequence for state go */
		stateVector[0] = State.TRAFFICLIGHT_OPERATING;
		exitAction_trafficlight_operating_r_go();
	}
	
	/* Default exit sequence for state standby */
	private void exitSequence_trafficlight_standby() {
		/* Default exit sequence for state standby */
		exitSequence_trafficlight_standby_blink();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state on */
	private void exitSequence_trafficlight_standby_blink_on() {
		/* Default exit sequence for state on */
		stateVector[0] = State.TRAFFICLIGHT_STANDBY;
		exitAction_trafficlight_standby_blink_on();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_trafficlight_standby_blink_off() {
		/* Default exit sequence for state off */
		stateVector[0] = State.TRAFFICLIGHT_STANDBY;
		exitAction_trafficlight_standby_blink_off();
	}
	
	/* Default exit sequence for region trafficlight */
	private void exitSequence_trafficlight() {
		/* Default exit sequence for region trafficlight */
		switch (stateVector[0]) {
		case TRAFFICLIGHT_OPERATING:
			exitSequence_trafficlight_operating();
			break;
		case TRAFFICLIGHT_OPERATING_R_PREPARE:
			exitSequence_trafficlight_operating_r_prepare();
			break;
		case TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO:
			exitSequence_trafficlight_operating_r_prepare_switch_to_go();
			exitAction_trafficlight_operating_r_prepare();
			break;
		case TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP:
			exitSequence_trafficlight_operating_r_prepare_switch_to_stop();
			exitAction_trafficlight_operating_r_prepare();
			break;
		case TRAFFICLIGHT_OPERATING_R_STOP:
			exitSequence_trafficlight_operating_r_stop();
			break;
		case TRAFFICLIGHT_OPERATING_R_GO:
			exitSequence_trafficlight_operating_r_go();
			break;
		case TRAFFICLIGHT_STANDBY:
			exitSequence_trafficlight_standby();
			break;
		case TRAFFICLIGHT_STANDBY_BLINK_ON:
			exitSequence_trafficlight_standby_blink_on();
			break;
		case TRAFFICLIGHT_STANDBY_BLINK_OFF:
			exitSequence_trafficlight_standby_blink_off();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r */
	private void exitSequence_trafficlight_operating_r() {
		/* Default exit sequence for region r */
		switch (stateVector[0]) {
		case TRAFFICLIGHT_OPERATING_R_PREPARE:
			exitSequence_trafficlight_operating_r_prepare();
			break;
		case TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO:
			exitSequence_trafficlight_operating_r_prepare_switch_to_go();
			exitAction_trafficlight_operating_r_prepare();
			break;
		case TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP:
			exitSequence_trafficlight_operating_r_prepare_switch_to_stop();
			exitAction_trafficlight_operating_r_prepare();
			break;
		case TRAFFICLIGHT_OPERATING_R_STOP:
			exitSequence_trafficlight_operating_r_stop();
			break;
		case TRAFFICLIGHT_OPERATING_R_GO:
			exitSequence_trafficlight_operating_r_go();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region switch */
	private void exitSequence_trafficlight_operating_r_prepare_switch() {
		/* Default exit sequence for region switch */
		switch (stateVector[0]) {
		case TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO:
			exitSequence_trafficlight_operating_r_prepare_switch_to_go();
			break;
		case TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP:
			exitSequence_trafficlight_operating_r_prepare_switch_to_stop();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region blink */
	private void exitSequence_trafficlight_standby_blink() {
		/* Default exit sequence for region blink */
		switch (stateVector[0]) {
		case TRAFFICLIGHT_STANDBY_BLINK_ON:
			exitSequence_trafficlight_standby_blink_on();
			break;
		case TRAFFICLIGHT_STANDBY_BLINK_OFF:
			exitSequence_trafficlight_standby_blink_off();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_trafficlight__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_trafficlight_operating_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_trafficlight_operating_r__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_trafficlight_operating_r_stop_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_trafficlight_standby_blink__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_trafficlight_standby_blink_on_default();
	}
	
	private long trafficlight_operating_react(long transitioned_before) {
		/* The reactions of state operating. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (standby) {
				exitSequence_trafficlight_operating();
				enterSequence_trafficlight_standby_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long trafficlight_operating_r_prepare_react(long transitioned_before) {
		/* The reactions of state prepare. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = trafficlight_operating_react(transitioned_before);
		return transitioned_after;
	}
	
	private long trafficlight_operating_r_prepare_switch_to_go_react(long transitioned_before) {
		/* The reactions of state to go. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_trafficlight_operating_r_prepare();
				timeEvents[0] = false;
				enterSequence_trafficlight_operating_r_go_default();
				trafficlight_operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = trafficlight_operating_r_prepare_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long trafficlight_operating_r_prepare_switch_to_stop_react(long transitioned_before) {
		/* The reactions of state to stop. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_trafficlight_operating_r_prepare();
				timeEvents[1] = false;
				enterSequence_trafficlight_operating_r_stop_default();
				trafficlight_operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = trafficlight_operating_r_prepare_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long trafficlight_operating_r_stop_react(long transitioned_before) {
		/* The reactions of state stop. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_trafficlight_operating_r_stop();
				timeEvents[2] = false;
				entryAction_trafficlight_operating_r_prepare();
				enterSequence_trafficlight_operating_r_prepare_switch_to_go_default();
				trafficlight_operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = trafficlight_operating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long trafficlight_operating_r_go_react(long transitioned_before) {
		/* The reactions of state go. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[3]) {
				exitSequence_trafficlight_operating_r_go();
				timeEvents[3] = false;
				entryAction_trafficlight_operating_r_prepare();
				enterSequence_trafficlight_operating_r_prepare_switch_to_stop_default();
				trafficlight_operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = trafficlight_operating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long trafficlight_standby_react(long transitioned_before) {
		/* The reactions of state standby. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (operate) {
				exitSequence_trafficlight_standby();
				enterSequence_trafficlight_operating_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long trafficlight_standby_blink_on_react(long transitioned_before) {
		/* The reactions of state on. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[4]) {
				exitSequence_trafficlight_standby_blink_on();
				timeEvents[4] = false;
				enterSequence_trafficlight_standby_blink_off_default();
				trafficlight_standby_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = trafficlight_standby_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long trafficlight_standby_blink_off_react(long transitioned_before) {
		/* The reactions of state off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[5]) {
				exitSequence_trafficlight_standby_blink_off();
				timeEvents[5] = false;
				enterSequence_trafficlight_standby_blink_on_default();
				trafficlight_standby_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = trafficlight_standby_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
