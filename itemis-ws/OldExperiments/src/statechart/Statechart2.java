/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Statechart2 implements ITimed, IEventDriven {
	public static class UserVar {
		private double limitDegreeHigh;
		
		public double getLimitDegreeHigh() {
			return limitDegreeHigh;
		}
		
		public void setLimitDegreeHigh(double value) {
			this.limitDegreeHigh = value;
		}
		
		private double limitDegreeLow;
		
		public double getLimitDegreeLow() {
			return limitDegreeLow;
		}
		
		public void setLimitDegreeLow(double value) {
			this.limitDegreeLow = value;
		}
		
		private double baseSpeed;
		
		public double getBaseSpeed() {
			return baseSpeed;
		}
		
		public void setBaseSpeed(double value) {
			this.baseSpeed = value;
		}
		
		private double baseRotation;
		
		public double getBaseRotation() {
			return baseRotation;
		}
		
		public void setBaseRotation(double value) {
			this.baseRotation = value;
		}
		
		private long turnType;
		
		public long getTurnType() {
			return turnType;
		}
		
		public void setTurnType(long value) {
			this.turnType = value;
		}
		
		private long limitType;
		
		public long getLimitType() {
			return limitType;
		}
		
		public void setLimitType(long value) {
			this.limitType = value;
		}
		
		private long specificRow;
		
		public long getSpecificRow() {
			return specificRow;
		}
		
		public void setSpecificRow(long value) {
			this.specificRow = value;
		}
		
		private long specificColumn;
		
		public long getSpecificColumn() {
			return specificColumn;
		}
		
		public void setSpecificColumn(long value) {
			this.specificColumn = value;
		}
		
		private boolean isInSpecificExploration;
		
		public boolean getIsInSpecificExploration() {
			return isInSpecificExploration;
		}
		
		public void setIsInSpecificExploration(boolean value) {
			this.isInSpecificExploration = value;
		}
		
		private double xRow;
		
		public double getXRow() {
			return xRow;
		}
		
		public void setXRow(double value) {
			this.xRow = value;
		}
		
		private double yCol;
		
		public double getYCol() {
			return yCol;
		}
		
		public void setYCol(double value) {
			this.yCol = value;
		}
		
		private double xAbs;
		
		public double getXAbs() {
			return xAbs;
		}
		
		public void setXAbs(double value) {
			this.xAbs = value;
		}
		
		private double yAbs;
		
		public double getYAbs() {
			return yAbs;
		}
		
		public void setYAbs(double value) {
			this.yAbs = value;
		}
		
		private double absDis;
		
		public double getAbsDis() {
			return absDis;
		}
		
		public void setAbsDis(double value) {
			this.absDis = value;
		}
		
		private double userX;
		
		public double getUserX() {
			return userX;
		}
		
		public void setUserX(double value) {
			this.userX = value;
		}
		
		private double userY;
		
		public double getUserY() {
			return userY;
		}
		
		public void setUserY(double value) {
			this.userY = value;
		}
		
		private boolean rowOrColChanged;
		
		public boolean getRowOrColChanged() {
			return rowOrColChanged;
		}
		
		public void setRowOrColChanged(boolean value) {
			this.rowOrColChanged = value;
		}
		
		private long calibrationIncrement;
		
		public long getCalibrationIncrement() {
			return calibrationIncrement;
		}
		
		public void setCalibrationIncrement(long value) {
			this.calibrationIncrement = value;
		}
		
		private boolean startprocedure;
		
		public boolean getStartprocedure() {
			return startprocedure;
		}
		
		public void setStartprocedure(boolean value) {
			this.startprocedure = value;
		}
		
		private double straightOffset;
		
		public double getStraightOffset() {
			return straightOffset;
		}
		
		public void setStraightOffset(double value) {
			this.straightOffset = value;
		}
		
		private boolean aligned;
		
		public boolean getAligned() {
			return aligned;
		}
		
		public void setAligned(boolean value) {
			this.aligned = value;
		}
		
		private long orientation;
		
		public long getOrientation() {
			return orientation;
		}
		
		public void setOrientation(long value) {
			this.orientation = value;
		}
		
		private long currentOrientation;
		
		public long getCurrentOrientation() {
			return currentOrientation;
		}
		
		public void setCurrentOrientation(long value) {
			this.currentOrientation = value;
		}
		
		private double aveOff;
		
		public double getAveOff() {
			return aveOff;
		}
		
		public void setAveOff(double value) {
			this.aveOff = value;
		}
		
		private double offBack;
		
		public double getOffBack() {
			return offBack;
		}
		
		public void setOffBack(double value) {
			this.offBack = value;
		}
		
		private boolean straighten;
		
		public boolean getStraighten() {
			return straighten;
		}
		
		public void setStraighten(boolean value) {
			this.straighten = value;
		}
		
		private boolean turned;
		
		public boolean getTurned() {
			return turned;
		}
		
		public void setTurned(boolean value) {
			this.turned = value;
		}
		
	}
	
	public static class BaseValues {
		private double maxSpeed;
		
		public double getMaxSpeed() {
			return maxSpeed;
		}
		
		public void setMaxSpeed(double value) {
			this.maxSpeed = value;
		}
		
		private double maxRotation;
		
		public double getMaxRotation() {
			return maxRotation;
		}
		
		public void setMaxRotation(double value) {
			this.maxRotation = value;
		}
		
		private long degreesFront;
		
		public long getDegreesFront() {
			return degreesFront;
		}
		
		public void setDegreesFront(long value) {
			this.degreesFront = value;
		}
		
		private long degreesRight;
		
		public long getDegreesRight() {
			return degreesRight;
		}
		
		public void setDegreesRight(long value) {
			this.degreesRight = value;
		}
		
		private long degreesBack;
		
		public long getDegreesBack() {
			return degreesBack;
		}
		
		public void setDegreesBack(long value) {
			this.degreesBack = value;
		}
		
		private long degreesLeft;
		
		public long getDegreesLeft() {
			return degreesLeft;
		}
		
		public void setDegreesLeft(long value) {
			this.degreesLeft = value;
		}
		
	}
	
	public static class Output {
		private double speed;
		
		public double getSpeed() {
			return speed;
		}
		
		public void setSpeed(double value) {
			this.speed = value;
		}
		
		private double rotation;
		
		public double getRotation() {
			return rotation;
		}
		
		public void setRotation(double value) {
			this.rotation = value;
		}
		
		private long obstacles;
		
		public long getObstacles() {
			return obstacles;
		}
		
		public void setObstacles(long value) {
			this.obstacles = value;
		}
		
		private long gems;
		
		public long getGems() {
			return gems;
		}
		
		public void setGems(long value) {
			this.gems = value;
		}
		
		private long finish;
		
		public long getFinish() {
			return finish;
		}
		
		public void setFinish(long value) {
			this.finish = value;
		}
		
	}
	
	public static class Grid {
		private boolean update;
		
		public boolean getUpdate() {
			return update;
		}
		
		public void setUpdate(boolean value) {
			this.update = value;
		}
		
		private boolean receive;
		
		public boolean getReceive() {
			return receive;
		}
		
		public void setReceive(boolean value) {
			this.receive = value;
		}
		
		private long column;
		
		public long getColumn() {
			return column;
		}
		
		public void setColumn(long value) {
			this.column = value;
		}
		
		private long row;
		
		public long getRow() {
			return row;
		}
		
		public void setRow(long value) {
			this.row = value;
		}
		
		private long orientation;
		
		public long getOrientation() {
			return orientation;
		}
		
		public void setOrientation(long value) {
			this.orientation = value;
		}
		
		private boolean visited;
		
		public boolean getVisited() {
			return visited;
		}
		
		public void setVisited(boolean value) {
			this.visited = value;
		}
		
		private long wallFront;
		
		public long getWallFront() {
			return wallFront;
		}
		
		public void setWallFront(long value) {
			this.wallFront = value;
		}
		
		private long wallRight;
		
		public long getWallRight() {
			return wallRight;
		}
		
		public void setWallRight(long value) {
			this.wallRight = value;
		}
		
		private long wallBack;
		
		public long getWallBack() {
			return wallBack;
		}
		
		public void setWallBack(long value) {
			this.wallBack = value;
		}
		
		private long wallLeft;
		
		public long getWallLeft() {
			return wallLeft;
		}
		
		public void setWallLeft(long value) {
			this.wallLeft = value;
		}
		
		private double gridSize;
		
		public double getGridSize() {
			return gridSize;
		}
		
		public void setGridSize(double value) {
			this.gridSize = value;
		}
		
		private long maxCol;
		
		public long getMaxCol() {
			return maxCol;
		}
		
		public void setMaxCol(long value) {
			this.maxCol = value;
		}
		
		private long maxRow;
		
		public long getMaxRow() {
			return maxRow;
		}
		
		public void setMaxRow(long value) {
			this.maxRow = value;
		}
		
	}
	
	public static class StartPos {
		private boolean setZero;
		
		public boolean getSetZero() {
			return setZero;
		}
		
		public void setSetZero(boolean value) {
			this.setZero = value;
		}
		
		private double zeroX;
		
		public double getZeroX() {
			return zeroX;
		}
		
		public void setZeroX(double value) {
			this.zeroX = value;
		}
		
		private double zeroY;
		
		public double getZeroY() {
			return zeroY;
		}
		
		public void setZeroY(double value) {
			this.zeroY = value;
		}
		
		private double zeroSouthDegree;
		
		public double getZeroSouthDegree() {
			return zeroSouthDegree;
		}
		
		public void setZeroSouthDegree(double value) {
			this.zeroSouthDegree = value;
		}
		
		private long laserDegOffset;
		
		public long getLaserDegOffset() {
			return laserDegOffset;
		}
		
		public void setLaserDegOffset(long value) {
			this.laserDegOffset = value;
		}
		
	}
	
	public static class Computer {
		private Statechart2 parent;
		
		public Computer(Statechart2 parent) {
			this.parent = parent;
		}
		private boolean m_press;
		
		
		public void raiseM_press() {
			parent.inEventQueue.add(() -> {
				m_press = true;
			});
			parent.runCycle();
		}
		
		private boolean w_press;
		
		
		public void raiseW_press() {
			parent.inEventQueue.add(() -> {
				w_press = true;
			});
			parent.runCycle();
		}
		
		private boolean a_press;
		
		
		public void raiseA_press() {
			parent.inEventQueue.add(() -> {
				a_press = true;
			});
			parent.runCycle();
		}
		
		private boolean s_press;
		
		
		public void raiseS_press() {
			parent.inEventQueue.add(() -> {
				s_press = true;
			});
			parent.runCycle();
		}
		
		private boolean d_press;
		
		
		public void raiseD_press() {
			parent.inEventQueue.add(() -> {
				d_press = true;
			});
			parent.runCycle();
		}
		
		private boolean x_press;
		
		
		public void raiseX_press() {
			parent.inEventQueue.add(() -> {
				x_press = true;
			});
			parent.runCycle();
		}
		
	}
	
	public static class Imu {
		private double pitch;
		
		public double getPitch() {
			return pitch;
		}
		
		public void setPitch(double value) {
			this.pitch = value;
		}
		
		private double roll;
		
		public double getRoll() {
			return roll;
		}
		
		public void setRoll(double value) {
			this.roll = value;
		}
		
		private double yaw;
		
		public double getYaw() {
			return yaw;
		}
		
		public void setYaw(double value) {
			this.yaw = value;
		}
		
	}
	
	public static class Odom {
		private double x;
		
		public double getX() {
			return x;
		}
		
		public void setX(double value) {
			this.x = value;
		}
		
		private double y;
		
		public double getY() {
			return y;
		}
		
		public void setY(double value) {
			this.y = value;
		}
		
		private double z;
		
		public double getZ() {
			return z;
		}
		
		public void setZ(double value) {
			this.z = value;
		}
		
	}
	
	public static class LaserDistance {
		private double d0;
		
		public double getD0() {
			return d0;
		}
		
		public void setD0(double value) {
			this.d0 = value;
		}
		
		private double d90;
		
		public double getD90() {
			return d90;
		}
		
		public void setD90(double value) {
			this.d90 = value;
		}
		
		private double d180;
		
		public double getD180() {
			return d180;
		}
		
		public void setD180(double value) {
			this.d180 = value;
		}
		
		private double dm90;
		
		public double getDm90() {
			return dm90;
		}
		
		public void setDm90(double value) {
			this.dm90 = value;
		}
		
		private double dMin;
		
		public double getDMin() {
			return dMin;
		}
		
		public void setDMin(double value) {
			this.dMin = value;
		}
		
		private long minDeg;
		
		public long getMinDeg() {
			return minDeg;
		}
		
		public void setMinDeg(long value) {
			this.minDeg = value;
		}
		
		private double dMax;
		
		public double getDMax() {
			return dMax;
		}
		
		public void setDMax(double value) {
			this.dMax = value;
		}
		
		private long maxDeg;
		
		public long getMaxDeg() {
			return maxDeg;
		}
		
		public void setMaxDeg(long value) {
			this.maxDeg = value;
		}
		
		private double dMean;
		
		public double getDMean() {
			return dMean;
		}
		
		public void setDMean(double value) {
			this.dMean = value;
		}
		
		private double dFrontMin;
		
		public double getDFrontMin() {
			return dFrontMin;
		}
		
		public void setDFrontMin(double value) {
			this.dFrontMin = value;
		}
		
		private long minDegF;
		
		public long getMinDegF() {
			return minDegF;
		}
		
		public void setMinDegF(long value) {
			this.minDegF = value;
		}
		
		private double dFrontMax;
		
		public double getDFrontMax() {
			return dFrontMax;
		}
		
		public void setDFrontMax(double value) {
			this.dFrontMax = value;
		}
		
		private long maxDegF;
		
		public long getMaxDegF() {
			return maxDegF;
		}
		
		public void setMaxDegF(long value) {
			this.maxDegF = value;
		}
		
		private double dFrontMean;
		
		public double getDFrontMean() {
			return dFrontMean;
		}
		
		public void setDFrontMean(double value) {
			this.dFrontMean = value;
		}
		
		private double dRightMin;
		
		public double getDRightMin() {
			return dRightMin;
		}
		
		public void setDRightMin(double value) {
			this.dRightMin = value;
		}
		
		private long minDegR;
		
		public long getMinDegR() {
			return minDegR;
		}
		
		public void setMinDegR(long value) {
			this.minDegR = value;
		}
		
		private double dRightMax;
		
		public double getDRightMax() {
			return dRightMax;
		}
		
		public void setDRightMax(double value) {
			this.dRightMax = value;
		}
		
		private long maxDegR;
		
		public long getMaxDegR() {
			return maxDegR;
		}
		
		public void setMaxDegR(long value) {
			this.maxDegR = value;
		}
		
		private double dRightMean;
		
		public double getDRightMean() {
			return dRightMean;
		}
		
		public void setDRightMean(double value) {
			this.dRightMean = value;
		}
		
		private double dBackMin;
		
		public double getDBackMin() {
			return dBackMin;
		}
		
		public void setDBackMin(double value) {
			this.dBackMin = value;
		}
		
		private long minDegB;
		
		public long getMinDegB() {
			return minDegB;
		}
		
		public void setMinDegB(long value) {
			this.minDegB = value;
		}
		
		private double dBackMax;
		
		public double getDBackMax() {
			return dBackMax;
		}
		
		public void setDBackMax(double value) {
			this.dBackMax = value;
		}
		
		private long maxDegB;
		
		public long getMaxDegB() {
			return maxDegB;
		}
		
		public void setMaxDegB(long value) {
			this.maxDegB = value;
		}
		
		private double dBackMean;
		
		public double getDBackMean() {
			return dBackMean;
		}
		
		public void setDBackMean(double value) {
			this.dBackMean = value;
		}
		
		private double dLeftMin;
		
		public double getDLeftMin() {
			return dLeftMin;
		}
		
		public void setDLeftMin(double value) {
			this.dLeftMin = value;
		}
		
		private long minDegL;
		
		public long getMinDegL() {
			return minDegL;
		}
		
		public void setMinDegL(long value) {
			this.minDegL = value;
		}
		
		private double dLeftMax;
		
		public double getDLeftMax() {
			return dLeftMax;
		}
		
		public void setDLeftMax(double value) {
			this.dLeftMax = value;
		}
		
		private long maxDegL;
		
		public long getMaxDegL() {
			return maxDegL;
		}
		
		public void setMaxDegL(long value) {
			this.maxDegL = value;
		}
		
		private double dLeftMean;
		
		public double getDLeftMean() {
			return dLeftMean;
		}
		
		public void setDLeftMean(double value) {
			this.dLeftMean = value;
		}
		
	}
	
	public static class LaserIntensity {
		private double i0;
		
		public double getI0() {
			return i0;
		}
		
		public void setI0(double value) {
			this.i0 = value;
		}
		
		private double i90;
		
		public double getI90() {
			return i90;
		}
		
		public void setI90(double value) {
			this.i90 = value;
		}
		
		private double i180;
		
		public double getI180() {
			return i180;
		}
		
		public void setI180(double value) {
			this.i180 = value;
		}
		
		private double im90;
		
		public double getIm90() {
			return im90;
		}
		
		public void setIm90(double value) {
			this.im90 = value;
		}
		
		private double iFrontMin;
		
		public double getIFrontMin() {
			return iFrontMin;
		}
		
		public void setIFrontMin(double value) {
			this.iFrontMin = value;
		}
		
		private double iFrontMax;
		
		public double getIFrontMax() {
			return iFrontMax;
		}
		
		public void setIFrontMax(double value) {
			this.iFrontMax = value;
		}
		
		private double iFrontMean;
		
		public double getIFrontMean() {
			return iFrontMean;
		}
		
		public void setIFrontMean(double value) {
			this.iFrontMean = value;
		}
		
		private double iRightMin;
		
		public double getIRightMin() {
			return iRightMin;
		}
		
		public void setIRightMin(double value) {
			this.iRightMin = value;
		}
		
		private double iRightMax;
		
		public double getIRightMax() {
			return iRightMax;
		}
		
		public void setIRightMax(double value) {
			this.iRightMax = value;
		}
		
		private double iRightMean;
		
		public double getIRightMean() {
			return iRightMean;
		}
		
		public void setIRightMean(double value) {
			this.iRightMean = value;
		}
		
		private double iBackMin;
		
		public double getIBackMin() {
			return iBackMin;
		}
		
		public void setIBackMin(double value) {
			this.iBackMin = value;
		}
		
		private double iBackMax;
		
		public double getIBackMax() {
			return iBackMax;
		}
		
		public void setIBackMax(double value) {
			this.iBackMax = value;
		}
		
		private double iBackMean;
		
		public double getIBackMean() {
			return iBackMean;
		}
		
		public void setIBackMean(double value) {
			this.iBackMean = value;
		}
		
		private double iLeftMin;
		
		public double getILeftMin() {
			return iLeftMin;
		}
		
		public void setILeftMin(double value) {
			this.iLeftMin = value;
		}
		
		private double iLeftMax;
		
		public double getILeftMax() {
			return iLeftMax;
		}
		
		public void setILeftMax(double value) {
			this.iLeftMax = value;
		}
		
		private double iLeftMean;
		
		public double getILeftMean() {
			return iLeftMean;
		}
		
		public void setILeftMean(double value) {
			this.iLeftMean = value;
		}
		
	}
	
	protected UserVar userVar;
	
	protected BaseValues baseValues;
	
	protected Output output;
	
	protected Grid grid;
	
	protected StartPos startPos;
	
	protected Computer computer;
	
	protected Imu imu;
	
	protected Odom odom;
	
	protected LaserDistance laserDistance;
	
	protected LaserIntensity laserIntensity;
	
	public enum State {
		S_MANUAL_MODE,
		S_MANUAL_MODE_MANUAL_MODE_STOPPED,
		S_MANUAL_MODE_MANUAL_MODE_MOVING,
		S_MANUAL_MODE_MANUAL_MODE_ACCELERATE,
		S_MANUAL_MODE_MANUAL_MODE_DEACCELERATE,
		S_MANUAL_MODE_MANUAL_MODE_TURNING_RIGHT,
		S_MANUAL_MODE_MANUAL_MODE_TURNING_LEFT,
		S_AUTONOMOUS_MODE___LOGGING,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CREEP,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_SET_ZERO,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_POSITION_IN_THE_MIDDLE_,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_READY_,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_ROTATION,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_TO_WALL,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_CLOSER_TO_WALL,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_BACK_,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_AWAY_FROM_WALL,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_VERTICAL,
		S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_PREPARE_CALIBRATION,
		S_AUTONOMOUS_MODE___LOGGING_S_PRE_EXPLORATION,
		S_AUTONOMOUS_MODE___LOGGING_S_AWAIT,
		S_AUTONOMOUS_MODE___LOGGING_S_CELLFORWARD,
		S_AUTONOMOUS_MODE___LOGGING_S_UPDATECOORDS,
		S_AUTONOMOUS_MODE___LOGGING_S_WALLAHEAD,
		S_AUTONOMOUS_MODE___LOGGING_S_LEFTCLEAR,
		S_AUTONOMOUS_MODE___LOGGING_S_ADJUSTROTATION,
		S_AUTONOMOUS_MODE___LOGGING_S_WEST,
		S_AUTONOMOUS_MODE___LOGGING_S_EAST,
		S_AUTONOMOUS_MODE___LOGGING_S_SOUTH,
		S_AUTONOMOUS_MODE___LOGGING_S_NORTH,
		S_AUTONOMOUS_MODE___LOGGING_S_FINISH,
		S_AUTONOMOUS_MODE___LOGGING_S__FINAL_,
		S_AUTONOMOUS_MODE___LOGGING_S_CHECKIFFINISHED,
		S_AUTONOMOUS_MODE___LOGGING_S_SPECIFIC_LOCATION,
		S_AUTONOMOUS_MODE___LOGGING_S_GOFRONT,
		S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_CALIBRATING,
		S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_LEFT,
		S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_RIGHT,
		S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_STOP_CALIBRATION,
		S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK,
		S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_NORTH,
		S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_WEST,
		S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_SOUTH,
		S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_EAST,
		S_PREPARE,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[4];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean completed;
	
	protected boolean getCompleted() {
		return completed;
	}
	
	protected void setCompleted(boolean value) {
		this.completed = value;
	}
	private boolean doCompletion;
	
	protected boolean getDoCompletion() {
		return doCompletion;
	}
	
	protected void setDoCompletion(boolean value) {
		this.doCompletion = value;
	}
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Statechart2() {
		userVar = new UserVar();
		baseValues = new BaseValues();
		output = new Output();
		grid = new Grid();
		startPos = new StartPos();
		computer = new Computer(this);
		imu = new Imu();
		odom = new Odom();
		laserDistance = new LaserDistance();
		laserIntensity = new LaserIntensity();
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Statechart2 */
		userVar.setLimitDegreeHigh(0.0);
		userVar.setLimitDegreeLow(0.0);
		userVar.setBaseSpeed(0.05);
		userVar.setBaseRotation(0.2);
		userVar.setTurnType(0l);
		userVar.setLimitType(0l);
		userVar.setSpecificRow(3l);
		userVar.setSpecificColumn(1l);
		userVar.setIsInSpecificExploration(false);
		userVar.setXRow(0l);
		userVar.setYCol(0l);
		userVar.setXAbs(0l);
		userVar.setYAbs(0l);
		userVar.setAbsDis(0l);
		userVar.setUserX(0l);
		userVar.setUserY(0l);
		userVar.setRowOrColChanged(false);
		userVar.setCalibrationIncrement(1l);
		userVar.setStartprocedure(true);
		userVar.setStraightOffset(0.0);
		userVar.setAligned(false);
		userVar.setOrientation(0l);
		userVar.setCurrentOrientation(0l);
		userVar.setAveOff(0l);
		userVar.setOffBack(0l);
		userVar.setStraighten(false);
		userVar.setTurned(false);
		baseValues.setMaxSpeed(0.5);
		baseValues.setMaxRotation(2.84);
		baseValues.setDegreesFront(10l);
		baseValues.setDegreesRight(10l);
		baseValues.setDegreesBack(10l);
		baseValues.setDegreesLeft(10l);
		output.setSpeed(0.0);
		output.setRotation(0.0);
		output.setObstacles(0l);
		output.setGems(0l);
		output.setFinish(0l);
		grid.setUpdate(false);
		grid.setReceive(false);
		grid.setColumn(0l);
		grid.setRow(0l);
		grid.setOrientation(0l);
		grid.setVisited(false);
		grid.setWallFront(0l);
		grid.setWallRight(0l);
		grid.setWallBack(0l);
		grid.setWallLeft(0l);
		grid.setGridSize(0.48);
		grid.setMaxCol(3l);
		grid.setMaxRow(3l);
		startPos.setSetZero(false);
		startPos.setZeroX(0.0);
		startPos.setZeroY(0.0);
		startPos.setZeroSouthDegree(0.0);
		startPos.setLaserDegOffset(0l);
		imu.setPitch(0.0);
		imu.setRoll(0.0);
		imu.setYaw(0.0);
		odom.setX(0.0);
		odom.setY(0.0);
		odom.setZ(0.0);
		laserDistance.setD0(0.0);
		laserDistance.setD90(0.0);
		laserDistance.setD180(0.0);
		laserDistance.setDm90(0.0);
		laserDistance.setDMin(0.0);
		laserDistance.setMinDeg(0l);
		laserDistance.setDMax(0.0);
		laserDistance.setMaxDeg(0l);
		laserDistance.setDMean(0.0);
		laserDistance.setDFrontMin(0.0);
		laserDistance.setMinDegF(0l);
		laserDistance.setDFrontMax(0.0);
		laserDistance.setMaxDegF(0l);
		laserDistance.setDFrontMean(0.0);
		laserDistance.setDRightMin(0.0);
		laserDistance.setMinDegR(0l);
		laserDistance.setDRightMax(0.0);
		laserDistance.setMaxDegR(0l);
		laserDistance.setDRightMean(0.0);
		laserDistance.setDBackMin(0.0);
		laserDistance.setMinDegB(0l);
		laserDistance.setDBackMax(0.0);
		laserDistance.setMaxDegB(0l);
		laserDistance.setDBackMean(0.0);
		laserDistance.setDLeftMin(0.0);
		laserDistance.setMinDegL(0l);
		laserDistance.setDLeftMax(0.0);
		laserDistance.setMaxDegL(0l);
		laserDistance.setDLeftMean(0.0);
		laserIntensity.setI0(0.0);
		laserIntensity.setI90(0.0);
		laserIntensity.setI180(0.0);
		laserIntensity.setIm90(0.0);
		laserIntensity.setIFrontMin(0.0);
		laserIntensity.setIFrontMax(0.0);
		laserIntensity.setIFrontMean(0.0);
		laserIntensity.setIRightMin(0.0);
		laserIntensity.setIRightMax(0.0);
		laserIntensity.setIRightMean(0.0);
		laserIntensity.setIBackMin(0.0);
		laserIntensity.setIBackMax(0.0);
		laserIntensity.setIBackMean(0.0);
		laserIntensity.setILeftMin(0.0);
		laserIntensity.setILeftMax(0.0);
		laserIntensity.setILeftMean(0.0);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Statechart2 */
		enterSequence_s_default();
		doCompletion = false;
		do { 
			if (getCompleted()) {
				doCompletion = true;
			}
			completed = false;
			microStep();
			clearInEvents();
			doCompletion = false;
		} while (getCompleted());
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Statechart2 */
		exitSequence_s();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		computer.m_press = false;
		computer.w_press = false;
		computer.a_press = false;
		computer.s_press = false;
		computer.d_press = false;
		computer.x_press = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case S_MANUAL_MODE_MANUAL_MODE_STOPPED:
			transitioned = s_Manual_Mode_Manual_Mode_stopped_react(transitioned);
			break;
		case S_MANUAL_MODE_MANUAL_MODE_MOVING:
			transitioned = s_Manual_Mode_Manual_Mode_moving_react(transitioned);
			break;
		case S_MANUAL_MODE_MANUAL_MODE_ACCELERATE:
			transitioned = s_Manual_Mode_Manual_Mode_accelerate_react(transitioned);
			break;
		case S_MANUAL_MODE_MANUAL_MODE_DEACCELERATE:
			transitioned = s_Manual_Mode_Manual_Mode_deaccelerate_react(transitioned);
			break;
		case S_MANUAL_MODE_MANUAL_MODE_TURNING_RIGHT:
			transitioned = s_Manual_Mode_Manual_Mode_turning_right_react(transitioned);
			break;
		case S_MANUAL_MODE_MANUAL_MODE_TURNING_LEFT:
			transitioned = s_Manual_Mode_Manual_Mode_turning_left_react(transitioned);
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CREEP:
			transitioned = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep_react(transitioned);
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_SET_ZERO:
			transitioned = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Set_Zero_react(transitioned);
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_POSITION_IN_THE_MIDDLE_:
			transitioned = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Position_in_the_middle__react(transitioned);
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_READY_:
			transitioned = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Ready__react(transitioned);
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_ROTATION:
			transitioned = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation_react(transitioned);
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_TO_WALL:
			transitioned = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall_react(transitioned);
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_CLOSER_TO_WALL:
			transitioned = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall_react(transitioned);
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_BACK_:
			transitioned = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back__react(transitioned);
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_AWAY_FROM_WALL:
			transitioned = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall_react(transitioned);
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_VERTICAL:
			transitioned = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical_react(transitioned);
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_PREPARE_CALIBRATION:
			transitioned = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_prepare_calibration_react(transitioned);
			break;
		case S_PREPARE:
			transitioned = s_prepare_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case S_AUTONOMOUS_MODE___LOGGING_S_PRE_EXPLORATION:
				transitioned = s_Autonomous_Mode___Logging_s_pre_exploration_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_AWAIT:
				transitioned = s_Autonomous_Mode___Logging_s_await_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_CELLFORWARD:
				transitioned = s_Autonomous_Mode___Logging_s_cellForward_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_UPDATECOORDS:
				transitioned = s_Autonomous_Mode___Logging_s_updateCoords_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_WALLAHEAD:
				transitioned = s_Autonomous_Mode___Logging_s_wallAhead_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_LEFTCLEAR:
				transitioned = s_Autonomous_Mode___Logging_s_leftClear_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_ADJUSTROTATION:
				transitioned = s_Autonomous_Mode___Logging_s_adjustRotation_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_WEST:
				transitioned = s_Autonomous_Mode___Logging_s_West_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_EAST:
				transitioned = s_Autonomous_Mode___Logging_s_East_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_SOUTH:
				transitioned = s_Autonomous_Mode___Logging_s_South_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_NORTH:
				transitioned = s_Autonomous_Mode___Logging_s_North_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_FINISH:
				transitioned = s_Autonomous_Mode___Logging_s_finish_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S__FINAL_:
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_CHECKIFFINISHED:
				transitioned = s_Autonomous_Mode___Logging_s_CheckIfFinished_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_SPECIFIC_LOCATION:
				transitioned = s_Autonomous_Mode___Logging_s_Specific_Location_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_S_GOFRONT:
				transitioned = s_Autonomous_Mode___Logging_s_GoFront_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_CALIBRATING:
				transitioned = s_Autonomous_Mode___Logging_RotationCalibration_calibrating_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_LEFT:
				transitioned = s_Autonomous_Mode___Logging_RotationCalibration_rotate_left_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_RIGHT:
				transitioned = s_Autonomous_Mode___Logging_RotationCalibration_rotate_right_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_STOP_CALIBRATION:
				transitioned = s_Autonomous_Mode___Logging_RotationCalibration_Stop_Calibration_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK:
				s_Autonomous_Mode___Logging_OrientationCheck_Check_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_NORTH:
				s_Autonomous_Mode___Logging_OrientationCheck_North_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_WEST:
				s_Autonomous_Mode___Logging_OrientationCheck_West_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_SOUTH:
				s_Autonomous_Mode___Logging_OrientationCheck_South_react(transitioned);
				break;
			case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_EAST:
				s_Autonomous_Mode___Logging_OrientationCheck_East_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			doCompletion = false;
			do { 
				if (getCompleted()) {
					doCompletion = true;
				}
				completed = false;
				microStep();
				clearInEvents();
				doCompletion = false;
			} while (getCompleted());
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case S_MANUAL_MODE:
			return stateVector[0].ordinal() >= State.
					S_MANUAL_MODE.ordinal()&& stateVector[0].ordinal() <= State.S_MANUAL_MODE_MANUAL_MODE_TURNING_LEFT.ordinal();
		case S_MANUAL_MODE_MANUAL_MODE_STOPPED:
			return stateVector[0] == State.S_MANUAL_MODE_MANUAL_MODE_STOPPED;
		case S_MANUAL_MODE_MANUAL_MODE_MOVING:
			return stateVector[0] == State.S_MANUAL_MODE_MANUAL_MODE_MOVING;
		case S_MANUAL_MODE_MANUAL_MODE_ACCELERATE:
			return stateVector[0] == State.S_MANUAL_MODE_MANUAL_MODE_ACCELERATE;
		case S_MANUAL_MODE_MANUAL_MODE_DEACCELERATE:
			return stateVector[0] == State.S_MANUAL_MODE_MANUAL_MODE_DEACCELERATE;
		case S_MANUAL_MODE_MANUAL_MODE_TURNING_RIGHT:
			return stateVector[0] == State.S_MANUAL_MODE_MANUAL_MODE_TURNING_RIGHT;
		case S_MANUAL_MODE_MANUAL_MODE_TURNING_LEFT:
			return stateVector[0] == State.S_MANUAL_MODE_MANUAL_MODE_TURNING_LEFT;
		case S_AUTONOMOUS_MODE___LOGGING:
			return stateVector[0].ordinal() >= State.
					S_AUTONOMOUS_MODE___LOGGING.ordinal()&& stateVector[0].ordinal() <= State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_EAST.ordinal();
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION:
			return stateVector[0].ordinal() >= State.
					S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION.ordinal()&& stateVector[0].ordinal() <= State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_VERTICAL.ordinal();
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CREEP:
			return stateVector[0] == State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CREEP;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_SET_ZERO:
			return stateVector[0] == State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_SET_ZERO;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_POSITION_IN_THE_MIDDLE_:
			return stateVector[0] == State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_POSITION_IN_THE_MIDDLE_;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_READY_:
			return stateVector[0] == State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_READY_;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_ROTATION:
			return stateVector[0] == State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_ROTATION;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_TO_WALL:
			return stateVector[0] == State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_TO_WALL;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_CLOSER_TO_WALL:
			return stateVector[0] == State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_CLOSER_TO_WALL;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_BACK_:
			return stateVector[0] == State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_BACK_;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_AWAY_FROM_WALL:
			return stateVector[0] == State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_AWAY_FROM_WALL;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_VERTICAL:
			return stateVector[0] == State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_VERTICAL;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_PREPARE_CALIBRATION:
			return stateVector[0] == State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_PREPARE_CALIBRATION;
		case S_AUTONOMOUS_MODE___LOGGING_S_PRE_EXPLORATION:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_PRE_EXPLORATION;
		case S_AUTONOMOUS_MODE___LOGGING_S_AWAIT:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_AWAIT;
		case S_AUTONOMOUS_MODE___LOGGING_S_CELLFORWARD:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_CELLFORWARD;
		case S_AUTONOMOUS_MODE___LOGGING_S_UPDATECOORDS:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_UPDATECOORDS;
		case S_AUTONOMOUS_MODE___LOGGING_S_WALLAHEAD:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_WALLAHEAD;
		case S_AUTONOMOUS_MODE___LOGGING_S_LEFTCLEAR:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_LEFTCLEAR;
		case S_AUTONOMOUS_MODE___LOGGING_S_ADJUSTROTATION:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_ADJUSTROTATION;
		case S_AUTONOMOUS_MODE___LOGGING_S_WEST:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_WEST;
		case S_AUTONOMOUS_MODE___LOGGING_S_EAST:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_EAST;
		case S_AUTONOMOUS_MODE___LOGGING_S_SOUTH:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_SOUTH;
		case S_AUTONOMOUS_MODE___LOGGING_S_NORTH:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_NORTH;
		case S_AUTONOMOUS_MODE___LOGGING_S_FINISH:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_FINISH;
		case S_AUTONOMOUS_MODE___LOGGING_S__FINAL_:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S__FINAL_;
		case S_AUTONOMOUS_MODE___LOGGING_S_CHECKIFFINISHED:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_CHECKIFFINISHED;
		case S_AUTONOMOUS_MODE___LOGGING_S_SPECIFIC_LOCATION:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_SPECIFIC_LOCATION;
		case S_AUTONOMOUS_MODE___LOGGING_S_GOFRONT:
			return stateVector[1] == State.S_AUTONOMOUS_MODE___LOGGING_S_GOFRONT;
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_CALIBRATING:
			return stateVector[2] == State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_CALIBRATING;
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_LEFT:
			return stateVector[2] == State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_LEFT;
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_RIGHT:
			return stateVector[2] == State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_RIGHT;
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_STOP_CALIBRATION:
			return stateVector[2] == State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_STOP_CALIBRATION;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK:
			return stateVector[3] == State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_NORTH:
			return stateVector[3] == State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_NORTH;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_WEST:
			return stateVector[3] == State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_WEST;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_SOUTH:
			return stateVector[3] == State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_SOUTH;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_EAST:
			return stateVector[3] == State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_EAST;
		case S_PREPARE:
			return stateVector[0] == State.S_PREPARE;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public UserVar userVar() {
		return userVar;
	}
	
	public BaseValues baseValues() {
		return baseValues;
	}
	
	public Output output() {
		return output;
	}
	
	public Grid grid() {
		return grid;
	}
	
	public StartPos startPos() {
		return startPos;
	}
	
	public Computer computer() {
		return computer;
	}
	
	public Imu imu() {
		return imu;
	}
	
	public Odom odom() {
		return odom;
	}
	
	public LaserDistance laserDistance() {
		return laserDistance;
	}
	
	public LaserIntensity laserIntensity() {
		return laserIntensity;
	}
	
	
	public interface OperationCallback {
	
		public void debug();
		
		public void debug_odom(double vX, double vY);
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	/* Entry action for state 'stopped'. */
	private void entryAction_s_Manual_Mode_Manual_Mode_stopped() {
		/* Entry action for state 'stopped'. */
		output.setSpeed(0.0);
		output.setRotation(0.0);
	}
	
	private void entryAction_s_Manual_Mode_Manual_Mode_accelerate() {
		/* Entry action for state 'accelerate'. */
		output.setSpeed(output.getSpeed() + 0.1);
		completed = true;
	}
	
	private void entryAction_s_Manual_Mode_Manual_Mode_deaccelerate() {
		/* Entry action for state 'deaccelerate'. */
		output.setSpeed(output.getSpeed() - 0.1);
		completed = true;
	}
	
	private void entryAction_s_Manual_Mode_Manual_Mode_turning_right() {
		/* Entry action for state 'turning right'. */
		output.setRotation(output.getRotation() - 0.1);
		completed = true;
	}
	
	private void entryAction_s_Manual_Mode_Manual_Mode_turning_left() {
		/* Entry action for state 'turning left'. */
		output.setRotation(output.getRotation() + 0.1);
		completed = true;
	}
	
	/* Entry action for state 'Creep'. */
	private void entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep() {
		/* Entry action for state 'Creep'. */
		output.setSpeed(0.025);
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Set_Zero() {
		/* Entry action for state 'Set Zero'. */
		startPos.setSetZero(true);
		completed = true;
	}
	
	/* Entry action for state 'Position in the middle '. */
	private void entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Position_in_the_middle_() {
		/* Entry action for state 'Position in the middle '. */
		output.setSpeed(0.025);
	}
	
	/* Entry action for state 'Ready!'. */
	private void entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Ready_() {
		/* Entry action for state 'Ready!'. */
		userVar.setStartprocedure(false);
		userVar.setUserX(odom.x);
		userVar.setUserY(odom.y);
		grid.setColumn(0l);
		grid.setRow(0l);
	}
	
	/* Entry action for state 'Adjust rotation'. */
	private void entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation() {
		/* Entry action for state 'Adjust rotation'. */
		timerService.setTimer(this, 0, (5l * 1000l), false);
		userVar.setStraighten(true);
	}
	
	/* Entry action for state 'Centering: rotate to wall'. */
	private void entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall() {
		/* Entry action for state 'Centering: rotate to wall'. */
		output.setRotation(0.5);
		userVar.setCurrentOrientation(userVar.orientation);
	}
	
	/* Entry action for state 'Centering: move closer to wall'. */
	private void entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall() {
		/* Entry action for state 'Centering: move closer to wall'. */
		output.setSpeed(0.025);
	}
	
	/* Entry action for state 'Centering: rotate back '. */
	private void entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back_() {
		/* Entry action for state 'Centering: rotate back '. */
		output.setRotation(-(0.5));
		userVar.setCurrentOrientation(userVar.orientation);
	}
	
	/* Entry action for state 'Centering: move away from wall'. */
	private void entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall() {
		/* Entry action for state 'Centering: move away from wall'. */
		output.setSpeed(-(0.025));
	}
	
	/* Entry action for state 'Adjust vertical'. */
	private void entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical() {
		/* Entry action for state 'Adjust vertical'. */
		output.setSpeed(-(0.025));
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_s_await() {
		/* Entry action for state 'await'. */
		output.setSpeed(0.0);
		output.setRotation(0.0);
		completed = true;
	}
	
	/* Entry action for state 'cellForward'. */
	private void entryAction_s_Autonomous_Mode___Logging_s_cellForward() {
		/* Entry action for state 'cellForward'. */
		output.setSpeed(0.05);
	}
	
	/* Entry action for state 'updateCoords'. */
	private void entryAction_s_Autonomous_Mode___Logging_s_updateCoords() {
		/* Entry action for state 'updateCoords'. */
		userVar.setUserX(odom.x);
		userVar.setUserY(odom.y);
	}
	
	/* Entry action for state 'wallAhead'. */
	private void entryAction_s_Autonomous_Mode___Logging_s_wallAhead() {
		/* Entry action for state 'wallAhead'. */
		userVar.setCurrentOrientation(userVar.orientation);
		output.setRotation(-(0.5));
	}
	
	/* Entry action for state 'leftClear'. */
	private void entryAction_s_Autonomous_Mode___Logging_s_leftClear() {
		/* Entry action for state 'leftClear'. */
		userVar.setCurrentOrientation(userVar.orientation);
		output.setRotation(0.5);
	}
	
	/* Entry action for state 'adjustRotation'. */
	private void entryAction_s_Autonomous_Mode___Logging_s_adjustRotation() {
		/* Entry action for state 'adjustRotation'. */
		timerService.setTimer(this, 1, (2l * 1000l), false);
		userVar.setStraighten(true);
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_s_West() {
		/* Entry action for state 'West'. */
		grid.setWallFront(laserDistance.d0<grid.gridSize ? 1l : 0l);
		grid.setWallRight(laserDistance.d90<grid.gridSize ? 1l : 0l);
		grid.setWallBack(laserDistance.d180<grid.gridSize ? 1l : 0l);
		grid.setWallLeft(laserDistance.dm90<grid.gridSize ? 1l : 0l);
		grid.setVisited(true);
		grid.setUpdate(true);
		grid.setColumn(grid.getColumn() - 1l);
		completed = true;
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_s_East() {
		/* Entry action for state 'East'. */
		grid.setWallFront(laserDistance.d0<grid.gridSize ? 1l : 0l);
		grid.setWallRight(laserDistance.d90<grid.gridSize ? 1l : 0l);
		grid.setWallBack(laserDistance.d180<grid.gridSize ? 1l : 0l);
		grid.setWallLeft(laserDistance.dm90<grid.gridSize ? 1l : 0l);
		grid.setVisited(true);
		grid.setUpdate(true);
		grid.setColumn(grid.getColumn() + 1l);
		completed = true;
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_s_South() {
		/* Entry action for state 'South'. */
		grid.setWallFront(laserDistance.d180<grid.gridSize ? 1l : 0l);
		grid.setWallRight(laserDistance.dm90<grid.gridSize ? 1l : 0l);
		grid.setWallBack(laserDistance.d0<grid.gridSize ? 1l : 0l);
		grid.setWallLeft(laserDistance.d90<grid.gridSize ? 1l : 0l);
		grid.setVisited(true);
		grid.setUpdate(true);
		grid.setRow(grid.getRow() - 1l);
		completed = true;
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_s_North() {
		/* Entry action for state 'North'. */
		grid.setWallFront(laserDistance.d180<grid.gridSize ? 1l : 0l);
		grid.setWallRight(laserDistance.dm90<grid.gridSize ? 1l : 0l);
		grid.setWallBack(laserDistance.d0<grid.gridSize ? 1l : 0l);
		grid.setWallLeft(laserDistance.d90<grid.gridSize ? 1l : 0l);
		grid.setVisited(true);
		grid.setUpdate(true);
		grid.setRow(grid.getRow() + 1l);
		completed = true;
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_s_finish() {
		/* Entry action for state 'finish'. */
		output.setFinish(1l);
		completed = true;
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_s_CheckIfFinished() {
		completed = true;
	}
	
	/* Entry action for state 'Specific Location'. */
	private void entryAction_s_Autonomous_Mode___Logging_s_Specific_Location() {
		/* Entry action for state 'Specific Location'. */
		userVar.setIsInSpecificExploration(true);
		output.setRotation(-(0.5));
	}
	
	/* Entry action for state 'GoFront'. */
	private void entryAction_s_Autonomous_Mode___Logging_s_GoFront() {
		/* Entry action for state 'GoFront'. */
		output.setSpeed(0.05);
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_RotationCalibration_rotate_left() {
		/* Entry action for state 'rotate left'. */
		output.setRotation((0.05 / ((userVar.calibrationIncrement / 8l))));
		completed = true;
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_RotationCalibration_rotate_right() {
		/* Entry action for state 'rotate right'. */
		output.setRotation((-(0.05) / ((userVar.calibrationIncrement / 8l))));
		completed = true;
	}
	
	/* Entry action for state 'Stop Calibration'. */
	private void entryAction_s_Autonomous_Mode___Logging_RotationCalibration_Stop_Calibration() {
		/* Entry action for state 'Stop Calibration'. */
		output.setRotation(0.0);
		userVar.setCalibrationIncrement(1l);
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_OrientationCheck_North() {
		/* Entry action for state 'North'. */
		userVar.setOrientation(0l);
		grid.setOrientation(0l);
		completed = true;
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_OrientationCheck_West() {
		/* Entry action for state 'West'. */
		userVar.setOrientation(3l);
		grid.setOrientation(3l);
		completed = true;
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_OrientationCheck_South() {
		/* Entry action for state 'South'. */
		userVar.setOrientation(2l);
		grid.setOrientation(2l);
		completed = true;
	}
	
	private void entryAction_s_Autonomous_Mode___Logging_OrientationCheck_East() {
		/* Entry action for state 'East'. */
		userVar.setOrientation(1l);
		grid.setOrientation(1l);
		completed = true;
	}
	
	/* Entry action for state 'prepare'. */
	private void entryAction_s_prepare() {
		/* Entry action for state 'prepare'. */
		timerService.setTimer(this, 2, (5l * 1000l), false);
	}
	
	/* Exit action for state 'Calibration'. */
	private void exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration() {
		/* Exit action for state 'Calibration'. */
		userVar.setStartprocedure(false);
	}
	
	/* Exit action for state 'Creep'. */
	private void exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep() {
		/* Exit action for state 'Creep'. */
		output.setSpeed(0.0);
	}
	
	/* Exit action for state 'Position in the middle '. */
	private void exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Position_in_the_middle_() {
		/* Exit action for state 'Position in the middle '. */
		output.setSpeed(0.0);
	}
	
	/* Exit action for state 'Adjust rotation'. */
	private void exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation() {
		/* Exit action for state 'Adjust rotation'. */
		timerService.unsetTimer(this, 0);
		userVar.setStraighten(false);
	}
	
	/* Exit action for state 'Centering: rotate to wall'. */
	private void exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall() {
		/* Exit action for state 'Centering: rotate to wall'. */
		output.setRotation(0.0);
	}
	
	/* Exit action for state 'Centering: move closer to wall'. */
	private void exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall() {
		/* Exit action for state 'Centering: move closer to wall'. */
		output.setSpeed(0.0);
	}
	
	/* Exit action for state 'Centering: rotate back '. */
	private void exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back_() {
		/* Exit action for state 'Centering: rotate back '. */
		output.setRotation(0.0);
	}
	
	/* Exit action for state 'Centering: move away from wall'. */
	private void exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall() {
		/* Exit action for state 'Centering: move away from wall'. */
		output.setSpeed(0.0);
	}
	
	/* Exit action for state 'Adjust vertical'. */
	private void exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical() {
		/* Exit action for state 'Adjust vertical'. */
		output.setSpeed(0.0);
	}
	
	/* Exit action for state 'cellForward'. */
	private void exitAction_s_Autonomous_Mode___Logging_s_cellForward() {
		/* Exit action for state 'cellForward'. */
		output.setSpeed(0.0);
		userVar.setTurned(false);
	}
	
	/* Exit action for state 'wallAhead'. */
	private void exitAction_s_Autonomous_Mode___Logging_s_wallAhead() {
		/* Exit action for state 'wallAhead'. */
		output.setRotation(0.0);
	}
	
	/* Exit action for state 'leftClear'. */
	private void exitAction_s_Autonomous_Mode___Logging_s_leftClear() {
		/* Exit action for state 'leftClear'. */
		userVar.setTurned(true);
		output.setRotation(0.0);
	}
	
	/* Exit action for state 'adjustRotation'. */
	private void exitAction_s_Autonomous_Mode___Logging_s_adjustRotation() {
		/* Exit action for state 'adjustRotation'. */
		timerService.unsetTimer(this, 1);
		userVar.setStraighten(false);
	}
	
	/* Exit action for state 'Specific Location'. */
	private void exitAction_s_Autonomous_Mode___Logging_s_Specific_Location() {
		/* Exit action for state 'Specific Location'. */
		output.setRotation(0.0);
		userVar.setTurned(true);
	}
	
	/* Exit action for state 'GoFront'. */
	private void exitAction_s_Autonomous_Mode___Logging_s_GoFront() {
		/* Exit action for state 'GoFront'. */
		output.setSpeed(0.0);
	}
	
	/* Exit action for state 'rotate left'. */
	private void exitAction_s_Autonomous_Mode___Logging_RotationCalibration_rotate_left() {
		/* Exit action for state 'rotate left'. */
		userVar.setCalibrationIncrement(userVar.getCalibrationIncrement() + 1l);
	}
	
	/* Exit action for state 'rotate right'. */
	private void exitAction_s_Autonomous_Mode___Logging_RotationCalibration_rotate_right() {
		/* Exit action for state 'rotate right'. */
		userVar.setCalibrationIncrement(userVar.getCalibrationIncrement() + 1l);
	}
	
	/* Exit action for state 'prepare'. */
	private void exitAction_s_prepare() {
		/* Exit action for state 'prepare'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* 'default' enter sequence for state Manual Mode */
	private void enterSequence_s_Manual_Mode_default() {
		/* 'default' enter sequence for state Manual Mode */
		enterSequence_s_Manual_Mode_Manual_Mode_default();
	}
	
	/* 'default' enter sequence for state stopped */
	private void enterSequence_s_Manual_Mode_Manual_Mode_stopped_default() {
		/* 'default' enter sequence for state stopped */
		entryAction_s_Manual_Mode_Manual_Mode_stopped();
		stateVector[0] = State.S_MANUAL_MODE_MANUAL_MODE_STOPPED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state accelerate */
	private void enterSequence_s_Manual_Mode_Manual_Mode_accelerate_default() {
		/* 'default' enter sequence for state accelerate */
		entryAction_s_Manual_Mode_Manual_Mode_accelerate();
		stateVector[0] = State.S_MANUAL_MODE_MANUAL_MODE_ACCELERATE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state deaccelerate */
	private void enterSequence_s_Manual_Mode_Manual_Mode_deaccelerate_default() {
		/* 'default' enter sequence for state deaccelerate */
		entryAction_s_Manual_Mode_Manual_Mode_deaccelerate();
		stateVector[0] = State.S_MANUAL_MODE_MANUAL_MODE_DEACCELERATE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state turning right */
	private void enterSequence_s_Manual_Mode_Manual_Mode_turning_right_default() {
		/* 'default' enter sequence for state turning right */
		entryAction_s_Manual_Mode_Manual_Mode_turning_right();
		stateVector[0] = State.S_MANUAL_MODE_MANUAL_MODE_TURNING_RIGHT;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state turning left */
	private void enterSequence_s_Manual_Mode_Manual_Mode_turning_left_default() {
		/* 'default' enter sequence for state turning left */
		entryAction_s_Manual_Mode_Manual_Mode_turning_left();
		stateVector[0] = State.S_MANUAL_MODE_MANUAL_MODE_TURNING_LEFT;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Autonomous Mode + Logging */
	private void enterSequence_s_Autonomous_Mode___Logging_default() {
		/* 'default' enter sequence for state Autonomous Mode + Logging */
		enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_default();
		enterSequence_s_Autonomous_Mode___Logging_s_default();
		enterSequence_s_Autonomous_Mode___Logging_RotationCalibration_default();
		enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_default();
	}
	
	/* 'default' enter sequence for state Calibration */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_default() {
		/* 'default' enter sequence for state Calibration */
		enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_default();
	}
	
	/* 'default' enter sequence for state Creep */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep_default() {
		/* 'default' enter sequence for state Creep */
		entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep();
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CREEP;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Set Zero */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Set_Zero_default() {
		/* 'default' enter sequence for state Set Zero */
		entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Set_Zero();
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_SET_ZERO;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Ready! */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Ready__default() {
		/* 'default' enter sequence for state Ready! */
		entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Ready_();
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_READY_;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Adjust rotation */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation_default() {
		/* 'default' enter sequence for state Adjust rotation */
		entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation();
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_ROTATION;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Centering: rotate to wall */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall_default() {
		/* 'default' enter sequence for state Centering: rotate to wall */
		entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall();
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_TO_WALL;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Centering: move closer to wall */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall_default() {
		/* 'default' enter sequence for state Centering: move closer to wall */
		entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall();
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_CLOSER_TO_WALL;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Centering: rotate back  */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back__default() {
		/* 'default' enter sequence for state Centering: rotate back  */
		entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back_();
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_BACK_;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Centering: move away from wall */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall_default() {
		/* 'default' enter sequence for state Centering: move away from wall */
		entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall();
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_AWAY_FROM_WALL;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Adjust vertical */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical_default() {
		/* 'default' enter sequence for state Adjust vertical */
		entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical();
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_VERTICAL;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state prepare calibration */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_prepare_calibration_default() {
		/* 'default' enter sequence for state prepare calibration */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_PREPARE_CALIBRATION;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state pre exploration */
	private void enterSequence_s_Autonomous_Mode___Logging_s_pre_exploration_default() {
		/* 'default' enter sequence for state pre exploration */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_PRE_EXPLORATION;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state await */
	private void enterSequence_s_Autonomous_Mode___Logging_s_await_default() {
		/* 'default' enter sequence for state await */
		entryAction_s_Autonomous_Mode___Logging_s_await();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_AWAIT;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state cellForward */
	private void enterSequence_s_Autonomous_Mode___Logging_s_cellForward_default() {
		/* 'default' enter sequence for state cellForward */
		entryAction_s_Autonomous_Mode___Logging_s_cellForward();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_CELLFORWARD;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state updateCoords */
	private void enterSequence_s_Autonomous_Mode___Logging_s_updateCoords_default() {
		/* 'default' enter sequence for state updateCoords */
		entryAction_s_Autonomous_Mode___Logging_s_updateCoords();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_UPDATECOORDS;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state wallAhead */
	private void enterSequence_s_Autonomous_Mode___Logging_s_wallAhead_default() {
		/* 'default' enter sequence for state wallAhead */
		entryAction_s_Autonomous_Mode___Logging_s_wallAhead();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_WALLAHEAD;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state leftClear */
	private void enterSequence_s_Autonomous_Mode___Logging_s_leftClear_default() {
		/* 'default' enter sequence for state leftClear */
		entryAction_s_Autonomous_Mode___Logging_s_leftClear();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_LEFTCLEAR;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state adjustRotation */
	private void enterSequence_s_Autonomous_Mode___Logging_s_adjustRotation_default() {
		/* 'default' enter sequence for state adjustRotation */
		entryAction_s_Autonomous_Mode___Logging_s_adjustRotation();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_ADJUSTROTATION;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state West */
	private void enterSequence_s_Autonomous_Mode___Logging_s_West_default() {
		/* 'default' enter sequence for state West */
		entryAction_s_Autonomous_Mode___Logging_s_West();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_WEST;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state East */
	private void enterSequence_s_Autonomous_Mode___Logging_s_East_default() {
		/* 'default' enter sequence for state East */
		entryAction_s_Autonomous_Mode___Logging_s_East();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_EAST;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state South */
	private void enterSequence_s_Autonomous_Mode___Logging_s_South_default() {
		/* 'default' enter sequence for state South */
		entryAction_s_Autonomous_Mode___Logging_s_South();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_SOUTH;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state North */
	private void enterSequence_s_Autonomous_Mode___Logging_s_North_default() {
		/* 'default' enter sequence for state North */
		entryAction_s_Autonomous_Mode___Logging_s_North();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_NORTH;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state finish */
	private void enterSequence_s_Autonomous_Mode___Logging_s_finish_default() {
		/* 'default' enter sequence for state finish */
		entryAction_s_Autonomous_Mode___Logging_s_finish();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_FINISH;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state CheckIfFinished */
	private void enterSequence_s_Autonomous_Mode___Logging_s_CheckIfFinished_default() {
		/* 'default' enter sequence for state CheckIfFinished */
		entryAction_s_Autonomous_Mode___Logging_s_CheckIfFinished();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_CHECKIFFINISHED;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Specific Location */
	private void enterSequence_s_Autonomous_Mode___Logging_s_Specific_Location_default() {
		/* 'default' enter sequence for state Specific Location */
		entryAction_s_Autonomous_Mode___Logging_s_Specific_Location();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_SPECIFIC_LOCATION;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state GoFront */
	private void enterSequence_s_Autonomous_Mode___Logging_s_GoFront_default() {
		/* 'default' enter sequence for state GoFront */
		entryAction_s_Autonomous_Mode___Logging_s_GoFront();
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_GOFRONT;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state calibrating */
	private void enterSequence_s_Autonomous_Mode___Logging_RotationCalibration_calibrating_default() {
		/* 'default' enter sequence for state calibrating */
		stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_CALIBRATING;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state rotate left */
	private void enterSequence_s_Autonomous_Mode___Logging_RotationCalibration_rotate_left_default() {
		/* 'default' enter sequence for state rotate left */
		entryAction_s_Autonomous_Mode___Logging_RotationCalibration_rotate_left();
		stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_LEFT;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state rotate right */
	private void enterSequence_s_Autonomous_Mode___Logging_RotationCalibration_rotate_right_default() {
		/* 'default' enter sequence for state rotate right */
		entryAction_s_Autonomous_Mode___Logging_RotationCalibration_rotate_right();
		stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_RIGHT;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state Stop Calibration */
	private void enterSequence_s_Autonomous_Mode___Logging_RotationCalibration_Stop_Calibration_default() {
		/* 'default' enter sequence for state Stop Calibration */
		entryAction_s_Autonomous_Mode___Logging_RotationCalibration_Stop_Calibration();
		stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_STOP_CALIBRATION;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state Check */
	private void enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_Check_default() {
		/* 'default' enter sequence for state Check */
		stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state North */
	private void enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_North_default() {
		/* 'default' enter sequence for state North */
		entryAction_s_Autonomous_Mode___Logging_OrientationCheck_North();
		stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_NORTH;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state West */
	private void enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_West_default() {
		/* 'default' enter sequence for state West */
		entryAction_s_Autonomous_Mode___Logging_OrientationCheck_West();
		stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_WEST;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state South */
	private void enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_South_default() {
		/* 'default' enter sequence for state South */
		entryAction_s_Autonomous_Mode___Logging_OrientationCheck_South();
		stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_SOUTH;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state East */
	private void enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_East_default() {
		/* 'default' enter sequence for state East */
		entryAction_s_Autonomous_Mode___Logging_OrientationCheck_East();
		stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_EAST;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state prepare */
	private void enterSequence_s_prepare_default() {
		/* 'default' enter sequence for state prepare */
		entryAction_s_prepare();
		stateVector[0] = State.S_PREPARE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for region s */
	private void enterSequence_s_default() {
		/* 'default' enter sequence for region s */
		react_s__entry_Default();
	}
	
	/* 'default' enter sequence for region Manual Mode */
	private void enterSequence_s_Manual_Mode_Manual_Mode_default() {
		/* 'default' enter sequence for region Manual Mode */
		react_s_Manual_Mode_Manual_Mode__entry_Default();
	}
	
	/* 'default' enter sequence for region Calibration on entry to the maze */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_default() {
		/* 'default' enter sequence for region Calibration on entry to the maze */
		react_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze__entry_Default();
	}
	
	/* 'default' enter sequence for region  */
	private void enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_default() {
		/* 'default' enter sequence for region  */
		react_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0__entry_Default();
	}
	
	/* 'default' enter sequence for region s */
	private void enterSequence_s_Autonomous_Mode___Logging_s_default() {
		/* 'default' enter sequence for region s */
		react_s_Autonomous_Mode___Logging_s__entry_Default();
	}
	
	/* 'default' enter sequence for region RotationCalibration */
	private void enterSequence_s_Autonomous_Mode___Logging_RotationCalibration_default() {
		/* 'default' enter sequence for region RotationCalibration */
		react_s_Autonomous_Mode___Logging_RotationCalibration__entry_Default();
	}
	
	/* 'default' enter sequence for region OrientationCheck */
	private void enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_default() {
		/* 'default' enter sequence for region OrientationCheck */
		react_s_Autonomous_Mode___Logging_OrientationCheck__entry_Default();
	}
	
	/* Default exit sequence for state Manual Mode */
	private void exitSequence_s_Manual_Mode() {
		/* Default exit sequence for state Manual Mode */
		exitSequence_s_Manual_Mode_Manual_Mode();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state stopped */
	private void exitSequence_s_Manual_Mode_Manual_Mode_stopped() {
		/* Default exit sequence for state stopped */
		stateVector[0] = State.S_MANUAL_MODE;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state moving */
	private void exitSequence_s_Manual_Mode_Manual_Mode_moving() {
		/* Default exit sequence for state moving */
		stateVector[0] = State.S_MANUAL_MODE;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state accelerate */
	private void exitSequence_s_Manual_Mode_Manual_Mode_accelerate() {
		/* Default exit sequence for state accelerate */
		stateVector[0] = State.S_MANUAL_MODE;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state deaccelerate */
	private void exitSequence_s_Manual_Mode_Manual_Mode_deaccelerate() {
		/* Default exit sequence for state deaccelerate */
		stateVector[0] = State.S_MANUAL_MODE;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state turning right */
	private void exitSequence_s_Manual_Mode_Manual_Mode_turning_right() {
		/* Default exit sequence for state turning right */
		stateVector[0] = State.S_MANUAL_MODE;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state turning left */
	private void exitSequence_s_Manual_Mode_Manual_Mode_turning_left() {
		/* Default exit sequence for state turning left */
		stateVector[0] = State.S_MANUAL_MODE;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Autonomous Mode + Logging */
	private void exitSequence_s_Autonomous_Mode___Logging() {
		/* Default exit sequence for state Autonomous Mode + Logging */
		exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze();
		exitSequence_s_Autonomous_Mode___Logging_s();
		exitSequence_s_Autonomous_Mode___Logging_RotationCalibration();
		exitSequence_s_Autonomous_Mode___Logging_OrientationCheck();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateVector[2] = State.$NULLSTATE$;
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state Calibration */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration() {
		/* Default exit sequence for state Calibration */
		exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0();
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 0;
		exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
	}
	
	/* Default exit sequence for state Creep */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep() {
		/* Default exit sequence for state Creep */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
		stateConfVectorPosition = 0;
		exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep();
	}
	
	/* Default exit sequence for state Set Zero */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Set_Zero() {
		/* Default exit sequence for state Set Zero */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Position in the middle  */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Position_in_the_middle_() {
		/* Default exit sequence for state Position in the middle  */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
		stateConfVectorPosition = 0;
		exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Position_in_the_middle_();
	}
	
	/* Default exit sequence for state Ready! */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Ready_() {
		/* Default exit sequence for state Ready! */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Adjust rotation */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation() {
		/* Default exit sequence for state Adjust rotation */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
		stateConfVectorPosition = 0;
		exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation();
	}
	
	/* Default exit sequence for state Centering: rotate to wall */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall() {
		/* Default exit sequence for state Centering: rotate to wall */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
		stateConfVectorPosition = 0;
		exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall();
	}
	
	/* Default exit sequence for state Centering: move closer to wall */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall() {
		/* Default exit sequence for state Centering: move closer to wall */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
		stateConfVectorPosition = 0;
		exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall();
	}
	
	/* Default exit sequence for state Centering: rotate back  */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back_() {
		/* Default exit sequence for state Centering: rotate back  */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
		stateConfVectorPosition = 0;
		exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back_();
	}
	
	/* Default exit sequence for state Centering: move away from wall */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall() {
		/* Default exit sequence for state Centering: move away from wall */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
		stateConfVectorPosition = 0;
		exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall();
	}
	
	/* Default exit sequence for state Adjust vertical */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical() {
		/* Default exit sequence for state Adjust vertical */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
		stateConfVectorPosition = 0;
		exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical();
	}
	
	/* Default exit sequence for state prepare calibration */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_prepare_calibration() {
		/* Default exit sequence for state prepare calibration */
		stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state pre exploration */
	private void exitSequence_s_Autonomous_Mode___Logging_s_pre_exploration() {
		/* Default exit sequence for state pre exploration */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state await */
	private void exitSequence_s_Autonomous_Mode___Logging_s_await() {
		/* Default exit sequence for state await */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state cellForward */
	private void exitSequence_s_Autonomous_Mode___Logging_s_cellForward() {
		/* Default exit sequence for state cellForward */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
		exitAction_s_Autonomous_Mode___Logging_s_cellForward();
	}
	
	/* Default exit sequence for state updateCoords */
	private void exitSequence_s_Autonomous_Mode___Logging_s_updateCoords() {
		/* Default exit sequence for state updateCoords */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state wallAhead */
	private void exitSequence_s_Autonomous_Mode___Logging_s_wallAhead() {
		/* Default exit sequence for state wallAhead */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
		exitAction_s_Autonomous_Mode___Logging_s_wallAhead();
	}
	
	/* Default exit sequence for state leftClear */
	private void exitSequence_s_Autonomous_Mode___Logging_s_leftClear() {
		/* Default exit sequence for state leftClear */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
		exitAction_s_Autonomous_Mode___Logging_s_leftClear();
	}
	
	/* Default exit sequence for state adjustRotation */
	private void exitSequence_s_Autonomous_Mode___Logging_s_adjustRotation() {
		/* Default exit sequence for state adjustRotation */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
		exitAction_s_Autonomous_Mode___Logging_s_adjustRotation();
	}
	
	/* Default exit sequence for state West */
	private void exitSequence_s_Autonomous_Mode___Logging_s_West() {
		/* Default exit sequence for state West */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state East */
	private void exitSequence_s_Autonomous_Mode___Logging_s_East() {
		/* Default exit sequence for state East */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state South */
	private void exitSequence_s_Autonomous_Mode___Logging_s_South() {
		/* Default exit sequence for state South */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state North */
	private void exitSequence_s_Autonomous_Mode___Logging_s_North() {
		/* Default exit sequence for state North */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_s_Autonomous_Mode___Logging_s__final_() {
		/* Default exit sequence for final state. */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state CheckIfFinished */
	private void exitSequence_s_Autonomous_Mode___Logging_s_CheckIfFinished() {
		/* Default exit sequence for state CheckIfFinished */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Specific Location */
	private void exitSequence_s_Autonomous_Mode___Logging_s_Specific_Location() {
		/* Default exit sequence for state Specific Location */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
		exitAction_s_Autonomous_Mode___Logging_s_Specific_Location();
	}
	
	/* Default exit sequence for state GoFront */
	private void exitSequence_s_Autonomous_Mode___Logging_s_GoFront() {
		/* Default exit sequence for state GoFront */
		stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 1;
		exitAction_s_Autonomous_Mode___Logging_s_GoFront();
	}
	
	/* Default exit sequence for state calibrating */
	private void exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_calibrating() {
		/* Default exit sequence for state calibrating */
		stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state rotate left */
	private void exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_rotate_left() {
		/* Default exit sequence for state rotate left */
		stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 2;
		exitAction_s_Autonomous_Mode___Logging_RotationCalibration_rotate_left();
	}
	
	/* Default exit sequence for state rotate right */
	private void exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_rotate_right() {
		/* Default exit sequence for state rotate right */
		stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 2;
		exitAction_s_Autonomous_Mode___Logging_RotationCalibration_rotate_right();
	}
	
	/* Default exit sequence for state Stop Calibration */
	private void exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_Stop_Calibration() {
		/* Default exit sequence for state Stop Calibration */
		stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state Check */
	private void exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_Check() {
		/* Default exit sequence for state Check */
		stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state North */
	private void exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_North() {
		/* Default exit sequence for state North */
		stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state West */
	private void exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_West() {
		/* Default exit sequence for state West */
		stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state South */
	private void exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_South() {
		/* Default exit sequence for state South */
		stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state East */
	private void exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_East() {
		/* Default exit sequence for state East */
		stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state prepare */
	private void exitSequence_s_prepare() {
		/* Default exit sequence for state prepare */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_s_prepare();
	}
	
	/* Default exit sequence for region s */
	private void exitSequence_s() {
		/* Default exit sequence for region s */
		switch (stateVector[0]) {
		case S_MANUAL_MODE:
			exitSequence_s_Manual_Mode();
			break;
		case S_MANUAL_MODE_MANUAL_MODE_STOPPED:
			exitSequence_s_Manual_Mode_Manual_Mode_stopped();
			break;
		case S_MANUAL_MODE_MANUAL_MODE_MOVING:
			exitSequence_s_Manual_Mode_Manual_Mode_moving();
			break;
		case S_MANUAL_MODE_MANUAL_MODE_ACCELERATE:
			exitSequence_s_Manual_Mode_Manual_Mode_accelerate();
			break;
		case S_MANUAL_MODE_MANUAL_MODE_DEACCELERATE:
			exitSequence_s_Manual_Mode_Manual_Mode_deaccelerate();
			break;
		case S_MANUAL_MODE_MANUAL_MODE_TURNING_RIGHT:
			exitSequence_s_Manual_Mode_Manual_Mode_turning_right();
			break;
		case S_MANUAL_MODE_MANUAL_MODE_TURNING_LEFT:
			exitSequence_s_Manual_Mode_Manual_Mode_turning_left();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CREEP:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_SET_ZERO:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Set_Zero();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_POSITION_IN_THE_MIDDLE_:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Position_in_the_middle_();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_READY_:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Ready_();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_ROTATION:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_TO_WALL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_CLOSER_TO_WALL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_BACK_:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back_();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_AWAY_FROM_WALL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_VERTICAL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_PREPARE_CALIBRATION:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_prepare_calibration();
			break;
		case S_PREPARE:
			exitSequence_s_prepare();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case S_AUTONOMOUS_MODE___LOGGING_S_PRE_EXPLORATION:
			exitSequence_s_Autonomous_Mode___Logging_s_pre_exploration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_AWAIT:
			exitSequence_s_Autonomous_Mode___Logging_s_await();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_CELLFORWARD:
			exitSequence_s_Autonomous_Mode___Logging_s_cellForward();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_UPDATECOORDS:
			exitSequence_s_Autonomous_Mode___Logging_s_updateCoords();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_WALLAHEAD:
			exitSequence_s_Autonomous_Mode___Logging_s_wallAhead();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_LEFTCLEAR:
			exitSequence_s_Autonomous_Mode___Logging_s_leftClear();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_ADJUSTROTATION:
			exitSequence_s_Autonomous_Mode___Logging_s_adjustRotation();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_WEST:
			exitSequence_s_Autonomous_Mode___Logging_s_West();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_EAST:
			exitSequence_s_Autonomous_Mode___Logging_s_East();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_SOUTH:
			exitSequence_s_Autonomous_Mode___Logging_s_South();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_NORTH:
			exitSequence_s_Autonomous_Mode___Logging_s_North();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S__FINAL_:
			exitSequence_s_Autonomous_Mode___Logging_s__final_();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_CHECKIFFINISHED:
			exitSequence_s_Autonomous_Mode___Logging_s_CheckIfFinished();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_SPECIFIC_LOCATION:
			exitSequence_s_Autonomous_Mode___Logging_s_Specific_Location();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_GOFRONT:
			exitSequence_s_Autonomous_Mode___Logging_s_GoFront();
			break;
		default:
			break;
		}
		switch (stateVector[2]) {
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_CALIBRATING:
			exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_calibrating();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_LEFT:
			exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_rotate_left();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_RIGHT:
			exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_rotate_right();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_STOP_CALIBRATION:
			exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_Stop_Calibration();
			break;
		default:
			break;
		}
		switch (stateVector[3]) {
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK:
			exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_Check();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_NORTH:
			exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_North();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_WEST:
			exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_West();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_SOUTH:
			exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_South();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_EAST:
			exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_East();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Manual Mode */
	private void exitSequence_s_Manual_Mode_Manual_Mode() {
		/* Default exit sequence for region Manual Mode */
		switch (stateVector[0]) {
		case S_MANUAL_MODE_MANUAL_MODE_STOPPED:
			exitSequence_s_Manual_Mode_Manual_Mode_stopped();
			break;
		case S_MANUAL_MODE_MANUAL_MODE_MOVING:
			exitSequence_s_Manual_Mode_Manual_Mode_moving();
			break;
		case S_MANUAL_MODE_MANUAL_MODE_ACCELERATE:
			exitSequence_s_Manual_Mode_Manual_Mode_accelerate();
			break;
		case S_MANUAL_MODE_MANUAL_MODE_DEACCELERATE:
			exitSequence_s_Manual_Mode_Manual_Mode_deaccelerate();
			break;
		case S_MANUAL_MODE_MANUAL_MODE_TURNING_RIGHT:
			exitSequence_s_Manual_Mode_Manual_Mode_turning_right();
			break;
		case S_MANUAL_MODE_MANUAL_MODE_TURNING_LEFT:
			exitSequence_s_Manual_Mode_Manual_Mode_turning_left();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Calibration on entry to the maze */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze() {
		/* Default exit sequence for region Calibration on entry to the maze */
		switch (stateVector[0]) {
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CREEP:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_SET_ZERO:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Set_Zero();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_POSITION_IN_THE_MIDDLE_:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Position_in_the_middle_();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_READY_:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Ready_();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_ROTATION:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_TO_WALL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_CLOSER_TO_WALL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_BACK_:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back_();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_AWAY_FROM_WALL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_VERTICAL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical();
			exitAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_PREPARE_CALIBRATION:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_prepare_calibration();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region  */
	private void exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0() {
		/* Default exit sequence for region  */
		switch (stateVector[0]) {
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CREEP:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_SET_ZERO:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Set_Zero();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_POSITION_IN_THE_MIDDLE_:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Position_in_the_middle_();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_READY_:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Ready_();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_ROTATION:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_TO_WALL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_CLOSER_TO_WALL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__ROTATE_BACK_:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back_();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_CENTERING__MOVE_AWAY_FROM_WALL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_ADJUST_VERTICAL:
			exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region s */
	private void exitSequence_s_Autonomous_Mode___Logging_s() {
		/* Default exit sequence for region s */
		switch (stateVector[1]) {
		case S_AUTONOMOUS_MODE___LOGGING_S_PRE_EXPLORATION:
			exitSequence_s_Autonomous_Mode___Logging_s_pre_exploration();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_AWAIT:
			exitSequence_s_Autonomous_Mode___Logging_s_await();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_CELLFORWARD:
			exitSequence_s_Autonomous_Mode___Logging_s_cellForward();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_UPDATECOORDS:
			exitSequence_s_Autonomous_Mode___Logging_s_updateCoords();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_WALLAHEAD:
			exitSequence_s_Autonomous_Mode___Logging_s_wallAhead();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_LEFTCLEAR:
			exitSequence_s_Autonomous_Mode___Logging_s_leftClear();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_ADJUSTROTATION:
			exitSequence_s_Autonomous_Mode___Logging_s_adjustRotation();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_WEST:
			exitSequence_s_Autonomous_Mode___Logging_s_West();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_EAST:
			exitSequence_s_Autonomous_Mode___Logging_s_East();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_SOUTH:
			exitSequence_s_Autonomous_Mode___Logging_s_South();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_NORTH:
			exitSequence_s_Autonomous_Mode___Logging_s_North();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S__FINAL_:
			exitSequence_s_Autonomous_Mode___Logging_s__final_();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_CHECKIFFINISHED:
			exitSequence_s_Autonomous_Mode___Logging_s_CheckIfFinished();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_SPECIFIC_LOCATION:
			exitSequence_s_Autonomous_Mode___Logging_s_Specific_Location();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_S_GOFRONT:
			exitSequence_s_Autonomous_Mode___Logging_s_GoFront();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region RotationCalibration */
	private void exitSequence_s_Autonomous_Mode___Logging_RotationCalibration() {
		/* Default exit sequence for region RotationCalibration */
		switch (stateVector[2]) {
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_CALIBRATING:
			exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_calibrating();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_LEFT:
			exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_rotate_left();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_ROTATE_RIGHT:
			exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_rotate_right();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_STOP_CALIBRATION:
			exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_Stop_Calibration();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region OrientationCheck */
	private void exitSequence_s_Autonomous_Mode___Logging_OrientationCheck() {
		/* Default exit sequence for region OrientationCheck */
		switch (stateVector[3]) {
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK:
			exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_Check();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_NORTH:
			exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_North();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_WEST:
			exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_West();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_SOUTH:
			exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_South();
			break;
		case S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_EAST:
			exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_East();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0__choice_0() {
		/* The reactions of state null. */
		if (laserDistance.getD0()>((grid.getGridSize() / 2l))) {
			enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall_default();
		} else {
			if (laserDistance.getD0()<=((grid.getGridSize() / 2l))) {
				enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall_default();
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_s_Manual_Mode_Manual_Mode__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_s_Manual_Mode_Manual_Mode_stopped_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_prepare_calibration_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_s_Autonomous_Mode___Logging_s__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_s_Autonomous_Mode___Logging_s_pre_exploration_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_s_Autonomous_Mode___Logging_RotationCalibration__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_s_Autonomous_Mode___Logging_RotationCalibration_calibrating_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_s_Autonomous_Mode___Logging_OrientationCheck__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_Check_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_s__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_s_prepare_default();
	}
	
	private long s_Manual_Mode_react(long transitioned_before) {
		/* The reactions of state Manual Mode. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (computer.m_press) {
					exitSequence_s_Manual_Mode();
					enterSequence_s_Autonomous_Mode___Logging_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Manual_Mode_Manual_Mode_stopped_react(long transitioned_before) {
		/* The reactions of state stopped. */
		long transitioned_after = s_Manual_Mode_react(transitioned_before);
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (computer.a_press) {
					exitSequence_s_Manual_Mode_Manual_Mode_stopped();
					enterSequence_s_Manual_Mode_Manual_Mode_turning_left_default();
					transitioned_after = 0l;
				} else {
					if (computer.d_press) {
						exitSequence_s_Manual_Mode_Manual_Mode_stopped();
						enterSequence_s_Manual_Mode_Manual_Mode_turning_right_default();
						transitioned_after = 0l;
					} else {
						if (computer.w_press) {
							exitSequence_s_Manual_Mode_Manual_Mode_stopped();
							enterSequence_s_Manual_Mode_Manual_Mode_accelerate_default();
							transitioned_after = 0l;
						} else {
							if (computer.x_press) {
								exitSequence_s_Manual_Mode_Manual_Mode_stopped();
								enterSequence_s_Manual_Mode_Manual_Mode_deaccelerate_default();
								transitioned_after = 0l;
							}
						}
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Manual_Mode_Manual_Mode_moving_react(long transitioned_before) {
		/* The reactions of state moving. */
		long transitioned_after = s_Manual_Mode_react(transitioned_before);
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (computer.x_press) {
					exitSequence_s_Manual_Mode_Manual_Mode_moving();
					enterSequence_s_Manual_Mode_Manual_Mode_deaccelerate_default();
					transitioned_after = 0l;
				} else {
					if (computer.w_press) {
						exitSequence_s_Manual_Mode_Manual_Mode_moving();
						enterSequence_s_Manual_Mode_Manual_Mode_accelerate_default();
						transitioned_after = 0l;
					} else {
						if (computer.s_press) {
							exitSequence_s_Manual_Mode_Manual_Mode_moving();
							enterSequence_s_Manual_Mode_Manual_Mode_stopped_default();
							transitioned_after = 0l;
						} else {
							if (computer.d_press) {
								exitSequence_s_Manual_Mode_Manual_Mode_moving();
								enterSequence_s_Manual_Mode_Manual_Mode_turning_right_default();
								transitioned_after = 0l;
							} else {
								if (computer.a_press) {
									exitSequence_s_Manual_Mode_Manual_Mode_moving();
									enterSequence_s_Manual_Mode_Manual_Mode_turning_left_default();
									transitioned_after = 0l;
								}
							}
						}
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Manual_Mode_Manual_Mode_accelerate_react(long transitioned_before) {
		/* The reactions of state accelerate. */
		long transitioned_after = s_Manual_Mode_react(transitioned_before);
		if (getDoCompletion()) {
			/* Default exit sequence for state accelerate */
			stateVector[0] = State.S_MANUAL_MODE;
			stateConfVectorPosition = 0;
			/* 'default' enter sequence for state moving */
			stateVector[0] = State.S_MANUAL_MODE_MANUAL_MODE_MOVING;
			stateConfVectorPosition = 0;
		}
		return transitioned_after;
	}
	
	private long s_Manual_Mode_Manual_Mode_deaccelerate_react(long transitioned_before) {
		/* The reactions of state deaccelerate. */
		long transitioned_after = s_Manual_Mode_react(transitioned_before);
		if (getDoCompletion()) {
			/* Default exit sequence for state deaccelerate */
			stateVector[0] = State.S_MANUAL_MODE;
			stateConfVectorPosition = 0;
			/* 'default' enter sequence for state moving */
			stateVector[0] = State.S_MANUAL_MODE_MANUAL_MODE_MOVING;
			stateConfVectorPosition = 0;
		}
		return transitioned_after;
	}
	
	private long s_Manual_Mode_Manual_Mode_turning_right_react(long transitioned_before) {
		/* The reactions of state turning right. */
		long transitioned_after = s_Manual_Mode_react(transitioned_before);
		if (getDoCompletion()) {
			/* Default exit sequence for state turning right */
			stateVector[0] = State.S_MANUAL_MODE;
			stateConfVectorPosition = 0;
			/* 'default' enter sequence for state moving */
			stateVector[0] = State.S_MANUAL_MODE_MANUAL_MODE_MOVING;
			stateConfVectorPosition = 0;
		}
		return transitioned_after;
	}
	
	private long s_Manual_Mode_Manual_Mode_turning_left_react(long transitioned_before) {
		/* The reactions of state turning left. */
		long transitioned_after = s_Manual_Mode_react(transitioned_before);
		if (getDoCompletion()) {
			/* Default exit sequence for state turning left */
			stateVector[0] = State.S_MANUAL_MODE;
			stateConfVectorPosition = 0;
			/* 'default' enter sequence for state moving */
			stateVector[0] = State.S_MANUAL_MODE_MANUAL_MODE_MOVING;
			stateConfVectorPosition = 0;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_react(long transitioned_before) {
		/* The reactions of state Autonomous Mode + Logging. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (computer.m_press) {
					exitSequence_s_Autonomous_Mode___Logging();
					enterSequence_s_Manual_Mode_default();
					transitioned_after = 3l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_react(long transitioned_before) {
		/* The reactions of state Calibration. */
		return s_Autonomous_Mode___Logging_react(transitioned_before);
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep_react(long transitioned_before) {
		/* The reactions of state Creep. */
		long transitioned_after = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_react(transitioned_before);
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if ((laserDistance.getD90()<(grid.getGridSize()) && laserDistance.getDm90()<(grid.getGridSize()))) {
					exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Creep();
					enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Set_Zero_react(long transitioned_before) {
		/* The reactions of state Set Zero. */
		long transitioned_after = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_react(transitioned_before);
		if (getDoCompletion()) {
			/* Default exit sequence for state Set Zero */
			stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION;
			stateConfVectorPosition = 0;
			/* 'default' enter sequence for state Position in the middle  */
			entryAction_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Position_in_the_middle_();
			stateVector[0] = State.S_AUTONOMOUS_MODE___LOGGING_CALIBRATION_ON_ENTRY_TO_THE_MAZE_CALIBRATION__REGION0_POSITION_IN_THE_MIDDLE_;
			stateConfVectorPosition = 0;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Position_in_the_middle__react(long transitioned_before) {
		/* The reactions of state Position in the middle . */
		long transitioned_after = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_react(transitioned_before);
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if ((((((startPos.getZeroX() + ((grid.getGridSize() / 2l)))<=odom.getX()) || ((startPos.getZeroX() - ((grid.getGridSize() / 2l)))>=odom.getX())) || ((startPos.getZeroY() + ((grid.getGridSize() / 2l)))<=odom.getY())) || ((startPos.getZeroY() - ((grid.getGridSize() / 2l)))>=odom.getY()))) {
					exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Position_in_the_middle_();
					enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Ready__default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Ready__react(long transitioned_before) {
		/* The reactions of state Ready!. */
		return s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_react(transitioned_before);
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation_react(long transitioned_before) {
		/* The reactions of state Adjust rotation. */
		long transitioned_after = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_react(transitioned_before);
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (timeEvents[0]) {
					exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation();
					timeEvents[0] = false;
					enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall_react(long transitioned_before) {
		/* The reactions of state Centering: rotate to wall. */
		long transitioned_after = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_react(transitioned_before);
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if ((userVar.getCurrentOrientation()!=grid.getOrientation())) {
					exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_to_wall();
					react_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0__choice_0();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall_react(long transitioned_before) {
		/* The reactions of state Centering: move closer to wall. */
		long transitioned_after = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_react(transitioned_before);
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (laserDistance.getD0()<((grid.getGridSize() / 2l))) {
					exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_closer_to_wall();
					enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back__default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back__react(long transitioned_before) {
		/* The reactions of state Centering: rotate back . */
		long transitioned_after = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_react(transitioned_before);
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if ((userVar.getCurrentOrientation()!=grid.getOrientation())) {
					exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back_();
					enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_rotation_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall_react(long transitioned_before) {
		/* The reactions of state Centering: move away from wall. */
		long transitioned_after = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_react(transitioned_before);
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (laserDistance.getD0()>=((grid.getGridSize() / 2l))) {
					exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__move_away_from_wall();
					enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Centering__rotate_back__default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical_react(long transitioned_before) {
		/* The reactions of state Adjust vertical. */
		long transitioned_after = s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_react(transitioned_before);
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if ((laserDistance.getD90()>(grid.getGridSize()) && laserDistance.getDm90()>(grid.getGridSize()))) {
					exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Adjust_vertical();
					enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration__region0_Set_Zero_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_prepare_calibration_react(long transitioned_before) {
		/* The reactions of state prepare calibration. */
		long transitioned_after = s_Autonomous_Mode___Logging_react(transitioned_before);
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (userVar.getStartprocedure()==true) {
					exitSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_prepare_calibration();
					enterSequence_s_Autonomous_Mode___Logging_Calibration_on_entry_to_the_maze_Calibration_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_pre_exploration_react(long transitioned_before) {
		/* The reactions of state pre exploration. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<1l) {
				if (userVar.getStartprocedure()==false) {
					exitSequence_s_Autonomous_Mode___Logging_s_pre_exploration();
					enterSequence_s_Autonomous_Mode___Logging_s_await_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_await_react(long transitioned_before) {
		/* The reactions of state await. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state await */
			stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 1;
			/* The reactions of state null. */
			if ((laserDistance.getD90()>grid.getGridSize() && userVar.getTurned()==false)) {
				enterSequence_s_Autonomous_Mode___Logging_s_leftClear_default();
			} else {
				if (laserDistance.getD0()<grid.getGridSize()) {
					enterSequence_s_Autonomous_Mode___Logging_s_wallAhead_default();
				} else {
					if (((userVar.getIsInSpecificExploration()==true && userVar.getSpecificRow()==grid.getRow()) && userVar.getSpecificColumn()==grid.getColumn())) {
						enterSequence_s_Autonomous_Mode___Logging_s_finish_default();
					} else {
						enterSequence_s_Autonomous_Mode___Logging_s_cellForward_default();
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_cellForward_react(long transitioned_before) {
		/* The reactions of state cellForward. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<1l) {
				if ((((((userVar.getUserX() + (grid.getGridSize()))<=odom.getX()) || ((userVar.getUserX() - (grid.getGridSize()))>=odom.getX())) || ((userVar.getUserY() + (grid.getGridSize()))<=odom.getY())) || ((userVar.getUserY() - (grid.getGridSize()))>=odom.getY()))) {
					exitSequence_s_Autonomous_Mode___Logging_s_cellForward();
					enterSequence_s_Autonomous_Mode___Logging_s_updateCoords_default();
					transitioned_after = 1l;
				} else {
					if (odom.getX()<=startPos.getZeroX()) {
						exitSequence_s_Autonomous_Mode___Logging_s_cellForward();
						enterSequence_s_Autonomous_Mode___Logging_s_CheckIfFinished_default();
						transitioned_after = 1l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_updateCoords_react(long transitioned_before) {
		/* The reactions of state updateCoords. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<1l) {
				if (userVar.getOrientation()==0l) {
					exitSequence_s_Autonomous_Mode___Logging_s_updateCoords();
					enterSequence_s_Autonomous_Mode___Logging_s_North_default();
					transitioned_after = 1l;
				} else {
					if (userVar.getOrientation()==3l) {
						exitSequence_s_Autonomous_Mode___Logging_s_updateCoords();
						enterSequence_s_Autonomous_Mode___Logging_s_West_default();
						transitioned_after = 1l;
					} else {
						if (userVar.getOrientation()==1l) {
							exitSequence_s_Autonomous_Mode___Logging_s_updateCoords();
							enterSequence_s_Autonomous_Mode___Logging_s_East_default();
							transitioned_after = 1l;
						} else {
							if (userVar.getOrientation()==2l) {
								exitSequence_s_Autonomous_Mode___Logging_s_updateCoords();
								enterSequence_s_Autonomous_Mode___Logging_s_South_default();
								transitioned_after = 1l;
							}
						}
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_wallAhead_react(long transitioned_before) {
		/* The reactions of state wallAhead. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<1l) {
				if ((userVar.getCurrentOrientation()!=grid.getOrientation())) {
					exitSequence_s_Autonomous_Mode___Logging_s_wallAhead();
					enterSequence_s_Autonomous_Mode___Logging_s_adjustRotation_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_leftClear_react(long transitioned_before) {
		/* The reactions of state leftClear. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<1l) {
				if ((userVar.getCurrentOrientation()!=grid.getOrientation())) {
					exitSequence_s_Autonomous_Mode___Logging_s_leftClear();
					enterSequence_s_Autonomous_Mode___Logging_s_adjustRotation_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_adjustRotation_react(long transitioned_before) {
		/* The reactions of state adjustRotation. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<1l) {
				if (timeEvents[1]) {
					exitSequence_s_Autonomous_Mode___Logging_s_adjustRotation();
					timeEvents[1] = false;
					enterSequence_s_Autonomous_Mode___Logging_s_await_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_West_react(long transitioned_before) {
		/* The reactions of state West. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state West */
			stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 1;
			/* 'default' enter sequence for state await */
			entryAction_s_Autonomous_Mode___Logging_s_await();
			stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_AWAIT;
			stateConfVectorPosition = 1;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_East_react(long transitioned_before) {
		/* The reactions of state East. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state East */
			stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 1;
			/* 'default' enter sequence for state await */
			entryAction_s_Autonomous_Mode___Logging_s_await();
			stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_AWAIT;
			stateConfVectorPosition = 1;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_South_react(long transitioned_before) {
		/* The reactions of state South. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state South */
			stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 1;
			/* 'default' enter sequence for state await */
			entryAction_s_Autonomous_Mode___Logging_s_await();
			stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_AWAIT;
			stateConfVectorPosition = 1;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_North_react(long transitioned_before) {
		/* The reactions of state North. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state North */
			stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 1;
			/* 'default' enter sequence for state await */
			entryAction_s_Autonomous_Mode___Logging_s_await();
			stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S_AWAIT;
			stateConfVectorPosition = 1;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_finish_react(long transitioned_before) {
		/* The reactions of state finish. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default enter sequence for final state */
			stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING_S__FINAL_;
			stateConfVectorPosition = 1;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_CheckIfFinished_react(long transitioned_before) {
		/* The reactions of state CheckIfFinished. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state CheckIfFinished */
			stateVector[1] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 1;
			/* The reactions of state null. */
			if ((userVar.getSpecificRow()>0l || userVar.getSpecificColumn()>0l)) {
				enterSequence_s_Autonomous_Mode___Logging_s_Specific_Location_default();
			} else {
				enterSequence_s_Autonomous_Mode___Logging_s_finish_default();
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_Specific_Location_react(long transitioned_before) {
		/* The reactions of state Specific Location. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<1l) {
				if (grid.getOrientation()==0l) {
					exitSequence_s_Autonomous_Mode___Logging_s_Specific_Location();
					enterSequence_s_Autonomous_Mode___Logging_s_GoFront_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_s_GoFront_react(long transitioned_before) {
		/* The reactions of state GoFront. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<1l) {
				if (((startPos.getZeroX() + ((grid.getGridSize() / 2l)))<=odom.getX())) {
					exitSequence_s_Autonomous_Mode___Logging_s_GoFront();
					enterSequence_s_Autonomous_Mode___Logging_s_adjustRotation_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_RotationCalibration_calibrating_react(long transitioned_before) {
		/* The reactions of state calibrating. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<2l) {
				if (((((((((imu.getYaw()>-(45.0) && imu.getYaw()<0.0)) || ((imu.getYaw()>-(135.0) && imu.getYaw()<-(90.0)))) || ((imu.getYaw()>135.0 && imu.getYaw()<-(180.0)))) || ((imu.getYaw()>45.0 && imu.getYaw()<90.0))) || ((175l<imu.getYaw() && imu.getYaw()<180l)))) && userVar.getStraighten()==true)) {
					exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_calibrating();
					enterSequence_s_Autonomous_Mode___Logging_RotationCalibration_rotate_left_default();
					transitioned_after = 2l;
				} else {
					if (((((((((imu.getYaw()>0.0 && imu.getYaw()<45.0)) || ((imu.getYaw()>-(90.0) && imu.getYaw()<-(45.0)))) || ((imu.getYaw()>-(180l) && imu.getYaw()<-(135.0)))) || ((imu.getYaw()>90.0 && imu.getYaw()<135.0))) || ((-(180l)<imu.getYaw() && imu.getYaw()<-(175l))))) && userVar.getStraighten()==true)) {
						exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_calibrating();
						enterSequence_s_Autonomous_Mode___Logging_RotationCalibration_rotate_right_default();
						transitioned_after = 2l;
					} else {
						if (userVar.getStraighten()==false) {
							exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_calibrating();
							enterSequence_s_Autonomous_Mode___Logging_RotationCalibration_Stop_Calibration_default();
							transitioned_after = 2l;
						}
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_RotationCalibration_rotate_left_react(long transitioned_before) {
		/* The reactions of state rotate left. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state rotate left */
			stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 2;
			exitAction_s_Autonomous_Mode___Logging_RotationCalibration_rotate_left();
			/* 'default' enter sequence for state calibrating */
			stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_CALIBRATING;
			stateConfVectorPosition = 2;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_RotationCalibration_rotate_right_react(long transitioned_before) {
		/* The reactions of state rotate right. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state rotate right */
			stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 2;
			exitAction_s_Autonomous_Mode___Logging_RotationCalibration_rotate_right();
			/* 'default' enter sequence for state calibrating */
			stateVector[2] = State.S_AUTONOMOUS_MODE___LOGGING_ROTATIONCALIBRATION_CALIBRATING;
			stateConfVectorPosition = 2;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_RotationCalibration_Stop_Calibration_react(long transitioned_before) {
		/* The reactions of state Stop Calibration. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<2l) {
				if (userVar.getStraighten()==true) {
					exitSequence_s_Autonomous_Mode___Logging_RotationCalibration_Stop_Calibration();
					enterSequence_s_Autonomous_Mode___Logging_RotationCalibration_calibrating_default();
					transitioned_after = 2l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_OrientationCheck_Check_react(long transitioned_before) {
		/* The reactions of state Check. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<3l) {
				if ((imu.getYaw()>-(5l) && imu.getYaw()<5l)) {
					exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_Check();
					enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_North_default();
					transitioned_after = 3l;
				} else {
					if ((imu.getYaw()>85l && imu.getYaw()<95l)) {
						exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_Check();
						enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_West_default();
						transitioned_after = 3l;
					} else {
						if ((((imu.getYaw()<-(175l) && imu.getYaw()>-(180l))) || ((imu.getYaw()>175l && imu.getYaw()<180l)))) {
							exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_Check();
							enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_South_default();
							transitioned_after = 3l;
						} else {
							if ((imu.getYaw()<-(85l) && imu.getYaw()>-(95l))) {
								exitSequence_s_Autonomous_Mode___Logging_OrientationCheck_Check();
								enterSequence_s_Autonomous_Mode___Logging_OrientationCheck_East_default();
								transitioned_after = 3l;
							}
						}
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_OrientationCheck_North_react(long transitioned_before) {
		/* The reactions of state North. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state North */
			stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 3;
			/* 'default' enter sequence for state Check */
			stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK;
			stateConfVectorPosition = 3;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_OrientationCheck_West_react(long transitioned_before) {
		/* The reactions of state West. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state West */
			stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 3;
			/* 'default' enter sequence for state Check */
			stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK;
			stateConfVectorPosition = 3;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_OrientationCheck_South_react(long transitioned_before) {
		/* The reactions of state South. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state South */
			stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 3;
			/* 'default' enter sequence for state Check */
			stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK;
			stateConfVectorPosition = 3;
		}
		return transitioned_after;
	}
	
	private long s_Autonomous_Mode___Logging_OrientationCheck_East_react(long transitioned_before) {
		/* The reactions of state East. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state East */
			stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING;
			stateConfVectorPosition = 3;
			/* 'default' enter sequence for state Check */
			stateVector[3] = State.S_AUTONOMOUS_MODE___LOGGING_ORIENTATIONCHECK_CHECK;
			stateConfVectorPosition = 3;
		}
		return transitioned_after;
	}
	
	private long s_prepare_react(long transitioned_before) {
		/* The reactions of state prepare. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (timeEvents[2]) {
					exitSequence_s_prepare();
					timeEvents[2] = false;
					enterSequence_s_Manual_Mode_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
