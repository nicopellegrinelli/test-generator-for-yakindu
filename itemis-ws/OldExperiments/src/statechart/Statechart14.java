/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class Statechart14 implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_ORTHOGONAL,
		MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_NOT_PRESSED,
		MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_PRESSED,
		MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL,
		MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_RED,
		MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_YELLOW,
		MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN,
		MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN_R1_GREEN,
		MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED,
		MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_YELLOW,
		MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_ALLBLACK,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[7];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean policeInterrupt;
	private boolean local_setLED;
	
	private boolean local_setLEDValue;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Statechart14() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Statechart14 */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Statechart14 */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		buttonPressed = false;
		buttonReleased = false;
		carDetected = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
	}
	
	private void clearInternalEvents() {
		policeInterrupt = false;
		local_setLED = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_NOT_PRESSED:
			transitioned = main_region_orthogonal_TOGGLE_MODE_BUTTON_not_pressed_react(transitioned);
			break;
		case MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_PRESSED:
			transitioned = main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_RED:
				main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red_react(transitioned);
				break;
			case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_YELLOW:
				main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow_react(transitioned);
				break;
			case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN_R1_GREEN:
				main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green_react(transitioned);
				break;
			case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_YELLOW:
				main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow_react(transitioned);
				break;
			case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_ALLBLACK:
				main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			clearInternalEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return true;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_ORTHOGONAL:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_ORTHOGONAL.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_ALLBLACK.ordinal();
		case MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_NOT_PRESSED:
			return stateVector[0] == State.MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_NOT_PRESSED;
		case MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_PRESSED:
			return stateVector[0] == State.MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_PRESSED;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN_R1_GREEN.ordinal();
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_RED:
			return stateVector[1] == State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_RED;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_YELLOW:
			return stateVector[1] == State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_YELLOW;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN_R1_GREEN.ordinal();
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN_R1_GREEN:
			return stateVector[1] == State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN_R1_GREEN;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_ALLBLACK.ordinal();
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_YELLOW:
			return stateVector[1] == State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_YELLOW;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_ALLBLACK:
			return stateVector[1] == State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_ALLBLACK;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	protected void raisePoliceInterrupt() {
		internalEventQueue.add(() -> {
			policeInterrupt = true;
		});
	}
	
	protected void raiseLocal_setLED(final boolean value) {
		internalEventQueue.add(() -> {
			local_setLEDValue = value;
			local_setLED = true;
		});
	}
	protected boolean getLocal_setLEDValue() {
		if (! local_setLED ) 
			throw new IllegalStateException("Illegal event value access. Event Local_setLED is not raised!");
		return local_setLEDValue;
	}
	
	private boolean buttonPressed;
	
	
	public void raiseButtonPressed() {
		inEventQueue.add(() -> {
			buttonPressed = true;
		});
		runCycle();
	}
	
	private boolean buttonReleased;
	
	
	public void raiseButtonReleased() {
		inEventQueue.add(() -> {
			buttonReleased = true;
		});
		runCycle();
	}
	
	private boolean carDetected;
	
	
	public void raiseCarDetected() {
		inEventQueue.add(() -> {
			carDetected = true;
		});
		runCycle();
	}
	
	private boolean setLED;
	
	private boolean setLEDValue;
	
	
	protected void raiseSetLED(boolean value) {
		setLEDValue = value;
		setLED = true;
		setLEDObservable.next(value);
		raiseLocal_setLED(value);
	}
	
	private Observable<Boolean> setLEDObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetLED() {
		return setLEDObservable;
	}
	
	private boolean setRed;
	
	private boolean setRedValue;
	
	
	protected void raiseSetRed(boolean value) {
		setRedValue = value;
		setRed = true;
		setRedObservable.next(value);
	}
	
	private Observable<Boolean> setRedObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetRed() {
		return setRedObservable;
	}
	
	private boolean setYellow;
	
	private boolean setYellowValue;
	
	
	protected void raiseSetYellow(boolean value) {
		setYellowValue = value;
		setYellow = true;
		setYellowObservable.next(value);
	}
	
	private Observable<Boolean> setYellowObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetYellow() {
		return setYellowObservable;
	}
	
	private boolean setGreen;
	
	private boolean setGreenValue;
	
	
	protected void raiseSetGreen(boolean value) {
		setGreenValue = value;
		setGreen = true;
		setGreenObservable.next(value);
	}
	
	private Observable<Boolean> setGreenObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetGreen() {
		return setGreenObservable;
	}
	
	/* Entry action for state 'pressed'. */
	private void entryAction_main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed() {
		/* Entry action for state 'pressed'. */
		timerService.setTimer(this, 0, (2l * 1000l), false);
	}
	
	/* Entry action for state 'red'. */
	private void entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red() {
		/* Entry action for state 'red'. */
		timerService.setTimer(this, 1, (2l * 1000l), false);
		raiseSetRed(true);
	}
	
	/* Entry action for state 'yellow'. */
	private void entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow() {
		/* Entry action for state 'yellow'. */
		timerService.setTimer(this, 2, (1l * 1000l), false);
		raiseSetYellow(true);
	}
	
	/* Entry action for state 'smart green'. */
	private void entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green() {
		/* Entry action for state 'smart green'. */
		timerService.setTimer(this, 3, (5l * 1000l), false);
		raiseSetGreen(true);
	}
	
	/* Entry action for state 'green'. */
	private void entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green() {
		/* Entry action for state 'green'. */
		timerService.setTimer(this, 4, (2l * 1000l), false);
	}
	
	/* Entry action for state 'yellow'. */
	private void entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow() {
		/* Entry action for state 'yellow'. */
		timerService.setTimer(this, 5, 500l, false);
		raiseSetYellow(true);
	}
	
	/* Entry action for state 'allblack'. */
	private void entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack() {
		/* Entry action for state 'allblack'. */
		timerService.setTimer(this, 6, 500l, false);
	}
	
	/* Exit action for state 'pressed'. */
	private void exitAction_main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed() {
		/* Exit action for state 'pressed'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'red'. */
	private void exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red() {
		/* Exit action for state 'red'. */
		timerService.unsetTimer(this, 1);
		raiseSetRed(false);
	}
	
	/* Exit action for state 'yellow'. */
	private void exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow() {
		/* Exit action for state 'yellow'. */
		timerService.unsetTimer(this, 2);
		raiseSetYellow(false);
	}
	
	/* Exit action for state 'smart green'. */
	private void exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green() {
		/* Exit action for state 'smart green'. */
		timerService.unsetTimer(this, 3);
		raiseSetGreen(false);
	}
	
	/* Exit action for state 'green'. */
	private void exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green() {
		/* Exit action for state 'green'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'yellow'. */
	private void exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow() {
		/* Exit action for state 'yellow'. */
		timerService.unsetTimer(this, 5);
		raiseSetYellow(false);
	}
	
	/* Exit action for state 'allblack'. */
	private void exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack() {
		/* Exit action for state 'allblack'. */
		timerService.unsetTimer(this, 6);
	}
	
	/* 'default' enter sequence for state orthogonal */
	private void enterSequence_main_region_orthogonal_default() {
		/* 'default' enter sequence for state orthogonal */
		enterSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_default();
		enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_default();
	}
	
	/* 'default' enter sequence for state not pressed */
	private void enterSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_not_pressed_default() {
		/* 'default' enter sequence for state not pressed */
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_NOT_PRESSED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state pressed */
	private void enterSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed_default() {
		/* 'default' enter sequence for state pressed */
		entryAction_main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed();
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_PRESSED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state normal */
	private void enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_default() {
		/* 'default' enter sequence for state normal */
		enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_default();
	}
	
	/* 'default' enter sequence for state red */
	private void enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red_default() {
		/* 'default' enter sequence for state red */
		entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red();
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_RED;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state yellow */
	private void enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow_default() {
		/* 'default' enter sequence for state yellow */
		entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow();
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_YELLOW;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state green */
	private void enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green_default() {
		/* 'default' enter sequence for state green */
		entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green();
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN_R1_GREEN;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state interrupted */
	private void enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_default() {
		/* 'default' enter sequence for state interrupted */
		enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_default();
	}
	
	/* 'default' enter sequence for state yellow */
	private void enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow_default() {
		/* 'default' enter sequence for state yellow */
		entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow();
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_YELLOW;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state allblack */
	private void enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack_default() {
		/* 'default' enter sequence for state allblack */
		entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack();
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_ALLBLACK;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region TOGGLE MODE BUTTON */
	private void enterSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_default() {
		/* 'default' enter sequence for region TOGGLE MODE BUTTON */
		react_main_region_orthogonal_TOGGLE_MODE_BUTTON__entry_Default();
	}
	
	/* 'default' enter sequence for region TRAFFIC LIGHT MODES */
	private void enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_default() {
		/* 'default' enter sequence for region TRAFFIC LIGHT MODES */
		react_main_region_orthogonal_TRAFFIC_LIGHT_MODES__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1__entry_Default();
	}
	
	/* Default exit sequence for state not pressed */
	private void exitSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_not_pressed() {
		/* Default exit sequence for state not pressed */
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state pressed */
	private void exitSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed() {
		/* Default exit sequence for state pressed */
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL;
		stateConfVectorPosition = 0;
		exitAction_main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed();
	}
	
	/* Default exit sequence for state normal */
	private void exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal() {
		/* Default exit sequence for state normal */
		exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1();
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state red */
	private void exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red() {
		/* Default exit sequence for state red */
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL;
		stateConfVectorPosition = 1;
		exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red();
	}
	
	/* Default exit sequence for state yellow */
	private void exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow() {
		/* Default exit sequence for state yellow */
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL;
		stateConfVectorPosition = 1;
		exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow();
	}
	
	/* Default exit sequence for state smart green */
	private void exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green() {
		/* Default exit sequence for state smart green */
		exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1();
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL;
		stateConfVectorPosition = 1;
		exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green();
	}
	
	/* Default exit sequence for state green */
	private void exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green() {
		/* Default exit sequence for state green */
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN;
		stateConfVectorPosition = 1;
		exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green();
	}
	
	/* Default exit sequence for state interrupted */
	private void exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted() {
		/* Default exit sequence for state interrupted */
		exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1();
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state yellow */
	private void exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow() {
		/* Default exit sequence for state yellow */
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED;
		stateConfVectorPosition = 1;
		exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow();
	}
	
	/* Default exit sequence for state allblack */
	private void exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack() {
		/* Default exit sequence for state allblack */
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED;
		stateConfVectorPosition = 1;
		exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_NOT_PRESSED:
			exitSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_not_pressed();
			break;
		case MAIN_REGION_ORTHOGONAL_TOGGLE_MODE_BUTTON_PRESSED:
			exitSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal();
			break;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_RED:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red();
			break;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_YELLOW:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow();
			break;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green();
			break;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN_R1_GREEN:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green();
			exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green();
			break;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted();
			break;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_YELLOW:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow();
			break;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_ALLBLACK:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[1]) {
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_RED:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red();
			break;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_YELLOW:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow();
			break;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green();
			break;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN_R1_GREEN:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green();
			exitAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[1]) {
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_NORMAL_R1_SMART_GREEN_R1_GREEN:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[1]) {
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_YELLOW:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow();
			break;
		case MAIN_REGION_ORTHOGONAL_TRAFFIC_LIGHT_MODES_INTERRUPTED_R1_ALLBLACK:
			exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_orthogonal_TOGGLE_MODE_BUTTON__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_not_pressed_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_orthogonal_TRAFFIC_LIGHT_MODES__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_orthogonal_default();
	}
	
	private long main_region_orthogonal_TOGGLE_MODE_BUTTON_not_pressed_react(long transitioned_before) {
		/* The reactions of state not pressed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (buttonPressed) {
				exitSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_not_pressed();
				enterSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed_react(long transitioned_before) {
		/* The reactions of state pressed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (buttonReleased) {
				exitSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed();
				raiseSetLED(!(getLocal_setLEDValue()));
				enterSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_not_pressed_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_pressed();
					raisePoliceInterrupt();
					timeEvents[0] = false;
					enterSequence_main_region_orthogonal_TOGGLE_MODE_BUTTON_not_pressed_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_react(long transitioned_before) {
		/* The reactions of state normal. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (policeInterrupt) {
				exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal();
				enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red_react(long transitioned_before) {
		/* The reactions of state red. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[1]) {
				exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red();
				timeEvents[1] = false;
				entryAction_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green();
				enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green_default();
				main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow_react(long transitioned_before) {
		/* The reactions of state yellow. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[2]) {
				exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow();
				timeEvents[2] = false;
				enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_red_default();
				main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_react(long transitioned_before) {
		/* The reactions of state smart green. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[3]) {
				exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green();
				timeEvents[3] = false;
				enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow_default();
				main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green_react(long transitioned_before) {
		/* The reactions of state green. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[4]) {
				exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green();
				timeEvents[4] = false;
				enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_yellow_default();
				main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_react(1l);
				transitioned_after = 1l;
			} else {
				if (((carDetected) && (getLocal_setLEDValue()==true))) {
					exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green();
					enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_r1_green_default();
					main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_react(1l);
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_r1_smart_green_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_react(long transitioned_before) {
		/* The reactions of state interrupted. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (policeInterrupt) {
				exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted();
				enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_normal_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow_react(long transitioned_before) {
		/* The reactions of state yellow. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[5]) {
				exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow();
				timeEvents[5] = false;
				enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack_default();
				main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack_react(long transitioned_before) {
		/* The reactions of state allblack. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[6]) {
				exitSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_allblack();
				timeEvents[6] = false;
				enterSequence_main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_r1_yellow_default();
				main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_orthogonal_TRAFFIC_LIGHT_MODES_interrupted_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
