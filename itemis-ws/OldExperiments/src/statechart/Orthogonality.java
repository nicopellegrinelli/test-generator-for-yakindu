/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;

public class Orthogonality implements ICycleBased {
	private static class EvBuf {
		private boolean proceed;
		private boolean pa;
		private boolean pb;
	}
	private static class OrthogonalityEvBuf {
		private EvBuf iface = new EvBuf();
	}
	public enum State {
		MAIN_REGION_INITIALIZE,
		MAIN_REGION_PROCESS,
		MAIN_REGION_PROCESS_R1_LINE_A_1,
		MAIN_REGION_PROCESS_R1_LINE_A_2,
		MAIN_REGION_PROCESS_R2_LINE_B_1,
		MAIN_REGION_PROCESS_R2_LINE_B_2,
		MAIN_REGION__FINAL_,
		MAIN_REGION_CLEANUP,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private OrthogonalityEvBuf current = new OrthogonalityEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Orthogonality() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		microStep();
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Orthogonality */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Orthogonality */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return (stateVector[0] == State.MAIN_REGION__FINAL_) && (stateVector[1] == State.$NULLSTATE$);
	}
	private void swapInEvents() {
		current.iface.proceed = proceed;
		proceed = false;
		current.iface.pa = pa;
		pa = false;
		current.iface.pb = pb;
		pb = false;
	}
	
	private void clearInEvents() {
		proceed = false;
		pa = false;
		pb = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_INITIALIZE:
			transitioned = main_region_Initialize_react(transitioned);
			break;
		case MAIN_REGION_PROCESS_R1_LINE_A_1:
			transitioned = main_region_Process_r1_Line_A_1_react(transitioned);
			break;
		case MAIN_REGION_PROCESS_R1_LINE_A_2:
			transitioned = main_region_Process_r1_Line_A_2_react(transitioned);
			break;
		case MAIN_REGION__FINAL_:
			break;
		case MAIN_REGION_CLEANUP:
			transitioned = main_region_Cleanup_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_PROCESS_R2_LINE_B_1:
				main_region_Process_r2_Line_B_1_react(transitioned);
				break;
			case MAIN_REGION_PROCESS_R2_LINE_B_2:
				main_region_Process_r2_Line_B_2_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_INITIALIZE:
			return stateVector[0] == State.MAIN_REGION_INITIALIZE;
		case MAIN_REGION_PROCESS:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_PROCESS.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_PROCESS_R2_LINE_B_2.ordinal();
		case MAIN_REGION_PROCESS_R1_LINE_A_1:
			return stateVector[0] == State.MAIN_REGION_PROCESS_R1_LINE_A_1;
		case MAIN_REGION_PROCESS_R1_LINE_A_2:
			return stateVector[0] == State.MAIN_REGION_PROCESS_R1_LINE_A_2;
		case MAIN_REGION_PROCESS_R2_LINE_B_1:
			return stateVector[1] == State.MAIN_REGION_PROCESS_R2_LINE_B_1;
		case MAIN_REGION_PROCESS_R2_LINE_B_2:
			return stateVector[1] == State.MAIN_REGION_PROCESS_R2_LINE_B_2;
		case MAIN_REGION__FINAL_:
			return stateVector[0] == State.MAIN_REGION__FINAL_;
		case MAIN_REGION_CLEANUP:
			return stateVector[0] == State.MAIN_REGION_CLEANUP;
		default:
			return false;
		}
	}
	
	
	private boolean proceed;
	
	
	public void raiseProceed() {
		proceed = true;
	}
	
	private boolean pa;
	
	
	public void raisePa() {
		pa = true;
	}
	
	private boolean pb;
	
	
	public void raisePb() {
		pb = true;
	}
	
	/* 'default' enter sequence for state Initialize */
	private void enterSequence_main_region_Initialize_default() {
		/* 'default' enter sequence for state Initialize */
		stateVector[0] = State.MAIN_REGION_INITIALIZE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Line A 1 */
	private void enterSequence_main_region_Process_r1_Line_A_1_default() {
		/* 'default' enter sequence for state Line A 1 */
		stateVector[0] = State.MAIN_REGION_PROCESS_R1_LINE_A_1;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Line A 2 */
	private void enterSequence_main_region_Process_r1_Line_A_2_default() {
		/* 'default' enter sequence for state Line A 2 */
		stateVector[0] = State.MAIN_REGION_PROCESS_R1_LINE_A_2;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Line B 1 */
	private void enterSequence_main_region_Process_r2_Line_B_1_default() {
		/* 'default' enter sequence for state Line B 1 */
		stateVector[1] = State.MAIN_REGION_PROCESS_R2_LINE_B_1;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Line B 2 */
	private void enterSequence_main_region_Process_r2_Line_B_2_default() {
		/* 'default' enter sequence for state Line B 2 */
		stateVector[1] = State.MAIN_REGION_PROCESS_R2_LINE_B_2;
		stateConfVectorPosition = 1;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence_main_region__final__default() {
		/* Default enter sequence for final state */
		stateVector[0] = State.MAIN_REGION__FINAL_;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Cleanup */
	private void enterSequence_main_region_Cleanup_default() {
		/* 'default' enter sequence for state Cleanup */
		stateVector[0] = State.MAIN_REGION_CLEANUP;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Initialize */
	private void exitSequence_main_region_Initialize() {
		/* Default exit sequence for state Initialize */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Process */
	private void exitSequence_main_region_Process() {
		/* Default exit sequence for state Process */
		exitSequence_main_region_Process_r1();
		exitSequence_main_region_Process_r2();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Line A 1 */
	private void exitSequence_main_region_Process_r1_Line_A_1() {
		/* Default exit sequence for state Line A 1 */
		stateVector[0] = State.MAIN_REGION_PROCESS;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Line A 2 */
	private void exitSequence_main_region_Process_r1_Line_A_2() {
		/* Default exit sequence for state Line A 2 */
		stateVector[0] = State.MAIN_REGION_PROCESS;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Line B 1 */
	private void exitSequence_main_region_Process_r2_Line_B_1() {
		/* Default exit sequence for state Line B 1 */
		stateVector[1] = State.MAIN_REGION_PROCESS;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Line B 2 */
	private void exitSequence_main_region_Process_r2_Line_B_2() {
		/* Default exit sequence for state Line B 2 */
		stateVector[1] = State.MAIN_REGION_PROCESS;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region__final_() {
		/* Default exit sequence for final state. */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_INITIALIZE:
			exitSequence_main_region_Initialize();
			break;
		case MAIN_REGION_PROCESS_R1_LINE_A_1:
			exitSequence_main_region_Process_r1_Line_A_1();
			break;
		case MAIN_REGION_PROCESS_R1_LINE_A_2:
			exitSequence_main_region_Process_r1_Line_A_2();
			break;
		case MAIN_REGION__FINAL_:
			exitSequence_main_region__final_();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_PROCESS_R2_LINE_B_1:
			exitSequence_main_region_Process_r2_Line_B_1();
			break;
		case MAIN_REGION_PROCESS_R2_LINE_B_2:
			exitSequence_main_region_Process_r2_Line_B_2();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Process_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_PROCESS_R1_LINE_A_1:
			exitSequence_main_region_Process_r1_Line_A_1();
			break;
		case MAIN_REGION_PROCESS_R1_LINE_A_2:
			exitSequence_main_region_Process_r1_Line_A_2();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Process_r2() {
		/* Default exit sequence for region r2 */
		switch (stateVector[1]) {
		case MAIN_REGION_PROCESS_R2_LINE_B_1:
			exitSequence_main_region_Process_r2_Line_B_1();
			break;
		case MAIN_REGION_PROCESS_R2_LINE_B_2:
			exitSequence_main_region_Process_r2_Line_B_2();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Initialize_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync0() {
		/* The reactions of state null. */
		enterSequence_main_region_Process_r1_Line_A_1_default();
		enterSequence_main_region_Process_r2_Line_B_1_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync1() {
		/* The reactions of state null. */
		enterSequence_main_region_Cleanup_default();
	}
	
	private long main_region_Initialize_react(long transitioned_before) {
		/* The reactions of state Initialize. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.proceed) {
				exitSequence_main_region_Initialize();
				react_main_region__sync0();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Process_r1_Line_A_1_react(long transitioned_before) {
		/* The reactions of state Line A 1. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.pa) {
				exitSequence_main_region_Process_r1_Line_A_1();
				enterSequence_main_region_Process_r1_Line_A_2_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Process_r1_Line_A_2_react(long transitioned_before) {
		/* The reactions of state Line A 2. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((true && isStateActive(State.MAIN_REGION_PROCESS_R2_LINE_B_2)) && true)) {
				exitSequence_main_region_Process();
				react_main_region__sync1();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Process_r2_Line_B_1_react(long transitioned_before) {
		/* The reactions of state Line B 1. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (current.iface.pb) {
				exitSequence_main_region_Process_r2_Line_B_1();
				enterSequence_main_region_Process_r2_Line_B_2_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Process_r2_Line_B_2_react(long transitioned_before) {
		/* The reactions of state Line B 2. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (((true && isStateActive(State.MAIN_REGION_PROCESS_R1_LINE_A_2)) && true)) {
				exitSequence_main_region_Process();
				react_main_region__sync1();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Cleanup_react(long transitioned_before) {
		/* The reactions of state Cleanup. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.proceed) {
				enterSequence_main_region__final__default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
}
