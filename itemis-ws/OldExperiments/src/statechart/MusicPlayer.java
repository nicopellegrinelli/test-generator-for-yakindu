/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class MusicPlayer implements ITimed, IEventDriven {
	public static class Modes {
		private MusicPlayer parent;
		
		public Modes(MusicPlayer parent) {
			this.parent = parent;
		}
		private boolean changeMode;
		
		
		public void raiseChangeMode() {
			parent.inEventQueue.add(() -> {
				changeMode = true;
			});
			parent.runCycle();
		}
		
		private long mode;
		
		public long getMode() {
			return mode;
		}
		
		public void setMode(long value) {
			this.mode = value;
		}
		
	}
	
	public static class Power {
		private MusicPlayer parent;
		
		public Power(MusicPlayer parent) {
			this.parent = parent;
		}
		private boolean powerOff;
		
		
		public void raisePowerOff() {
			parent.inEventQueue.add(() -> {
				powerOff = true;
			});
			parent.runCycle();
		}
		
		private boolean powerOn;
		
		
		public void raisePowerOn() {
			parent.inEventQueue.add(() -> {
				powerOn = true;
			});
			parent.runCycle();
		}
		
		private long battery;
		
		public long getBattery() {
			return battery;
		}
		
		public void setBattery(long value) {
			this.battery = value;
		}
		
		private boolean connectPower;
		
		public boolean getConnectPower() {
			return connectPower;
		}
		
		public void setConnectPower(boolean value) {
			this.connectPower = value;
		}
		
	}
	
	public static class Timer {
		private long sec;
		
		public long getSec() {
			return sec;
		}
		
		public void setSec(long value) {
			this.sec = value;
		}
		
	}
	
	public static class Clock {
		private MusicPlayer parent;
		
		public Clock(MusicPlayer parent) {
			this.parent = parent;
		}
		private boolean chooseSW;
		
		
		public void raiseChooseSW() {
			parent.inEventQueue.add(() -> {
				chooseSW = true;
			});
			parent.runCycle();
		}
		
		private boolean chooseTM;
		
		
		public void raiseChooseTM() {
			parent.inEventQueue.add(() -> {
				chooseTM = true;
			});
			parent.runCycle();
		}
		
		private boolean clockDSP;
		
		
		public void raiseClockDSP() {
			parent.inEventQueue.add(() -> {
				clockDSP = true;
			});
			parent.runCycle();
		}
		
		private boolean resetTimer;
		
		
		public void raiseResetTimer() {
			parent.inEventQueue.add(() -> {
				resetTimer = true;
			});
			parent.runCycle();
		}
		
		private boolean clockSet;
		
		
		public void raiseClockSet() {
			parent.inEventQueue.add(() -> {
				clockSet = true;
			});
			parent.runCycle();
		}
		
		private boolean stopAlarmClock;
		
		
		public void raiseStopAlarmClock() {
			parent.inEventQueue.add(() -> {
				stopAlarmClock = true;
			});
			parent.runCycle();
		}
		
		private long hrGen;
		
		public long getHrGen() {
			return hrGen;
		}
		
		public void setHrGen(long value) {
			this.hrGen = value;
		}
		
		private long minGen;
		
		public long getMinGen() {
			return minGen;
		}
		
		public void setMinGen(long value) {
			this.minGen = value;
		}
		
		private long stopwatchtime;
		
		public long getStopwatchtime() {
			return stopwatchtime;
		}
		
		public void setStopwatchtime(long value) {
			this.stopwatchtime = value;
		}
		
		private boolean stop;
		
		public boolean getStop() {
			return stop;
		}
		
		public void setStop(boolean value) {
			this.stop = value;
		}
		
		private long setTime;
		
		public long getSetTime() {
			return setTime;
		}
		
		public void setSetTime(long value) {
			this.setTime = value;
		}
		
		private long reduceTime;
		
		public long getReduceTime() {
			return reduceTime;
		}
		
		public void setReduceTime(long value) {
			this.reduceTime = value;
		}
		
		private long min;
		
		public long getMin() {
			return min;
		}
		
		public void setMin(long value) {
			this.min = value;
		}
		
		private long hr;
		
		public long getHr() {
			return hr;
		}
		
		public void setHr(long value) {
			this.hr = value;
		}
		
	}
	
	public static class Radio {
		private MusicPlayer parent;
		
		public Radio(MusicPlayer parent) {
			this.parent = parent;
		}
		private boolean lowerFreq;
		
		
		public void raiseLowerFreq() {
			parent.inEventQueue.add(() -> {
				lowerFreq = true;
			});
			parent.runCycle();
		}
		
		private boolean raiseFreq;
		
		
		public void raiseRaiseFreq() {
			parent.inEventQueue.add(() -> {
				raiseFreq = true;
			});
			parent.runCycle();
		}
		
		private double station;
		
		public double getStation() {
			return station;
		}
		
		public void setStation(double value) {
			this.station = value;
		}
		
		private boolean aM;
		
		public boolean getAM() {
			return aM;
		}
		
		public void setAM(boolean value) {
			this.aM = value;
		}
		
	}
	
	public static class ModePlay {
		private MusicPlayer parent;
		
		public ModePlay(MusicPlayer parent) {
			this.parent = parent;
		}
		private boolean volumeUp;
		
		
		public void raiseVolumeUp() {
			parent.inEventQueue.add(() -> {
				volumeUp = true;
			});
			parent.runCycle();
		}
		
		private boolean volumeDown;
		
		
		public void raiseVolumeDown() {
			parent.inEventQueue.add(() -> {
				volumeDown = true;
			});
			parent.runCycle();
		}
		
		private boolean play;
		
		
		public void raisePlay() {
			parent.inEventQueue.add(() -> {
				play = true;
			});
			parent.runCycle();
		}
		
		private boolean pause;
		
		
		public void raisePause() {
			parent.inEventQueue.add(() -> {
				pause = true;
			});
			parent.runCycle();
		}
		
		private boolean stop;
		
		
		public void raiseStop() {
			parent.inEventQueue.add(() -> {
				stop = true;
			});
			parent.runCycle();
		}
		
		private boolean next;
		
		
		public void raiseNext() {
			parent.inEventQueue.add(() -> {
				next = true;
			});
			parent.runCycle();
		}
		
		private boolean back;
		
		
		public void raiseBack() {
			parent.inEventQueue.add(() -> {
				back = true;
			});
			parent.runCycle();
		}
		
		private boolean skipForward;
		
		
		public void raiseSkipForward() {
			parent.inEventQueue.add(() -> {
				skipForward = true;
			});
			parent.runCycle();
		}
		
		private boolean skipBackwards;
		
		
		public void raiseSkipBackwards() {
			parent.inEventQueue.add(() -> {
				skipBackwards = true;
			});
			parent.runCycle();
		}
		
		private boolean a;
		
		public boolean getA() {
			return a;
		}
		
		public void setA(boolean value) {
			this.a = value;
		}
		
		private long volume;
		
		public long getVolume() {
			return volume;
		}
		
		public void setVolume(long value) {
			this.volume = value;
		}
		
		private long skipTime;
		
		public long getSkipTime() {
			return skipTime;
		}
		
		public void setSkipTime(long value) {
			this.skipTime = value;
		}
		
	}
	
	public static class USB {
		private long numOfSongs;
		
		public long getNumOfSongs() {
			return numOfSongs;
		}
		
		public void setNumOfSongs(long value) {
			this.numOfSongs = value;
		}
		
		private long curSong;
		
		public long getCurSong() {
			return curSong;
		}
		
		public void setCurSong(long value) {
			this.curSong = value;
		}
		
		private long songTime;
		
		public long getSongTime() {
			return songTime;
		}
		
		public void setSongTime(long value) {
			this.songTime = value;
		}
		
	}
	
	public static class Internet {
		private MusicPlayer parent;
		
		public Internet(MusicPlayer parent) {
			this.parent = parent;
		}
		private boolean login;
		
		
		public void raiseLogin() {
			parent.inEventQueue.add(() -> {
				login = true;
			});
			parent.runCycle();
		}
		
		private boolean logout;
		
		
		public void raiseLogout() {
			parent.inEventQueue.add(() -> {
				logout = true;
			});
			parent.runCycle();
		}
		
		private boolean connectWifi;
		
		
		public void raiseConnectWifi() {
			parent.inEventQueue.add(() -> {
				connectWifi = true;
			});
			parent.runCycle();
		}
		
		private boolean disconnectWifi;
		
		
		public void raiseDisconnectWifi() {
			parent.inEventQueue.add(() -> {
				disconnectWifi = true;
			});
			parent.runCycle();
		}
		
		private boolean loggedIn;
		
		public boolean getLoggedIn() {
			return loggedIn;
		}
		
		public void setLoggedIn(boolean value) {
			this.loggedIn = value;
		}
		
		private boolean connectedWifi;
		
		public boolean getConnectedWifi() {
			return connectedWifi;
		}
		
		public void setConnectedWifi(boolean value) {
			this.connectedWifi = value;
		}
		
	}
	
	public static class Network {
		private MusicPlayer parent;
		
		public Network(MusicPlayer parent) {
			this.parent = parent;
		}
		private boolean connectionMade;
		
		
		public void raiseConnectionMade() {
			parent.inEventQueue.add(() -> {
				connectionMade = true;
			});
			parent.runCycle();
		}
		
		private long numOfSongs;
		
		public long getNumOfSongs() {
			return numOfSongs;
		}
		
		public void setNumOfSongs(long value) {
			this.numOfSongs = value;
		}
		
		private long curSong;
		
		public long getCurSong() {
			return curSong;
		}
		
		public void setCurSong(long value) {
			this.curSong = value;
		}
		
		private long songTime;
		
		public long getSongTime() {
			return songTime;
		}
		
		public void setSongTime(long value) {
			this.songTime = value;
		}
		
	}
	
	protected Modes modes;
	
	protected Power power;
	
	protected Timer timer;
	
	protected Clock clock;
	
	protected Radio radio;
	
	protected ModePlay modePlay;
	
	protected USB uSB;
	
	protected Internet internet;
	
	protected Network network;
	
	public enum State {
		MAIN_REGION_SPEAKER,
		MAIN_REGION_SPEAKER_MODES_USB,
		MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY,
		MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT,
		MAIN_REGION_SPEAKER_MODES_USB_R1_PAUSE,
		MAIN_REGION_SPEAKER_MODES_USB_R1_STOP,
		MAIN_REGION_SPEAKER_MODES_AUX,
		MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX,
		MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY,
		MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER,
		MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN,
		MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING,
		MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH,
		MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY,
		MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_CHOOSETIMERORSTOPWATCH,
		MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK,
		MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE,
		MAIN_REGION_SPEAKER_MODES_NETWORK,
		MAIN_REGION_SPEAKER_MODES_NETWORK_R1_INITIAL,
		MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY,
		MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT,
		MAIN_REGION_SPEAKER_MODES_NETWORK_R1_STOP,
		MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE,
		MAIN_REGION_SPEAKER_MODES_RADIO,
		MAIN_REGION_SPEAKER_MODES_RADIO_R1_RADIO,
		MAIN_REGION_SPEAKER_MODES_CHANGESTATE,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R1_TTIMER,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_CHECKCLOCKTIME,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_RING,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R1_MODEPLAY,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_DISCONNECT,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_CONNECT,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGOUT,
		MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGIN,
		MAIN_REGION_POWEROFFSTATE,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[11];
	private final State[] stateVector = new State[6];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[12];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public MusicPlayer() {
		modes = new Modes(this);
		power = new Power(this);
		timer = new Timer();
		clock = new Clock(this);
		radio = new Radio(this);
		modePlay = new ModePlay(this);
		uSB = new USB();
		internet = new Internet(this);
		network = new Network(this);
		for (int i = 0; i < 6; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 11; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart musicPlayer */
		modes.setMode(1l);
		power.setBattery(100l);
		power.setConnectPower(false);
		timer.setSec(0l);
		clock.setHrGen(0l);
		clock.setMinGen(0l);
		clock.setStopwatchtime(0l);
		clock.setStop(true);
		clock.setSetTime(60l);
		clock.setReduceTime(clock.setTime);
		clock.setMin(0l);
		clock.setHr(0l);
		radio.setStation(0.0);
		radio.setAM(false);
		modePlay.setA(false);
		modePlay.setVolume(70l);
		modePlay.setSkipTime(5l);
		uSB.setNumOfSongs(10l);
		uSB.setCurSong(1l);
		uSB.setSongTime(0l);
		internet.setLoggedIn(false);
		internet.setConnectedWifi(false);
		network.setNumOfSongs(10l);
		network.setCurSong(1l);
		network.setSongTime(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart musicPlayer */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart musicPlayer */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateVector[2] = State.$NULLSTATE$;
		stateVector[3] = State.$NULLSTATE$;
		stateVector[4] = State.$NULLSTATE$;
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$||stateVector[4] != State.$NULLSTATE$||stateVector[5] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		myEvent = false;
		modes.changeMode = false;
		power.powerOff = false;
		power.powerOn = false;
		clock.chooseSW = false;
		clock.chooseTM = false;
		clock.clockDSP = false;
		clock.resetTimer = false;
		clock.clockSet = false;
		clock.stopAlarmClock = false;
		radio.lowerFreq = false;
		radio.raiseFreq = false;
		modePlay.volumeUp = false;
		modePlay.volumeDown = false;
		modePlay.play = false;
		modePlay.pause = false;
		modePlay.stop = false;
		modePlay.next = false;
		modePlay.back = false;
		modePlay.skipForward = false;
		modePlay.skipBackwards = false;
		internet.login = false;
		internet.logout = false;
		internet.connectWifi = false;
		internet.disconnectWifi = false;
		network.connectionMade = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
		timeEvents[8] = false;
		timeEvents[9] = false;
		timeEvents[10] = false;
		timeEvents[11] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT:
			transitioned = main_region_Speaker_modes_USB_r1_Play_r1_playDefault_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PAUSE:
			transitioned = main_region_Speaker_modes_USB_r1_Pause_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_STOP:
			transitioned = main_region_Speaker_modes_USB_r1_Stop_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX:
			transitioned = main_region_Speaker_modes_Aux_r1_aux_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN:
			transitioned = main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING:
			transitioned = main_region_Speaker_modes_Clock_Display_r1_Timer_r1_Ring_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY:
			transitioned = main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_CHOOSETIMERORSTOPWATCH:
			transitioned = main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE:
			transitioned = main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_INITIAL:
			transitioned = main_region_Speaker_modes_Network_r1_initial_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT:
			transitioned = main_region_Speaker_modes_Network_r1_play_r1_playDefault_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_STOP:
			transitioned = main_region_Speaker_modes_Network_r1_stop_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE:
			transitioned = main_region_Speaker_modes_Network_r1_pause_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_RADIO_R1_RADIO:
			transitioned = main_region_Speaker_modes_Radio_r1_radio_react(transitioned);
			break;
		case MAIN_REGION_SPEAKER_MODES_CHANGESTATE:
			transitioned = main_region_Speaker_modes_changeState_react(transitioned);
			break;
		case MAIN_REGION_POWEROFFSTATE:
			transitioned = main_region_powerOffState_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R1_TTIMER:
				transitioned = main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_CHECKCLOCKTIME:
				transitioned = main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime_react(transitioned);
				break;
			case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_RING:
				transitioned = main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R1_MODEPLAY:
				transitioned = main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<4l) {
			switch (stateVector[4]) {
			case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_DISCONNECT:
				transitioned = main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_disconnect_react(transitioned);
				break;
			case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_CONNECT:
				transitioned = main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_connect_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<5l) {
			switch (stateVector[5]) {
			case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGOUT:
				main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_LogOut_react(transitioned);
				break;
			case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGIN:
				main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_login_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_SPEAKER:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SPEAKER.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGIN.ordinal();
		case MAIN_REGION_SPEAKER_MODES_USB:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SPEAKER_MODES_USB.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SPEAKER_MODES_USB_R1_STOP.ordinal();
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT.ordinal();
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PAUSE:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_USB_R1_PAUSE;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_STOP:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_USB_R1_STOP;
		case MAIN_REGION_SPEAKER_MODES_AUX:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SPEAKER_MODES_AUX.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX.ordinal();
		case MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE.ordinal();
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING.ordinal();
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY.ordinal();
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_CHOOSETIMERORSTOPWATCH:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_CHOOSETIMERORSTOPWATCH;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE.ordinal();
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE;
		case MAIN_REGION_SPEAKER_MODES_NETWORK:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SPEAKER_MODES_NETWORK.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE.ordinal();
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_INITIAL:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_INITIAL;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT.ordinal();
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_STOP:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_STOP;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE;
		case MAIN_REGION_SPEAKER_MODES_RADIO:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SPEAKER_MODES_RADIO.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SPEAKER_MODES_RADIO_R1_RADIO.ordinal();
		case MAIN_REGION_SPEAKER_MODES_RADIO_R1_RADIO:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_RADIO_R1_RADIO;
		case MAIN_REGION_SPEAKER_MODES_CHANGESTATE:
			return stateVector[0] == State.MAIN_REGION_SPEAKER_MODES_CHANGESTATE;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGIN.ordinal();
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_RING.ordinal();
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R1_TTIMER:
			return stateVector[1] == State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R1_TTIMER;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_CHECKCLOCKTIME:
			return stateVector[2] == State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_CHECKCLOCKTIME;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_RING:
			return stateVector[2] == State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_RING;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY:
			return stateVector[3].ordinal() >= State.
					MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY.ordinal()&& stateVector[3].ordinal() <= State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGIN.ordinal();
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R1_MODEPLAY:
			return stateVector[3] == State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R1_MODEPLAY;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES:
			return stateVector[4].ordinal() >= State.
					MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES.ordinal()&& stateVector[4].ordinal() <= State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGIN.ordinal();
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_DISCONNECT:
			return stateVector[4] == State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_DISCONNECT;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_CONNECT:
			return stateVector[4] == State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_CONNECT;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGOUT:
			return stateVector[5] == State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGOUT;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGIN:
			return stateVector[5] == State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGIN;
		case MAIN_REGION_POWEROFFSTATE:
			return stateVector[0] == State.MAIN_REGION_POWEROFFSTATE;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Modes modes() {
		return modes;
	}
	
	public Power power() {
		return power;
	}
	
	public Timer timer() {
		return timer;
	}
	
	public Clock clock() {
		return clock;
	}
	
	public Radio radio() {
		return radio;
	}
	
	public ModePlay modePlay() {
		return modePlay;
	}
	
	public USB uSB() {
		return uSB;
	}
	
	public Internet internet() {
		return internet;
	}
	
	public Network network() {
		return network;
	}
	
	
	private boolean myEvent;
	
	
	public void raiseMyEvent() {
		inEventQueue.add(() -> {
			myEvent = true;
		});
		runCycle();
	}
	
	/* Entry action for state 'playDefault'. */
	private void entryAction_main_region_Speaker_modes_USB_r1_Play_r1_playDefault() {
		/* Entry action for state 'playDefault'. */
		timerService.setTimer(this, 0, (1l * 1000l), true);
	}
	
	/* Entry action for state 'timermain'. */
	private void entryAction_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain() {
		/* Entry action for state 'timermain'. */
		timerService.setTimer(this, 1, (1l * 1000l), true);
	}
	
	/* Entry action for state 'StopwatchDisplay'. */
	private void entryAction_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay() {
		/* Entry action for state 'StopwatchDisplay'. */
		timerService.setTimer(this, 2, (1l * 1000l), true);
	}
	
	/* Entry action for state 'chooseTimerOrStopwatch'. */
	private void entryAction_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch() {
		/* Entry action for state 'chooseTimerOrStopwatch'. */
		timerService.setTimer(this, 3, (1l * 1000l), true);
	}
	
	/* Entry action for state 'checkState'. */
	private void entryAction_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState() {
		/* Entry action for state 'checkState'. */
		timerService.setTimer(this, 4, (2l * 1000l), false);
	}
	
	/* Entry action for state 'play'. */
	private void entryAction_main_region_Speaker_modes_Network_r1_play() {
		/* Entry action for state 'play'. */
		timerService.setTimer(this, 5, (0l * 1000l), false);
	}
	
	/* Entry action for state 'playDefault'. */
	private void entryAction_main_region_Speaker_modes_Network_r1_play_r1_playDefault() {
		/* Entry action for state 'playDefault'. */
		timerService.setTimer(this, 6, (1l * 1000l), true);
	}
	
	/* Entry action for state 'changeState'. */
	private void entryAction_main_region_Speaker_modes_changeState() {
		/* Entry action for state 'changeState'. */
		timerService.setTimer(this, 7, (0l * 1000l), false);
	}
	
	/* Entry action for state 'Ttimer'. */
	private void entryAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer() {
		/* Entry action for state 'Ttimer'. */
		timerService.setTimer(this, 8, (1l * 1000l), true);
	}
	
	/* Entry action for state 'CheckClockTime'. */
	private void entryAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime() {
		/* Entry action for state 'CheckClockTime'. */
		timerService.setTimer(this, 9, (1l * 1000l), true);
	}
	
	/* Entry action for state 'Ring'. */
	private void entryAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring() {
		/* Entry action for state 'Ring'. */
		timerService.setTimer(this, 10, (30l * 1000l), false);
	}
	
	/* Entry action for state 'powerOffState'. */
	private void entryAction_main_region_powerOffState() {
		/* Entry action for state 'powerOffState'. */
		timerService.setTimer(this, 11, (1l * 1000l), true);
	}
	
	/* Exit action for state 'playDefault'. */
	private void exitAction_main_region_Speaker_modes_USB_r1_Play_r1_playDefault() {
		/* Exit action for state 'playDefault'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'timermain'. */
	private void exitAction_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain() {
		/* Exit action for state 'timermain'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'StopwatchDisplay'. */
	private void exitAction_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay() {
		/* Exit action for state 'StopwatchDisplay'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'chooseTimerOrStopwatch'. */
	private void exitAction_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch() {
		/* Exit action for state 'chooseTimerOrStopwatch'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'checkState'. */
	private void exitAction_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState() {
		/* Exit action for state 'checkState'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'play'. */
	private void exitAction_main_region_Speaker_modes_Network_r1_play() {
		/* Exit action for state 'play'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'playDefault'. */
	private void exitAction_main_region_Speaker_modes_Network_r1_play_r1_playDefault() {
		/* Exit action for state 'playDefault'. */
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'changeState'. */
	private void exitAction_main_region_Speaker_modes_changeState() {
		/* Exit action for state 'changeState'. */
		timerService.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'Ttimer'. */
	private void exitAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer() {
		/* Exit action for state 'Ttimer'. */
		timerService.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'CheckClockTime'. */
	private void exitAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime() {
		/* Exit action for state 'CheckClockTime'. */
		timerService.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'Ring'. */
	private void exitAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring() {
		/* Exit action for state 'Ring'. */
		timerService.unsetTimer(this, 10);
	}
	
	/* Exit action for state 'powerOffState'. */
	private void exitAction_main_region_powerOffState() {
		/* Exit action for state 'powerOffState'. */
		timerService.unsetTimer(this, 11);
	}
	
	/* 'default' enter sequence for state Speaker */
	private void enterSequence_main_region_Speaker_default() {
		/* 'default' enter sequence for state Speaker */
		enterSequence_main_region_Speaker_modes_default();
		enterSequence_main_region_Speaker_functions_default();
	}
	
	/* 'default' enter sequence for state USB */
	private void enterSequence_main_region_Speaker_modes_USB_default() {
		/* 'default' enter sequence for state USB */
		enterSequence_main_region_Speaker_modes_USB_r1_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Play */
	private void enterSequence_main_region_Speaker_modes_USB_r1_Play_default() {
		/* 'default' enter sequence for state Play */
		enterSequence_main_region_Speaker_modes_USB_r1_Play_r1_default();
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state playDefault */
	private void enterSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault_default() {
		/* 'default' enter sequence for state playDefault */
		entryAction_main_region_Speaker_modes_USB_r1_Play_r1_playDefault();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT;
		stateConfVectorPosition = 0;
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Pause */
	private void enterSequence_main_region_Speaker_modes_USB_r1_Pause_default() {
		/* 'default' enter sequence for state Pause */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_USB_R1_PAUSE;
		stateConfVectorPosition = 0;
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Stop */
	private void enterSequence_main_region_Speaker_modes_USB_r1_Stop_default() {
		/* 'default' enter sequence for state Stop */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_USB_R1_STOP;
		stateConfVectorPosition = 0;
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Aux */
	private void enterSequence_main_region_Speaker_modes_Aux_default() {
		/* 'default' enter sequence for state Aux */
		enterSequence_main_region_Speaker_modes_Aux_r1_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state aux */
	private void enterSequence_main_region_Speaker_modes_Aux_r1_aux_default() {
		/* 'default' enter sequence for state aux */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX;
		stateConfVectorPosition = 0;
		historyVector[3] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Clock Display */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_default() {
		/* 'default' enter sequence for state Clock Display */
		enterSequence_main_region_Speaker_modes_Clock_Display_r1_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Timer */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_default() {
		/* 'default' enter sequence for state Timer */
		enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_default();
		historyVector[4] = stateVector[0];
	}
	
	/* 'default' enter sequence for state timermain */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain_default() {
		/* 'default' enter sequence for state timermain */
		entryAction_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN;
		stateConfVectorPosition = 0;
		historyVector[5] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Ring */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_Ring_default() {
		/* 'default' enter sequence for state Ring */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING;
		stateConfVectorPosition = 0;
		historyVector[5] = stateVector[0];
	}
	
	/* 'default' enter sequence for state stopwatch */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_default() {
		/* 'default' enter sequence for state stopwatch */
		enterSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_default();
		historyVector[4] = stateVector[0];
	}
	
	/* 'default' enter sequence for state StopwatchDisplay */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay_default() {
		/* 'default' enter sequence for state StopwatchDisplay */
		entryAction_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY;
		stateConfVectorPosition = 0;
		historyVector[6] = stateVector[0];
	}
	
	/* 'default' enter sequence for state chooseTimerOrStopwatch */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch_default() {
		/* 'default' enter sequence for state chooseTimerOrStopwatch */
		entryAction_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_CHOOSETIMERORSTOPWATCH;
		stateConfVectorPosition = 0;
		historyVector[4] = stateVector[0];
	}
	
	/* 'default' enter sequence for state SetAlarmClock */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_default() {
		/* 'default' enter sequence for state SetAlarmClock */
		enterSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_default();
		historyVector[4] = stateVector[0];
	}
	
	/* 'default' enter sequence for state checkState */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState_default() {
		/* 'default' enter sequence for state checkState */
		entryAction_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE;
		stateConfVectorPosition = 0;
		historyVector[7] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Network */
	private void enterSequence_main_region_Speaker_modes_Network_default() {
		/* 'default' enter sequence for state Network */
		enterSequence_main_region_Speaker_modes_Network_r1_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state initial */
	private void enterSequence_main_region_Speaker_modes_Network_r1_initial_default() {
		/* 'default' enter sequence for state initial */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_INITIAL;
		stateConfVectorPosition = 0;
		historyVector[8] = stateVector[0];
	}
	
	/* 'default' enter sequence for state play */
	private void enterSequence_main_region_Speaker_modes_Network_r1_play_default() {
		/* 'default' enter sequence for state play */
		entryAction_main_region_Speaker_modes_Network_r1_play();
		enterSequence_main_region_Speaker_modes_Network_r1_play_r1_default();
		historyVector[8] = stateVector[0];
	}
	
	/* 'default' enter sequence for state playDefault */
	private void enterSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault_default() {
		/* 'default' enter sequence for state playDefault */
		entryAction_main_region_Speaker_modes_Network_r1_play_r1_playDefault();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT;
		stateConfVectorPosition = 0;
		historyVector[9] = stateVector[0];
	}
	
	/* 'default' enter sequence for state stop */
	private void enterSequence_main_region_Speaker_modes_Network_r1_stop_default() {
		/* 'default' enter sequence for state stop */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_STOP;
		stateConfVectorPosition = 0;
		historyVector[8] = stateVector[0];
	}
	
	/* 'default' enter sequence for state pause */
	private void enterSequence_main_region_Speaker_modes_Network_r1_pause_default() {
		/* 'default' enter sequence for state pause */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE;
		stateConfVectorPosition = 0;
		historyVector[8] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Radio */
	private void enterSequence_main_region_Speaker_modes_Radio_default() {
		/* 'default' enter sequence for state Radio */
		enterSequence_main_region_Speaker_modes_Radio_r1_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state radio */
	private void enterSequence_main_region_Speaker_modes_Radio_r1_radio_default() {
		/* 'default' enter sequence for state radio */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_RADIO_R1_RADIO;
		stateConfVectorPosition = 0;
		historyVector[10] = stateVector[0];
	}
	
	/* 'default' enter sequence for state changeState */
	private void enterSequence_main_region_Speaker_modes_changeState_default() {
		/* 'default' enter sequence for state changeState */
		entryAction_main_region_Speaker_modes_changeState();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CHANGESTATE;
		stateConfVectorPosition = 0;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state functions */
	private void enterSequence_main_region_Speaker_functions_functions_default() {
		/* 'default' enter sequence for state functions */
		enterSequence_main_region_Speaker_functions_functions_timer_default();
		enterSequence_main_region_Speaker_functions_functions_r2_default();
	}
	
	/* 'default' enter sequence for state Timer&Clcok */
	private void enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_default() {
		/* 'default' enter sequence for state Timer&Clcok */
		enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_default();
		enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_default();
	}
	
	/* 'default' enter sequence for state Ttimer */
	private void enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer_default() {
		/* 'default' enter sequence for state Ttimer */
		entryAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer();
		stateVector[1] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R1_TTIMER;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state CheckClockTime */
	private void enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime_default() {
		/* 'default' enter sequence for state CheckClockTime */
		entryAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime();
		stateVector[2] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_CHECKCLOCKTIME;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state Ring */
	private void enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring_default() {
		/* 'default' enter sequence for state Ring */
		entryAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring();
		stateVector[2] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_RING;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state network modePlay */
	private void enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_default() {
		/* 'default' enter sequence for state network modePlay */
		enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_default();
		enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_default();
	}
	
	/* 'default' enter sequence for state modePlay */
	private void enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default() {
		/* 'default' enter sequence for state modePlay */
		stateVector[3] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R1_MODEPLAY;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state internetStates */
	private void enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_default() {
		/* 'default' enter sequence for state internetStates */
		enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_default();
		enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_default();
	}
	
	/* 'default' enter sequence for state disconnect */
	private void enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_disconnect_default() {
		/* 'default' enter sequence for state disconnect */
		stateVector[4] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_DISCONNECT;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state connect */
	private void enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_connect_default() {
		/* 'default' enter sequence for state connect */
		stateVector[4] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_CONNECT;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state LogOut */
	private void enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_LogOut_default() {
		/* 'default' enter sequence for state LogOut */
		stateVector[5] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGOUT;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state login */
	private void enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_login_default() {
		/* 'default' enter sequence for state login */
		stateVector[5] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGIN;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state powerOffState */
	private void enterSequence_main_region_powerOffState_default() {
		/* 'default' enter sequence for state powerOffState */
		entryAction_main_region_powerOffState();
		stateVector[0] = State.MAIN_REGION_POWEROFFSTATE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region modes */
	private void enterSequence_main_region_Speaker_modes_default() {
		/* 'default' enter sequence for region modes */
		react_main_region_Speaker_modes__entry_Default();
	}
	
	/* deep enterSequence with history in child modes */
	private void deepEnterSequence_main_region_Speaker_modes() {
		/* deep enterSequence with history in child modes */
		switch (historyVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT:
			/* enterSequence with history in child USB for leaf playDefault */
			deepEnterSequence_main_region_Speaker_modes_USB_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PAUSE:
			/* enterSequence with history in child USB for leaf Pause */
			deepEnterSequence_main_region_Speaker_modes_USB_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_STOP:
			/* enterSequence with history in child USB for leaf Stop */
			deepEnterSequence_main_region_Speaker_modes_USB_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX:
			/* enterSequence with history in child Aux for leaf aux */
			deepEnterSequence_main_region_Speaker_modes_Aux_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN:
			/* enterSequence with history in child Clock Display for leaf timermain */
			deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING:
			/* enterSequence with history in child Clock Display for leaf Ring */
			deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY:
			/* enterSequence with history in child Clock Display for leaf StopwatchDisplay */
			deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_CHOOSETIMERORSTOPWATCH:
			/* enterSequence with history in child Clock Display for leaf chooseTimerOrStopwatch */
			deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE:
			/* enterSequence with history in child Clock Display for leaf checkState */
			deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_INITIAL:
			/* enterSequence with history in child Network for leaf initial */
			deepEnterSequence_main_region_Speaker_modes_Network_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT:
			/* enterSequence with history in child Network for leaf playDefault */
			deepEnterSequence_main_region_Speaker_modes_Network_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_STOP:
			/* enterSequence with history in child Network for leaf stop */
			deepEnterSequence_main_region_Speaker_modes_Network_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE:
			/* enterSequence with history in child Network for leaf pause */
			deepEnterSequence_main_region_Speaker_modes_Network_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_RADIO_R1_RADIO:
			/* enterSequence with history in child Radio for leaf radio */
			deepEnterSequence_main_region_Speaker_modes_Radio_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_CHANGESTATE:
			/* enterSequence with history in child changeState for leaf changeState */
			enterSequence_main_region_Speaker_modes_changeState_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_modes_USB_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_modes_USB_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Speaker_modes_USB_r1() {
		/* deep enterSequence with history in child r1 */
		switch (historyVector[1]) {
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT:
			/* enterSequence with history in child Play for leaf playDefault */
			deepEnterSequence_main_region_Speaker_modes_USB_r1_Play_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PAUSE:
			/* enterSequence with history in child Pause for leaf Pause */
			enterSequence_main_region_Speaker_modes_USB_r1_Pause_default();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_STOP:
			/* enterSequence with history in child Stop for leaf Stop */
			enterSequence_main_region_Speaker_modes_USB_r1_Stop_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_modes_USB_r1_Play_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_modes_USB_r1_Play_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Speaker_modes_USB_r1_Play_r1() {
		/* deep enterSequence with history in child r1 */
		switch (historyVector[2]) {
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT:
			/* enterSequence with history in child playDefault for leaf playDefault */
			enterSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_modes_Aux_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_modes_Aux_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Speaker_modes_Aux_r1() {
		/* deep enterSequence with history in child r1 */
		switch (historyVector[3]) {
		case MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX:
			/* enterSequence with history in child aux for leaf aux */
			enterSequence_main_region_Speaker_modes_Aux_r1_aux_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_modes_Clock_Display_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1() {
		/* deep enterSequence with history in child r1 */
		switch (historyVector[4]) {
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN:
			/* enterSequence with history in child Timer for leaf timermain */
			deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING:
			/* enterSequence with history in child Timer for leaf Ring */
			deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY:
			/* enterSequence with history in child stopwatch for leaf StopwatchDisplay */
			deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_CHOOSETIMERORSTOPWATCH:
			/* enterSequence with history in child chooseTimerOrStopwatch for leaf chooseTimerOrStopwatch */
			enterSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch_default();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE:
			/* enterSequence with history in child SetAlarmClock for leaf checkState */
			deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_modes_Clock_Display_r1_Timer_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1() {
		/* deep enterSequence with history in child r1 */
		switch (historyVector[5]) {
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN:
			/* enterSequence with history in child timermain for leaf timermain */
			enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain_default();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING:
			/* enterSequence with history in child Ring for leaf Ring */
			enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_Ring_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1() {
		/* deep enterSequence with history in child r1 */
		switch (historyVector[6]) {
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY:
			/* enterSequence with history in child StopwatchDisplay for leaf StopwatchDisplay */
			enterSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1() {
		/* deep enterSequence with history in child r1 */
		switch (historyVector[7]) {
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE:
			/* enterSequence with history in child checkState for leaf checkState */
			enterSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_modes_Network_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_modes_Network_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Speaker_modes_Network_r1() {
		/* deep enterSequence with history in child r1 */
		switch (historyVector[8]) {
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_INITIAL:
			/* enterSequence with history in child initial for leaf initial */
			enterSequence_main_region_Speaker_modes_Network_r1_initial_default();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT:
			/* enterSequence with history in child play for leaf playDefault */
			entryAction_main_region_Speaker_modes_Network_r1_play();
			deepEnterSequence_main_region_Speaker_modes_Network_r1_play_r1();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_STOP:
			/* enterSequence with history in child stop for leaf stop */
			enterSequence_main_region_Speaker_modes_Network_r1_stop_default();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE:
			/* enterSequence with history in child pause for leaf pause */
			enterSequence_main_region_Speaker_modes_Network_r1_pause_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_modes_Network_r1_play_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_modes_Network_r1_play_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Speaker_modes_Network_r1_play_r1() {
		/* deep enterSequence with history in child r1 */
		switch (historyVector[9]) {
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT:
			/* enterSequence with history in child playDefault for leaf playDefault */
			enterSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_modes_Radio_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_modes_Radio_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Speaker_modes_Radio_r1() {
		/* deep enterSequence with history in child r1 */
		switch (historyVector[10]) {
		case MAIN_REGION_SPEAKER_MODES_RADIO_R1_RADIO:
			/* enterSequence with history in child radio for leaf radio */
			enterSequence_main_region_Speaker_modes_Radio_r1_radio_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region functions */
	private void enterSequence_main_region_Speaker_functions_default() {
		/* 'default' enter sequence for region functions */
		react_main_region_Speaker_functions__entry_Default();
	}
	
	/* 'default' enter sequence for region timer */
	private void enterSequence_main_region_Speaker_functions_functions_timer_default() {
		/* 'default' enter sequence for region timer */
		react_main_region_Speaker_functions_functions_timer__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_default() {
		/* 'default' enter sequence for region r2 */
		react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Speaker_functions_functions_r2_default() {
		/* 'default' enter sequence for region r2 */
		react_main_region_Speaker_functions_functions_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_default() {
		/* 'default' enter sequence for region r2 */
		react_main_region_Speaker_functions_functions_r2_network_modePlay_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region Wifi */
	private void enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_default() {
		/* 'default' enter sequence for region Wifi */
		react_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi__entry_Default();
	}
	
	/* 'default' enter sequence for region loginLogout */
	private void enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_default() {
		/* 'default' enter sequence for region loginLogout */
		react_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout__entry_Default();
	}
	
	/* Default exit sequence for state Speaker */
	private void exitSequence_main_region_Speaker() {
		/* Default exit sequence for state Speaker */
		exitSequence_main_region_Speaker_modes();
		exitSequence_main_region_Speaker_functions();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateVector[2] = State.$NULLSTATE$;
		stateVector[3] = State.$NULLSTATE$;
		stateVector[4] = State.$NULLSTATE$;
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
	}
	
	/* Default exit sequence for state USB */
	private void exitSequence_main_region_Speaker_modes_USB() {
		/* Default exit sequence for state USB */
		exitSequence_main_region_Speaker_modes_USB_r1();
		stateVector[0] = State.MAIN_REGION_SPEAKER;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Play */
	private void exitSequence_main_region_Speaker_modes_USB_r1_Play() {
		/* Default exit sequence for state Play */
		exitSequence_main_region_Speaker_modes_USB_r1_Play_r1();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_USB;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state playDefault */
	private void exitSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault() {
		/* Default exit sequence for state playDefault */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY;
		stateConfVectorPosition = 0;
		exitAction_main_region_Speaker_modes_USB_r1_Play_r1_playDefault();
	}
	
	/* Default exit sequence for state Pause */
	private void exitSequence_main_region_Speaker_modes_USB_r1_Pause() {
		/* Default exit sequence for state Pause */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_USB;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Stop */
	private void exitSequence_main_region_Speaker_modes_USB_r1_Stop() {
		/* Default exit sequence for state Stop */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_USB;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Aux */
	private void exitSequence_main_region_Speaker_modes_Aux() {
		/* Default exit sequence for state Aux */
		exitSequence_main_region_Speaker_modes_Aux_r1();
		stateVector[0] = State.MAIN_REGION_SPEAKER;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state aux */
	private void exitSequence_main_region_Speaker_modes_Aux_r1_aux() {
		/* Default exit sequence for state aux */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_AUX;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Clock Display */
	private void exitSequence_main_region_Speaker_modes_Clock_Display() {
		/* Default exit sequence for state Clock Display */
		exitSequence_main_region_Speaker_modes_Clock_Display_r1();
		stateVector[0] = State.MAIN_REGION_SPEAKER;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Timer */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer() {
		/* Default exit sequence for state Timer */
		exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state timermain */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain() {
		/* Default exit sequence for state timermain */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER;
		stateConfVectorPosition = 0;
		exitAction_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain();
	}
	
	/* Default exit sequence for state Ring */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_Ring() {
		/* Default exit sequence for state Ring */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state stopwatch */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch() {
		/* Default exit sequence for state stopwatch */
		exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state StopwatchDisplay */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay() {
		/* Default exit sequence for state StopwatchDisplay */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH;
		stateConfVectorPosition = 0;
		exitAction_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay();
	}
	
	/* Default exit sequence for state chooseTimerOrStopwatch */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch() {
		/* Default exit sequence for state chooseTimerOrStopwatch */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY;
		stateConfVectorPosition = 0;
		exitAction_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch();
	}
	
	/* Default exit sequence for state SetAlarmClock */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock() {
		/* Default exit sequence for state SetAlarmClock */
		exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state checkState */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState() {
		/* Default exit sequence for state checkState */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK;
		stateConfVectorPosition = 0;
		exitAction_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState();
	}
	
	/* Default exit sequence for state Network */
	private void exitSequence_main_region_Speaker_modes_Network() {
		/* Default exit sequence for state Network */
		exitSequence_main_region_Speaker_modes_Network_r1();
		stateVector[0] = State.MAIN_REGION_SPEAKER;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state initial */
	private void exitSequence_main_region_Speaker_modes_Network_r1_initial() {
		/* Default exit sequence for state initial */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_NETWORK;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state play */
	private void exitSequence_main_region_Speaker_modes_Network_r1_play() {
		/* Default exit sequence for state play */
		exitSequence_main_region_Speaker_modes_Network_r1_play_r1();
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_NETWORK;
		stateConfVectorPosition = 0;
		exitAction_main_region_Speaker_modes_Network_r1_play();
	}
	
	/* Default exit sequence for state playDefault */
	private void exitSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault() {
		/* Default exit sequence for state playDefault */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY;
		stateConfVectorPosition = 0;
		exitAction_main_region_Speaker_modes_Network_r1_play_r1_playDefault();
	}
	
	/* Default exit sequence for state stop */
	private void exitSequence_main_region_Speaker_modes_Network_r1_stop() {
		/* Default exit sequence for state stop */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_NETWORK;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state pause */
	private void exitSequence_main_region_Speaker_modes_Network_r1_pause() {
		/* Default exit sequence for state pause */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_NETWORK;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Radio */
	private void exitSequence_main_region_Speaker_modes_Radio() {
		/* Default exit sequence for state Radio */
		exitSequence_main_region_Speaker_modes_Radio_r1();
		stateVector[0] = State.MAIN_REGION_SPEAKER;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state radio */
	private void exitSequence_main_region_Speaker_modes_Radio_r1_radio() {
		/* Default exit sequence for state radio */
		stateVector[0] = State.MAIN_REGION_SPEAKER_MODES_RADIO;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state changeState */
	private void exitSequence_main_region_Speaker_modes_changeState() {
		/* Default exit sequence for state changeState */
		stateVector[0] = State.MAIN_REGION_SPEAKER;
		stateConfVectorPosition = 0;
		exitAction_main_region_Speaker_modes_changeState();
	}
	
	/* Default exit sequence for state Ttimer */
	private void exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer() {
		/* Default exit sequence for state Ttimer */
		stateVector[1] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK;
		stateConfVectorPosition = 1;
		exitAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer();
	}
	
	/* Default exit sequence for state CheckClockTime */
	private void exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime() {
		/* Default exit sequence for state CheckClockTime */
		stateVector[2] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK;
		stateConfVectorPosition = 2;
		exitAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime();
	}
	
	/* Default exit sequence for state Ring */
	private void exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring() {
		/* Default exit sequence for state Ring */
		stateVector[2] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK;
		stateConfVectorPosition = 2;
		exitAction_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring();
	}
	
	/* Default exit sequence for state modePlay */
	private void exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay() {
		/* Default exit sequence for state modePlay */
		stateVector[3] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state disconnect */
	private void exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_disconnect() {
		/* Default exit sequence for state disconnect */
		stateVector[4] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state connect */
	private void exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_connect() {
		/* Default exit sequence for state connect */
		stateVector[4] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state LogOut */
	private void exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_LogOut() {
		/* Default exit sequence for state LogOut */
		stateVector[5] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES;
		stateConfVectorPosition = 5;
	}
	
	/* Default exit sequence for state login */
	private void exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_login() {
		/* Default exit sequence for state login */
		stateVector[5] = State.MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES;
		stateConfVectorPosition = 5;
	}
	
	/* Default exit sequence for state powerOffState */
	private void exitSequence_main_region_powerOffState() {
		/* Default exit sequence for state powerOffState */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_main_region_powerOffState();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_USB:
			exitSequence_main_region_Speaker_modes_USB();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY:
			exitSequence_main_region_Speaker_modes_USB_r1_Play();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT:
			exitSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PAUSE:
			exitSequence_main_region_Speaker_modes_USB_r1_Pause();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_STOP:
			exitSequence_main_region_Speaker_modes_USB_r1_Stop();
			break;
		case MAIN_REGION_SPEAKER_MODES_AUX:
			exitSequence_main_region_Speaker_modes_Aux();
			break;
		case MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX:
			exitSequence_main_region_Speaker_modes_Aux_r1_aux();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY:
			exitSequence_main_region_Speaker_modes_Clock_Display();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_Ring();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_CHOOSETIMERORSTOPWATCH:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK:
			exitSequence_main_region_Speaker_modes_Network();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_INITIAL:
			exitSequence_main_region_Speaker_modes_Network_r1_initial();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY:
			exitSequence_main_region_Speaker_modes_Network_r1_play();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT:
			exitSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault();
			exitAction_main_region_Speaker_modes_Network_r1_play();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_STOP:
			exitSequence_main_region_Speaker_modes_Network_r1_stop();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE:
			exitSequence_main_region_Speaker_modes_Network_r1_pause();
			break;
		case MAIN_REGION_SPEAKER_MODES_RADIO:
			exitSequence_main_region_Speaker_modes_Radio();
			break;
		case MAIN_REGION_SPEAKER_MODES_RADIO_R1_RADIO:
			exitSequence_main_region_Speaker_modes_Radio_r1_radio();
			break;
		case MAIN_REGION_SPEAKER_MODES_CHANGESTATE:
			exitSequence_main_region_Speaker_modes_changeState();
			break;
		case MAIN_REGION_POWEROFFSTATE:
			exitSequence_main_region_powerOffState();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R1_TTIMER:
			exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer();
			break;
		default:
			break;
		}
		switch (stateVector[2]) {
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_CHECKCLOCKTIME:
			exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime();
			break;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_RING:
			exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring();
			break;
		default:
			break;
		}
		switch (stateVector[3]) {
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R1_MODEPLAY:
			exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay();
			break;
		default:
			break;
		}
		switch (stateVector[4]) {
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_DISCONNECT:
			exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_disconnect();
			break;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_CONNECT:
			exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_connect();
			break;
		default:
			break;
		}
		switch (stateVector[5]) {
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGOUT:
			exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_LogOut();
			break;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGIN:
			exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_login();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region modes */
	private void exitSequence_main_region_Speaker_modes() {
		/* Default exit sequence for region modes */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_USB:
			exitSequence_main_region_Speaker_modes_USB();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY:
			exitSequence_main_region_Speaker_modes_USB_r1_Play();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT:
			exitSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PAUSE:
			exitSequence_main_region_Speaker_modes_USB_r1_Pause();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_STOP:
			exitSequence_main_region_Speaker_modes_USB_r1_Stop();
			break;
		case MAIN_REGION_SPEAKER_MODES_AUX:
			exitSequence_main_region_Speaker_modes_Aux();
			break;
		case MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX:
			exitSequence_main_region_Speaker_modes_Aux_r1_aux();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY:
			exitSequence_main_region_Speaker_modes_Clock_Display();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_Ring();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_CHOOSETIMERORSTOPWATCH:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK:
			exitSequence_main_region_Speaker_modes_Network();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_INITIAL:
			exitSequence_main_region_Speaker_modes_Network_r1_initial();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY:
			exitSequence_main_region_Speaker_modes_Network_r1_play();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT:
			exitSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault();
			exitAction_main_region_Speaker_modes_Network_r1_play();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_STOP:
			exitSequence_main_region_Speaker_modes_Network_r1_stop();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE:
			exitSequence_main_region_Speaker_modes_Network_r1_pause();
			break;
		case MAIN_REGION_SPEAKER_MODES_RADIO:
			exitSequence_main_region_Speaker_modes_Radio();
			break;
		case MAIN_REGION_SPEAKER_MODES_RADIO_R1_RADIO:
			exitSequence_main_region_Speaker_modes_Radio_r1_radio();
			break;
		case MAIN_REGION_SPEAKER_MODES_CHANGESTATE:
			exitSequence_main_region_Speaker_modes_changeState();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Speaker_modes_USB_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY:
			exitSequence_main_region_Speaker_modes_USB_r1_Play();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT:
			exitSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PAUSE:
			exitSequence_main_region_Speaker_modes_USB_r1_Pause();
			break;
		case MAIN_REGION_SPEAKER_MODES_USB_R1_STOP:
			exitSequence_main_region_Speaker_modes_USB_r1_Stop();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Speaker_modes_USB_r1_Play_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_USB_R1_PLAY_R1_PLAYDEFAULT:
			exitSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Speaker_modes_Aux_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_AUX_R1_AUX:
			exitSequence_main_region_Speaker_modes_Aux_r1_aux();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_Ring();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_CHOOSETIMERORSTOPWATCH:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_TIMERMAIN:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain();
			break;
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_TIMER_R1_RING:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_Ring();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_STOPWATCH_R1_STOPWATCHDISPLAY:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_CLOCK_DISPLAY_R1_SETALARMCLOCK_R1_CHECKSTATE:
			exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Speaker_modes_Network_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_INITIAL:
			exitSequence_main_region_Speaker_modes_Network_r1_initial();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY:
			exitSequence_main_region_Speaker_modes_Network_r1_play();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT:
			exitSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault();
			exitAction_main_region_Speaker_modes_Network_r1_play();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_STOP:
			exitSequence_main_region_Speaker_modes_Network_r1_stop();
			break;
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PAUSE:
			exitSequence_main_region_Speaker_modes_Network_r1_pause();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Speaker_modes_Network_r1_play_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_NETWORK_R1_PLAY_R1_PLAYDEFAULT:
			exitSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Speaker_modes_Radio_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_SPEAKER_MODES_RADIO_R1_RADIO:
			exitSequence_main_region_Speaker_modes_Radio_r1_radio();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region functions */
	private void exitSequence_main_region_Speaker_functions() {
		/* Default exit sequence for region functions */
		switch (stateVector[1]) {
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R1_TTIMER:
			exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer();
			break;
		default:
			break;
		}
		switch (stateVector[2]) {
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_CHECKCLOCKTIME:
			exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime();
			break;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_TIMER_TIMER_CLCOK_R2_RING:
			exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring();
			break;
		default:
			break;
		}
		switch (stateVector[3]) {
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R1_MODEPLAY:
			exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay();
			break;
		default:
			break;
		}
		switch (stateVector[4]) {
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_DISCONNECT:
			exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_disconnect();
			break;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_WIFI_CONNECT:
			exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_connect();
			break;
		default:
			break;
		}
		switch (stateVector[5]) {
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGOUT:
			exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_LogOut();
			break;
		case MAIN_REGION_SPEAKER_FUNCTIONS_FUNCTIONS_R2_NETWORK_MODEPLAY_R2_INTERNETSTATES_LOGINLOGOUT_LOGIN:
			exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_login();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_modes_USB_r1_Play_r1__choice_0() {
		/* The reactions of state null. */
		if ((uSB.getSongTime()>=200l || uSB.getSongTime()<0l)) {
			uSB.setSongTime(0l);
			uSB.setCurSong((((uSB.curSong + 1l)) % uSB.numOfSongs));
			enterSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault_default();
		} else {
			uSB.songTime++;
			enterSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_modes_USB_r1_Play_r1__choice_1() {
		/* The reactions of state null. */
		if (uSB.getCurSong()==0l) {
			uSB.setCurSong((uSB.numOfSongs - 1l));
			enterSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault_default();
		} else {
			uSB.curSong--;
			enterSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_modes_Clock_Display_r1_Timer_r1__choice_0() {
		/* The reactions of state null. */
		if (clock.getReduceTime()==0l) {
			enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_Ring_default();
		} else {
			enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_modes_Network_r1_play_r1__choice_0() {
		/* The reactions of state null. */
		if ((network.getSongTime()>=200l || network.getSongTime()<0l)) {
			network.setSongTime(0l);
			network.setCurSong((((network.curSong + 1l)) % network.numOfSongs));
			enterSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault_default();
		} else {
			enterSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_modes_Network_r1_play_r1__choice_1() {
		/* The reactions of state null. */
		if (network.getCurSong()==0l) {
			network.setCurSong((network.numOfSongs - 1l));
			enterSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault_default();
		} else {
			network.curSong--;
			enterSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_modes_Radio_r1__choice_0() {
		/* The reactions of state null. */
		if (radio.getStation()==108l) {
			radio.setStation(88l);
			enterSequence_main_region_Speaker_modes_Radio_r1_radio_default();
		} else {
			radio.setStation(radio.getStation() + 0.05);
			enterSequence_main_region_Speaker_modes_Radio_r1_radio_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_modes_Radio_r1__choice_1() {
		/* The reactions of state null. */
		if (radio.getStation()==88l) {
			radio.setStation(108l);
			enterSequence_main_region_Speaker_modes_Radio_r1_radio_default();
		} else {
			radio.setStation(radio.getStation() - 0.05);
			enterSequence_main_region_Speaker_modes_Radio_r1_radio_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_modes__choice_0() {
		/* The reactions of state null. */
		if (modes.getMode()==2l) {
			enterSequence_main_region_Speaker_modes_Radio_default();
		} else {
			if (modes.getMode()==4l) {
				enterSequence_main_region_Speaker_modes_Aux_default();
			} else {
				if (modes.getMode()==5l) {
					enterSequence_main_region_Speaker_modes_Network_default();
				} else {
					if (modes.getMode()==3l) {
						enterSequence_main_region_Speaker_modes_USB_default();
					} else {
						enterSequence_main_region_Speaker_modes_Clock_Display_default();
					}
				}
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1__choice_0() {
		/* The reactions of state null. */
		if ((power.getBattery()<100l && (timer.getSec() % 60l)==0l)) {
			power.battery++;
			enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer_default();
		} else {
			enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1__choice_1() {
		/* The reactions of state null. */
		if (power.getBattery()==1l) {
			power.setBattery(0l);
			power.raisePowerOff();
			enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer_default();
		} else {
			power.battery--;
			enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1__choice_2() {
		/* The reactions of state null. */
		if (power.getConnectPower()) {
			react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1__choice_0();
		} else {
			if ((!(power.getConnectPower()) && (timer.getSec() % 60l)==0l)) {
				react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1__choice_1();
			} else {
				enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer_default();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2__choice_0() {
		/* The reactions of state null. */
		if (((timer.getSec() % 60l)==clock.getMin() && (((timer.getSec() / 3600l)) % 24l)==clock.getHr())) {
			enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring_default();
		} else {
			enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_0() {
		/* The reactions of state null. */
		if ((modes.getMode()==5l && internet.getLoggedIn())) {
			react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_4();
		} else {
			if (modes.getMode()==3l) {
				react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_5();
			} else {
				enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_1() {
		/* The reactions of state null. */
		if (modes.getMode()==3l) {
			react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_2();
		} else {
			if ((modes.getMode()==5l && internet.getLoggedIn())) {
				react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_3();
			} else {
				enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_2() {
		/* The reactions of state null. */
		if ((uSB.getSongTime() - modePlay.getSkipTime())>0l) {
			uSB.setSongTime((uSB.songTime - modePlay.skipTime));
			enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
		} else {
			uSB.setSongTime(0l);
			enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_3() {
		/* The reactions of state null. */
		if ((network.getSongTime() - modePlay.getSkipTime())>0l) {
			network.setSongTime((network.songTime - modePlay.skipTime));
			enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
		} else {
			network.setSongTime(0l);
			enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_4() {
		/* The reactions of state null. */
		if ((network.getSongTime() + modePlay.getSkipTime())<200l) {
			network.setSongTime((network.songTime + modePlay.skipTime));
			enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
		} else {
			network.setSongTime(0l);
			network.setCurSong((((network.curSong + 1l)) % network.numOfSongs));
			enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_5() {
		/* The reactions of state null. */
		if ((uSB.getSongTime() + modePlay.getSkipTime())<200l) {
			uSB.setSongTime((uSB.songTime + modePlay.skipTime));
			enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
		} else {
			uSB.setSongTime(0l);
			uSB.setCurSong((((uSB.curSong + 1l)) % uSB.numOfSongs));
			enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi__choice_0() {
		/* The reactions of state null. */
		internet.setConnectedWifi(false);
		internet.raiseLogout();
		enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_disconnect_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout__choice_0() {
		/* The reactions of state null. */
		internet.setLoggedIn(false);
		enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_LogOut_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_modes_USB_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_modes_USB_r1_Play_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_modes_USB_r1_Play_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_modes_Aux_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_modes_Aux_r1_aux_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_modes_Clock_Display_r1_Timer_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_modes_Clock_Display_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_modes_Network_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_modes_Network_r1_initial_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_modes_Network_r1_play_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_modes__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_modes_Clock_Display_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_modes_Radio_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_modes_Radio_r1_radio_default();
	}
	
	/* Default react sequence for deep history entry returnFromPower */
	private void react_main_region_Speaker_modes_returnFromPower() {
		/* Default react sequence for deep history entry returnFromPower */
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NULLSTATE$) {
			deepEnterSequence_main_region_Speaker_modes();
		} else {
			enterSequence_main_region_Speaker_modes_Clock_Display_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_functions_functions_timer__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_disconnect_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_LogOut_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_functions_functions_r2_network_modePlay_r2__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_functions_functions_r2__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Speaker_functions__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Speaker_functions_functions_default();
	}
	
	private long main_region_Speaker_react(long transitioned_before) {
		/* The reactions of state Speaker. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (power.powerOff) {
				exitSequence_main_region_Speaker();
				enterSequence_main_region_powerOffState_default();
				transitioned_after = 5l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_USB_react(long transitioned_before) {
		/* The reactions of state USB. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (modes.changeMode) {
				exitSequence_main_region_Speaker_modes_USB();
				enterSequence_main_region_Speaker_modes_changeState_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_USB_r1_Play_react(long transitioned_before) {
		/* The reactions of state Play. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (modePlay.pause) {
				exitSequence_main_region_Speaker_modes_USB_r1_Play();
				enterSequence_main_region_Speaker_modes_USB_r1_Pause_default();
				main_region_Speaker_modes_USB_react(0l);
				transitioned_after = 0l;
			} else {
				if (modePlay.stop) {
					exitSequence_main_region_Speaker_modes_USB_r1_Play();
					uSB.setSongTime(0l);
					enterSequence_main_region_Speaker_modes_USB_r1_Stop_default();
					main_region_Speaker_modes_USB_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_USB_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_USB_r1_Play_r1_playDefault_react(long transitioned_before) {
		/* The reactions of state playDefault. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault();
				timeEvents[0] = false;
				react_main_region_Speaker_modes_USB_r1_Play_r1__choice_0();
				transitioned_after = 0l;
			} else {
				if (modePlay.next) {
					exitSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault();
					uSB.setSongTime(0l);
					uSB.setCurSong((((uSB.curSong + 1l)) % uSB.numOfSongs));
					enterSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault_default();
					main_region_Speaker_modes_USB_r1_Play_react(0l);
					transitioned_after = 0l;
				} else {
					if (modePlay.back) {
						exitSequence_main_region_Speaker_modes_USB_r1_Play_r1_playDefault();
						uSB.setSongTime(0l);
						react_main_region_Speaker_modes_USB_r1_Play_r1__choice_1();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_USB_r1_Play_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_USB_r1_Pause_react(long transitioned_before) {
		/* The reactions of state Pause. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (modePlay.play) {
				exitSequence_main_region_Speaker_modes_USB_r1_Pause();
				enterSequence_main_region_Speaker_modes_USB_r1_Play_default();
				main_region_Speaker_modes_USB_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_USB_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_USB_r1_Stop_react(long transitioned_before) {
		/* The reactions of state Stop. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (modePlay.play) {
				exitSequence_main_region_Speaker_modes_USB_r1_Stop();
				enterSequence_main_region_Speaker_modes_USB_r1_Play_default();
				main_region_Speaker_modes_USB_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_USB_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Aux_react(long transitioned_before) {
		/* The reactions of state Aux. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (modes.changeMode) {
				exitSequence_main_region_Speaker_modes_Aux();
				enterSequence_main_region_Speaker_modes_changeState_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Aux_r1_aux_react(long transitioned_before) {
		/* The reactions of state aux. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Speaker_modes_Aux_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Clock_Display_react(long transitioned_before) {
		/* The reactions of state Clock Display. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (modes.changeMode) {
				exitSequence_main_region_Speaker_modes_Clock_Display();
				enterSequence_main_region_Speaker_modes_changeState_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Clock_Display_r1_Timer_react(long transitioned_before) {
		/* The reactions of state Timer. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (clock.clockDSP) {
				exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer();
				enterSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch_default();
				main_region_Speaker_modes_Clock_Display_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Clock_Display_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain_react(long transitioned_before) {
		/* The reactions of state timermain. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (clock.resetTimer) {
				exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain();
				clock.setReduceTime(clock.setTime);
				enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain_default();
				main_region_Speaker_modes_Clock_Display_r1_Timer_react(0l);
				transitioned_after = 0l;
			} else {
				if (((timeEvents[1]) && (clock.getReduceTime()>0l))) {
					exitSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_r1_timermain();
					clock.reduceTime--;
					timeEvents[1] = false;
					react_main_region_Speaker_modes_Clock_Display_r1_Timer_r1__choice_0();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Clock_Display_r1_Timer_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Clock_Display_r1_Timer_r1_Ring_react(long transitioned_before) {
		/* The reactions of state Ring. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Speaker_modes_Clock_Display_r1_Timer_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Clock_Display_r1_stopwatch_react(long transitioned_before) {
		/* The reactions of state stopwatch. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (clock.clockDSP) {
				exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch();
				enterSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch_default();
				main_region_Speaker_modes_Clock_Display_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Clock_Display_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay_react(long transitioned_before) {
		/* The reactions of state StopwatchDisplay. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((timeEvents[2]) && (!((clock.getStop()))))) {
				exitSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay();
				clock.stopwatchtime++;
				timeEvents[2] = false;
				enterSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_r1_StopwatchDisplay_default();
				main_region_Speaker_modes_Clock_Display_r1_stopwatch_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Clock_Display_r1_stopwatch_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch_react(long transitioned_before) {
		/* The reactions of state chooseTimerOrStopwatch. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (clock.chooseTM) {
				exitSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch();
				clock.setReduceTime(clock.setTime);
				enterSequence_main_region_Speaker_modes_Clock_Display_r1_Timer_default();
				main_region_Speaker_modes_Clock_Display_react(0l);
				transitioned_after = 0l;
			} else {
				if (clock.chooseSW) {
					exitSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch();
					clock.setStop(false);
					clock.setStopwatchtime(0l);
					enterSequence_main_region_Speaker_modes_Clock_Display_r1_stopwatch_default();
					main_region_Speaker_modes_Clock_Display_react(0l);
					transitioned_after = 0l;
				} else {
					if (clock.clockSet) {
						exitSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch();
						enterSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_default();
						main_region_Speaker_modes_Clock_Display_react(0l);
						transitioned_after = 0l;
					} else {
						if (timeEvents[3]) {
							exitSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch();
							clock.setMinGen((((timer.sec / 60l)) % 60l));
							clock.setHrGen((((timer.sec / 3600l)) % 24l));
							timeEvents[3] = false;
							enterSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch_default();
							main_region_Speaker_modes_Clock_Display_react(0l);
							transitioned_after = 0l;
						}
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Clock_Display_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_react(long transitioned_before) {
		/* The reactions of state SetAlarmClock. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (clock.clockDSP) {
				exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock();
				enterSequence_main_region_Speaker_modes_Clock_Display_r1_chooseTimerOrStopwatch_default();
				main_region_Speaker_modes_Clock_Display_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Clock_Display_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState_react(long transitioned_before) {
		/* The reactions of state checkState. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[4]) {
				exitSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState();
				clock.setMin((clock.min % 60l));
				clock.setHr((clock.hr % 24l));
				timeEvents[4] = false;
				enterSequence_main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_r1_checkState_default();
				main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Clock_Display_r1_SetAlarmClock_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Network_react(long transitioned_before) {
		/* The reactions of state Network. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (modes.changeMode) {
				exitSequence_main_region_Speaker_modes_Network();
				internet.raiseLogout();
				enterSequence_main_region_Speaker_modes_changeState_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Network_r1_initial_react(long transitioned_before) {
		/* The reactions of state initial. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (network.connectionMade) {
				exitSequence_main_region_Speaker_modes_Network_r1_initial();
				enterSequence_main_region_Speaker_modes_Network_r1_play_default();
				main_region_Speaker_modes_Network_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Network_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Network_r1_play_react(long transitioned_before) {
		/* The reactions of state play. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((timeEvents[5]) && (!(internet.getLoggedIn())))) {
				exitSequence_main_region_Speaker_modes_Network_r1_play();
				timeEvents[5] = false;
				enterSequence_main_region_Speaker_modes_Network_r1_initial_default();
				main_region_Speaker_modes_Network_react(0l);
				transitioned_after = 0l;
			} else {
				if (internet.logout) {
					exitSequence_main_region_Speaker_modes_Network_r1_play();
					enterSequence_main_region_Speaker_modes_Network_r1_initial_default();
					main_region_Speaker_modes_Network_react(0l);
					transitioned_after = 0l;
				} else {
					if (modePlay.pause) {
						exitSequence_main_region_Speaker_modes_Network_r1_play();
						enterSequence_main_region_Speaker_modes_Network_r1_pause_default();
						main_region_Speaker_modes_Network_react(0l);
						transitioned_after = 0l;
					} else {
						if (modePlay.stop) {
							exitSequence_main_region_Speaker_modes_Network_r1_play();
							network.setSongTime(0l);
							enterSequence_main_region_Speaker_modes_Network_r1_stop_default();
							main_region_Speaker_modes_Network_react(0l);
							transitioned_after = 0l;
						}
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Network_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Network_r1_play_r1_playDefault_react(long transitioned_before) {
		/* The reactions of state playDefault. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (modePlay.next) {
				exitSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault();
				network.setSongTime(0l);
				network.setCurSong((((network.curSong + 1l)) % network.numOfSongs));
				enterSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault_default();
				main_region_Speaker_modes_Network_r1_play_react(0l);
				transitioned_after = 0l;
			} else {
				if (timeEvents[6]) {
					exitSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault();
					network.songTime++;
					timeEvents[6] = false;
					react_main_region_Speaker_modes_Network_r1_play_r1__choice_0();
					transitioned_after = 0l;
				} else {
					if (modePlay.back) {
						exitSequence_main_region_Speaker_modes_Network_r1_play_r1_playDefault();
						network.setSongTime(0l);
						react_main_region_Speaker_modes_Network_r1_play_r1__choice_1();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Network_r1_play_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Network_r1_stop_react(long transitioned_before) {
		/* The reactions of state stop. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (modePlay.stop) {
				exitSequence_main_region_Speaker_modes_Network_r1_stop();
				enterSequence_main_region_Speaker_modes_Network_r1_play_default();
				main_region_Speaker_modes_Network_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Network_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Network_r1_pause_react(long transitioned_before) {
		/* The reactions of state pause. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (modePlay.play) {
				exitSequence_main_region_Speaker_modes_Network_r1_pause();
				enterSequence_main_region_Speaker_modes_Network_r1_play_default();
				main_region_Speaker_modes_Network_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Network_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Radio_react(long transitioned_before) {
		/* The reactions of state Radio. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (modes.changeMode) {
				exitSequence_main_region_Speaker_modes_Radio();
				enterSequence_main_region_Speaker_modes_changeState_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_Radio_r1_radio_react(long transitioned_before) {
		/* The reactions of state radio. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (radio.raiseFreq) {
				exitSequence_main_region_Speaker_modes_Radio_r1_radio();
				react_main_region_Speaker_modes_Radio_r1__choice_0();
				transitioned_after = 0l;
			} else {
				if (radio.lowerFreq) {
					exitSequence_main_region_Speaker_modes_Radio_r1_radio();
					react_main_region_Speaker_modes_Radio_r1__choice_1();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_modes_Radio_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_modes_changeState_react(long transitioned_before) {
		/* The reactions of state changeState. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[7]) {
				exitSequence_main_region_Speaker_modes_changeState();
				timeEvents[7] = false;
				react_main_region_Speaker_modes__choice_0();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_functions_functions_react(long transitioned_before) {
		/* The reactions of state functions. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Speaker_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer_react(long transitioned_before) {
		/* The reactions of state Ttimer. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[8]) {
				exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1_Ttimer();
				timer.setSec((timer.sec + 1l));
				timeEvents[8] = false;
				react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r1__choice_2();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime_react(long transitioned_before) {
		/* The reactions of state CheckClockTime. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (timeEvents[9]) {
				exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime();
				timeEvents[9] = false;
				react_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2__choice_0();
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring_react(long transitioned_before) {
		/* The reactions of state Ring. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (timeEvents[10]) {
				exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring();
				timeEvents[10] = false;
				enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime_default();
				transitioned_after = 2l;
			} else {
				if (clock.stopAlarmClock) {
					exitSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_Ring();
					enterSequence_main_region_Speaker_functions_functions_timer_Timer_Clcok_r2_CheckClockTime_default();
					transitioned_after = 2l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_functions_functions_r2_network_modePlay_react(long transitioned_before) {
		/* The reactions of state network modePlay. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Speaker_functions_functions_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_react(long transitioned_before) {
		/* The reactions of state modePlay. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<3l) {
			if (((modePlay.volumeUp) && (modePlay.getVolume()<100l))) {
				exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay();
				modePlay.setVolume(modePlay.getVolume() + 5l);
				enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
				transitioned_after = 3l;
			} else {
				if (((modePlay.volumeDown) && (modePlay.getVolume()>0l))) {
					exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay();
					modePlay.setVolume(modePlay.getVolume() - 5l);
					enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay_default();
					transitioned_after = 3l;
				} else {
					if (modePlay.skipForward) {
						exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay();
						react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_0();
						transitioned_after = 3l;
					} else {
						if (modePlay.skipBackwards) {
							exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r1_modePlay();
							react_main_region_Speaker_functions_functions_r2_network_modePlay_r1__choice_1();
							transitioned_after = 3l;
						}
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_react(long transitioned_before) {
		/* The reactions of state internetStates. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Speaker_functions_functions_r2_network_modePlay_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_disconnect_react(long transitioned_before) {
		/* The reactions of state disconnect. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<4l) {
			if (internet.connectWifi) {
				exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_disconnect();
				internet.setConnectedWifi(true);
				enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_connect_default();
				transitioned_after = 4l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_connect_react(long transitioned_before) {
		/* The reactions of state connect. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<4l) {
			if (internet.disconnectWifi) {
				exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_connect();
				react_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi__choice_0();
				transitioned_after = 4l;
			} else {
				if (power.powerOff) {
					exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi_connect();
					react_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_Wifi__choice_0();
					transitioned_after = 4l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_LogOut_react(long transitioned_before) {
		/* The reactions of state LogOut. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<5l) {
			if (((internet.login) && ((internet.getConnectedWifi() && modes.getMode()==5l)))) {
				exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_LogOut();
				internet.setLoggedIn(true);
				network.raiseConnectionMade();
				enterSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_login_default();
				main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_react(4l);
				transitioned_after = 5l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_login_react(long transitioned_before) {
		/* The reactions of state login. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<5l) {
			if (power.powerOff) {
				exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_login();
				react_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout__choice_0();
				transitioned_after = 5l;
			} else {
				if (internet.logout) {
					exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_login();
					react_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout__choice_0();
					transitioned_after = 5l;
				} else {
					if (internet.disconnectWifi) {
						exitSequence_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout_login();
						react_main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_loginLogout__choice_0();
						transitioned_after = 5l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Speaker_functions_functions_r2_network_modePlay_r2_internetStates_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_powerOffState_react(long transitioned_before) {
		/* The reactions of state powerOffState. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((power.powerOn) && ((power.getBattery()>0l || power.getConnectPower())))) {
				exitSequence_main_region_powerOffState();
				react_main_region_Speaker_modes_returnFromPower();
				enterSequence_main_region_Speaker_functions_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[11]) {
					exitSequence_main_region_powerOffState();
					timer.sec++;
					timeEvents[11] = false;
					enterSequence_main_region_powerOffState_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
