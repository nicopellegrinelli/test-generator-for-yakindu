/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class Sample implements ITimed, IEventDriven {
	public enum State {
		SAMPLE_LIGHT_LIGHTS__OFF,
		SAMPLE_LIGHT_LIGHTS_ON,
		SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_LOW,
		SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_MED,
		SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_HIGH,
		SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING,
		SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_COUNTING_DOWN,
		SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_TRIGGER_OFF,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[1];
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Sample() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 1; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart sample */
		setTimer(15l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart sample */
		enterSequence_Sample_Light_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart sample */
		exitSequence_Sample_Light();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		toggle = false;
		toggle_brightness = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case SAMPLE_LIGHT_LIGHTS__OFF:
			transitioned = sample_Light_Lights__Off_react(transitioned);
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_LOW:
			transitioned = sample_Light_Lights_On_Brightness_Level_low_react(transitioned);
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_MED:
			transitioned = sample_Light_Lights_On_Brightness_Level_med_react(transitioned);
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_HIGH:
			transitioned = sample_Light_Lights_On_Brightness_Level_high_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_COUNTING_DOWN:
				sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down_react(transitioned);
				break;
			case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_TRIGGER_OFF:
				sample_Light_Lights_On_Timer_timer_working_timer_status_trigger_off_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case SAMPLE_LIGHT_LIGHTS__OFF:
			return stateVector[0] == State.SAMPLE_LIGHT_LIGHTS__OFF;
		case SAMPLE_LIGHT_LIGHTS_ON:
			return stateVector[0].ordinal() >= State.
					SAMPLE_LIGHT_LIGHTS_ON.ordinal()&& stateVector[0].ordinal() <= State.SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_TRIGGER_OFF.ordinal();
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_LOW:
			return stateVector[0] == State.SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_LOW;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_MED:
			return stateVector[0] == State.SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_MED;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_HIGH:
			return stateVector[0] == State.SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_HIGH;
		case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING:
			return stateVector[1].ordinal() >= State.
					SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING.ordinal()&& stateVector[1].ordinal() <= State.SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_TRIGGER_OFF.ordinal();
		case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_COUNTING_DOWN:
			return stateVector[1] == State.SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_COUNTING_DOWN;
		case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_TRIGGER_OFF:
			return stateVector[1] == State.SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_TRIGGER_OFF;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean toggle;
	
	
	public void raiseToggle() {
		inEventQueue.add(() -> {
			toggle = true;
		});
		runCycle();
	}
	
	private boolean off;
	
	
	protected void raiseOff() {
		off = true;
		offObservable.next(null);
	}
	
	private Observable<Void> offObservable = new Observable<Void>();
	
	public Observable<Void> getOff() {
		return offObservable;
	}
	
	private boolean on;
	
	
	protected void raiseOn() {
		on = true;
		onObservable.next(null);
	}
	
	private Observable<Void> onObservable = new Observable<Void>();
	
	public Observable<Void> getOn() {
		return onObservable;
	}
	
	private boolean toggle_brightness;
	
	
	public void raiseToggle_brightness() {
		inEventQueue.add(() -> {
			toggle_brightness = true;
		});
		runCycle();
	}
	
	private long timer;
	
	public long getTimer() {
		return timer;
	}
	
	public void setTimer(long value) {
		this.timer = value;
	}
	
	/* Entry action for state 'Lights _Off'. */
	private void entryAction_Sample_Light_Lights__Off() {
		/* Entry action for state 'Lights _Off'. */
		raiseOff();
	}
	
	/* Entry action for state 'Lights_On'. */
	private void entryAction_Sample_Light_Lights_On() {
		/* Entry action for state 'Lights_On'. */
		raiseOn();
	}
	
	/* Entry action for state 'counting_down'. */
	private void entryAction_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down() {
		/* Entry action for state 'counting_down'. */
		timerService.setTimer(this, 0, (1l * 1000l), true);
		timerService.setTimer(this, 1, (1l * 1000l), true);
		timer--;
	}
	
	/* Entry action for state 'trigger_off'. */
	private void entryAction_Sample_Light_Lights_On_Timer_timer_working_timer_status_trigger_off() {
		/* Entry action for state 'trigger_off'. */
		raiseToggle();
	}
	
	/* Exit action for state 'counting_down'. */
	private void exitAction_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down() {
		/* Exit action for state 'counting_down'. */
		timerService.unsetTimer(this, 0);
		timerService.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Lights _Off */
	private void enterSequence_Sample_Light_Lights__Off_default() {
		/* 'default' enter sequence for state Lights _Off */
		entryAction_Sample_Light_Lights__Off();
		stateVector[0] = State.SAMPLE_LIGHT_LIGHTS__OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Lights_On */
	private void enterSequence_Sample_Light_Lights_On_default() {
		/* 'default' enter sequence for state Lights_On */
		entryAction_Sample_Light_Lights_On();
		enterSequence_Sample_Light_Lights_On_Brightness_Level_default();
		enterSequence_Sample_Light_Lights_On_Timer_default();
	}
	
	/* 'default' enter sequence for state low */
	private void enterSequence_Sample_Light_Lights_On_Brightness_Level_low_default() {
		/* 'default' enter sequence for state low */
		stateVector[0] = State.SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_LOW;
		stateConfVectorPosition = 0;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state med */
	private void enterSequence_Sample_Light_Lights_On_Brightness_Level_med_default() {
		/* 'default' enter sequence for state med */
		stateVector[0] = State.SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_MED;
		stateConfVectorPosition = 0;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state high */
	private void enterSequence_Sample_Light_Lights_On_Brightness_Level_high_default() {
		/* 'default' enter sequence for state high */
		stateVector[0] = State.SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_HIGH;
		stateConfVectorPosition = 0;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state timer_working */
	private void enterSequence_Sample_Light_Lights_On_Timer_timer_working_default() {
		/* 'default' enter sequence for state timer_working */
		enterSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_default();
	}
	
	/* 'default' enter sequence for state counting_down */
	private void enterSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down_default() {
		/* 'default' enter sequence for state counting_down */
		entryAction_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down();
		stateVector[1] = State.SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_COUNTING_DOWN;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state trigger_off */
	private void enterSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_trigger_off_default() {
		/* 'default' enter sequence for state trigger_off */
		entryAction_Sample_Light_Lights_On_Timer_timer_working_timer_status_trigger_off();
		stateVector[1] = State.SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_TRIGGER_OFF;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region Sample_Light */
	private void enterSequence_Sample_Light_default() {
		/* 'default' enter sequence for region Sample_Light */
		react_Sample_Light__entry_Default();
	}
	
	/* 'default' enter sequence for region Brightness_Level */
	private void enterSequence_Sample_Light_Lights_On_Brightness_Level_default() {
		/* 'default' enter sequence for region Brightness_Level */
		react_Sample_Light_Lights_On_Brightness_Level__entry_Default();
	}
	
	/* shallow enterSequence with history in child Brightness_Level */
	private void shallowEnterSequence_Sample_Light_Lights_On_Brightness_Level() {
		/* shallow enterSequence with history in child Brightness_Level */
		switch (historyVector[0]) {
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_LOW:
			enterSequence_Sample_Light_Lights_On_Brightness_Level_low_default();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_MED:
			enterSequence_Sample_Light_Lights_On_Brightness_Level_med_default();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_HIGH:
			enterSequence_Sample_Light_Lights_On_Brightness_Level_high_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region Timer */
	private void enterSequence_Sample_Light_Lights_On_Timer_default() {
		/* 'default' enter sequence for region Timer */
		react_Sample_Light_Lights_On_Timer__entry_Default();
	}
	
	/* 'default' enter sequence for region timer_status */
	private void enterSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_default() {
		/* 'default' enter sequence for region timer_status */
		react_Sample_Light_Lights_On_Timer_timer_working_timer_status__entry_Default();
	}
	
	/* Default exit sequence for state Lights _Off */
	private void exitSequence_Sample_Light_Lights__Off() {
		/* Default exit sequence for state Lights _Off */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Lights_On */
	private void exitSequence_Sample_Light_Lights_On() {
		/* Default exit sequence for state Lights_On */
		exitSequence_Sample_Light_Lights_On_Brightness_Level();
		exitSequence_Sample_Light_Lights_On_Timer();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state low */
	private void exitSequence_Sample_Light_Lights_On_Brightness_Level_low() {
		/* Default exit sequence for state low */
		stateVector[0] = State.SAMPLE_LIGHT_LIGHTS_ON;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state med */
	private void exitSequence_Sample_Light_Lights_On_Brightness_Level_med() {
		/* Default exit sequence for state med */
		stateVector[0] = State.SAMPLE_LIGHT_LIGHTS_ON;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state high */
	private void exitSequence_Sample_Light_Lights_On_Brightness_Level_high() {
		/* Default exit sequence for state high */
		stateVector[0] = State.SAMPLE_LIGHT_LIGHTS_ON;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state timer_working */
	private void exitSequence_Sample_Light_Lights_On_Timer_timer_working() {
		/* Default exit sequence for state timer_working */
		exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status();
		stateVector[1] = State.SAMPLE_LIGHT_LIGHTS_ON;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state counting_down */
	private void exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down() {
		/* Default exit sequence for state counting_down */
		stateVector[1] = State.SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING;
		stateConfVectorPosition = 1;
		exitAction_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down();
	}
	
	/* Default exit sequence for state trigger_off */
	private void exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_trigger_off() {
		/* Default exit sequence for state trigger_off */
		stateVector[1] = State.SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for region Sample_Light */
	private void exitSequence_Sample_Light() {
		/* Default exit sequence for region Sample_Light */
		switch (stateVector[0]) {
		case SAMPLE_LIGHT_LIGHTS__OFF:
			exitSequence_Sample_Light_Lights__Off();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_LOW:
			exitSequence_Sample_Light_Lights_On_Brightness_Level_low();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_MED:
			exitSequence_Sample_Light_Lights_On_Brightness_Level_med();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_HIGH:
			exitSequence_Sample_Light_Lights_On_Brightness_Level_high();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING:
			exitSequence_Sample_Light_Lights_On_Timer_timer_working();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_COUNTING_DOWN:
			exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_TRIGGER_OFF:
			exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_trigger_off();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Brightness_Level */
	private void exitSequence_Sample_Light_Lights_On_Brightness_Level() {
		/* Default exit sequence for region Brightness_Level */
		switch (stateVector[0]) {
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_LOW:
			exitSequence_Sample_Light_Lights_On_Brightness_Level_low();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_MED:
			exitSequence_Sample_Light_Lights_On_Brightness_Level_med();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_BRIGHTNESS_LEVEL_HIGH:
			exitSequence_Sample_Light_Lights_On_Brightness_Level_high();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Timer */
	private void exitSequence_Sample_Light_Lights_On_Timer() {
		/* Default exit sequence for region Timer */
		switch (stateVector[1]) {
		case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING:
			exitSequence_Sample_Light_Lights_On_Timer_timer_working();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_COUNTING_DOWN:
			exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_TRIGGER_OFF:
			exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_trigger_off();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region timer_status */
	private void exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status() {
		/* Default exit sequence for region timer_status */
		switch (stateVector[1]) {
		case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_COUNTING_DOWN:
			exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down();
			break;
		case SAMPLE_LIGHT_LIGHTS_ON_TIMER_TIMER_WORKING_TIMER_STATUS_TRIGGER_OFF:
			exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_trigger_off();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Sample_Light__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_Sample_Light_Lights__Off_default();
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_Sample_Light_Lights_On_Brightness_Level__entry_Default() {
		/* Default react sequence for shallow history entry  */
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_Sample_Light_Lights_On_Brightness_Level();
		} else {
			enterSequence_Sample_Light_Lights_On_Brightness_Level_low_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Sample_Light_Lights_On_Timer_timer_working_timer_status__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Sample_Light_Lights_On_Timer__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_Sample_Light_Lights_On_Timer_timer_working_default();
	}
	
	private long sample_Light_Lights__Off_react(long transitioned_before) {
		/* The reactions of state Lights _Off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (toggle) {
				exitSequence_Sample_Light_Lights__Off();
				setTimer(10l);
				enterSequence_Sample_Light_Lights_On_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long sample_Light_Lights_On_react(long transitioned_before) {
		/* The reactions of state Lights_On. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (toggle) {
				exitSequence_Sample_Light_Lights_On();
				enterSequence_Sample_Light_Lights__Off_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long sample_Light_Lights_On_Brightness_Level_low_react(long transitioned_before) {
		/* The reactions of state low. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (toggle_brightness) {
				exitSequence_Sample_Light_Lights_On_Brightness_Level_low();
				enterSequence_Sample_Light_Lights_On_Brightness_Level_med_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long sample_Light_Lights_On_Brightness_Level_med_react(long transitioned_before) {
		/* The reactions of state med. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (toggle_brightness) {
				exitSequence_Sample_Light_Lights_On_Brightness_Level_med();
				enterSequence_Sample_Light_Lights_On_Brightness_Level_high_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long sample_Light_Lights_On_Brightness_Level_high_react(long transitioned_before) {
		/* The reactions of state high. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (toggle_brightness) {
				exitSequence_Sample_Light_Lights_On_Brightness_Level_high();
				enterSequence_Sample_Light_Lights_On_Brightness_Level_low_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long sample_Light_Lights_On_Timer_timer_working_react(long transitioned_before) {
		/* The reactions of state timer_working. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = sample_Light_Lights_On_react(transitioned_before);
		return transitioned_after;
	}
	
	private long sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down_react(long transitioned_before) {
		/* The reactions of state counting_down. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (((timeEvents[0]) && (getTimer()==0l))) {
				exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down();
				timeEvents[0] = false;
				enterSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_trigger_off_default();
				sample_Light_Lights_On_Timer_timer_working_react(1l);
				transitioned_after = 1l;
			} else {
				if (timeEvents[1]) {
					exitSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down();
					timeEvents[1] = false;
					enterSequence_Sample_Light_Lights_On_Timer_timer_working_timer_status_counting_down_default();
					sample_Light_Lights_On_Timer_timer_working_react(1l);
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = sample_Light_Lights_On_Timer_timer_working_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long sample_Light_Lights_On_Timer_timer_working_timer_status_trigger_off_react(long transitioned_before) {
		/* The reactions of state trigger_off. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = sample_Light_Lights_On_Timer_timer_working_react(transitioned_before);
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
