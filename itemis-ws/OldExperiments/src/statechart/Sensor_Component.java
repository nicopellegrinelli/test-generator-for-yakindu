/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Sensor_Component implements ITimed, IEventDriven {
	public enum State {
		_SENSOR_COMPONENT___SENSOR_MONITORING_,
		_SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__UNDER_THRESHOLD,
		_SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__THRESHOLD_REACHED,
		_SENSOR_COMPONENT___OFF_,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Sensor_Component() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Sensor_Component */
		setCounter(simulate_detection_timer);
		setSimulate_detection_timer(0l);
		setActivity(false);
		setReading(false);
		setActivity_sensed("");
		setSignalSentToController(false);
		setSensorData(0l);
		setEnvironmentData(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Sensor_Component */
		enterSequence__Sensor_Component__default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Sensor_Component */
		exitSequence__Sensor_Component_();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		on = false;
		off = false;
		activitySensed = false;
		noActivitySensed = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case _SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__UNDER_THRESHOLD:
			_Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold_react(-1l);
			break;
		case _SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__THRESHOLD_REACHED:
			_Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached_react(-1l);
			break;
		case _SENSOR_COMPONENT___OFF_:
			_Sensor_Component___off__react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case _SENSOR_COMPONENT___SENSOR_MONITORING_:
			return stateVector[0].ordinal() >= State.
					_SENSOR_COMPONENT___SENSOR_MONITORING_.ordinal()&& stateVector[0].ordinal() <= State._SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__THRESHOLD_REACHED.ordinal();
		case _SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__UNDER_THRESHOLD:
			return stateVector[0] == State._SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__UNDER_THRESHOLD;
		case _SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__THRESHOLD_REACHED:
			return stateVector[0] == State._SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__THRESHOLD_REACHED;
		case _SENSOR_COMPONENT___OFF_:
			return stateVector[0] == State._SENSOR_COMPONENT___OFF_;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean on;
	
	
	public void raiseOn() {
		inEventQueue.add(() -> {
			on = true;
		});
		runCycle();
	}
	
	private boolean off;
	
	
	public void raiseOff() {
		inEventQueue.add(() -> {
			off = true;
		});
		runCycle();
	}
	
	private boolean activitySensed;
	
	
	public void raiseActivitySensed() {
		inEventQueue.add(() -> {
			activitySensed = true;
		});
		runCycle();
	}
	
	private boolean noActivitySensed;
	
	
	public void raiseNoActivitySensed() {
		inEventQueue.add(() -> {
			noActivitySensed = true;
		});
		runCycle();
	}
	
	private long counter;
	
	public long getCounter() {
		return counter;
	}
	
	public void setCounter(long value) {
		this.counter = value;
	}
	
	private long simulate_detection_timer;
	
	public long getSimulate_detection_timer() {
		return simulate_detection_timer;
	}
	
	public void setSimulate_detection_timer(long value) {
		this.simulate_detection_timer = value;
	}
	
	private boolean activity;
	
	public boolean getActivity() {
		return activity;
	}
	
	public void setActivity(boolean value) {
		this.activity = value;
	}
	
	private boolean reading;
	
	public boolean getReading() {
		return reading;
	}
	
	public void setReading(boolean value) {
		this.reading = value;
	}
	
	private String activity_sensed;
	
	public String getActivity_sensed() {
		return activity_sensed;
	}
	
	public void setActivity_sensed(String value) {
		this.activity_sensed = value;
	}
	
	private boolean signalSentToController;
	
	public boolean getSignalSentToController() {
		return signalSentToController;
	}
	
	public void setSignalSentToController(boolean value) {
		this.signalSentToController = value;
	}
	
	private long sensorData;
	
	public long getSensorData() {
		return sensorData;
	}
	
	public void setSensorData(long value) {
		this.sensorData = value;
	}
	
	private long environmentData;
	
	public long getEnvironmentData() {
		return environmentData;
	}
	
	public void setEnvironmentData(long value) {
		this.environmentData = value;
	}
	
	/* Entry action for state '<Sensor_Monitoring>'. */
	private void entryAction__Sensor_Component___Sensor_Monitoring_() {
		/* Entry action for state '<Sensor_Monitoring>'. */
		timerService.setTimer(this, 0, (1l * 1000l), true);
		setReading(true);
		setCounter(simulate_detection_timer);
	}
	
	/* Entry action for state 'Under_Threshold'. */
	private void entryAction__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold() {
		/* Entry action for state 'Under_Threshold'. */
		timerService.setTimer(this, 1, (1l * 1000l), false);
	}
	
	/* Entry action for state 'Threshold_Reached'. */
	private void entryAction__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached() {
		/* Entry action for state 'Threshold_Reached'. */
		timerService.setTimer(this, 2, (1l * 1000l), false);
	}
	
	/* Entry action for state '<off>'. */
	private void entryAction__Sensor_Component___off_() {
		/* Entry action for state '<off>'. */
		setReading(false);
	}
	
	/* Exit action for state '<Sensor_Monitoring>'. */
	private void exitAction__Sensor_Component___Sensor_Monitoring_() {
		/* Exit action for state '<Sensor_Monitoring>'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Under_Threshold'. */
	private void exitAction__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold() {
		/* Exit action for state 'Under_Threshold'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Threshold_Reached'. */
	private void exitAction__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached() {
		/* Exit action for state 'Threshold_Reached'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* 'default' enter sequence for state <Sensor_Monitoring> */
	private void enterSequence__Sensor_Component___Sensor_Monitoring__default() {
		/* 'default' enter sequence for state <Sensor_Monitoring> */
		entryAction__Sensor_Component___Sensor_Monitoring_();
		enterSequence__Sensor_Component___Sensor_Monitoring___Sensing__default();
	}
	
	/* 'default' enter sequence for state Under_Threshold */
	private void enterSequence__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold_default() {
		/* 'default' enter sequence for state Under_Threshold */
		entryAction__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold();
		stateVector[0] = State._SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__UNDER_THRESHOLD;
	}
	
	/* 'default' enter sequence for state Threshold_Reached */
	private void enterSequence__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached_default() {
		/* 'default' enter sequence for state Threshold_Reached */
		entryAction__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached();
		stateVector[0] = State._SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__THRESHOLD_REACHED;
	}
	
	/* 'default' enter sequence for state <off> */
	private void enterSequence__Sensor_Component___off__default() {
		/* 'default' enter sequence for state <off> */
		entryAction__Sensor_Component___off_();
		stateVector[0] = State._SENSOR_COMPONENT___OFF_;
	}
	
	/* 'default' enter sequence for region <Sensor_Component> */
	private void enterSequence__Sensor_Component__default() {
		/* 'default' enter sequence for region <Sensor_Component> */
		react__Sensor_Component___entry_Default();
	}
	
	/* 'default' enter sequence for region <Sensing> */
	private void enterSequence__Sensor_Component___Sensor_Monitoring___Sensing__default() {
		/* 'default' enter sequence for region <Sensing> */
		react__Sensor_Component___Sensor_Monitoring___Sensing___entry_Default();
	}
	
	/* Default exit sequence for state <Sensor_Monitoring> */
	private void exitSequence__Sensor_Component___Sensor_Monitoring_() {
		/* Default exit sequence for state <Sensor_Monitoring> */
		exitSequence__Sensor_Component___Sensor_Monitoring___Sensing_();
		stateVector[0] = State.$NULLSTATE$;
		exitAction__Sensor_Component___Sensor_Monitoring_();
	}
	
	/* Default exit sequence for state Under_Threshold */
	private void exitSequence__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold() {
		/* Default exit sequence for state Under_Threshold */
		stateVector[0] = State._SENSOR_COMPONENT___SENSOR_MONITORING_;
		exitAction__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold();
	}
	
	/* Default exit sequence for state Threshold_Reached */
	private void exitSequence__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached() {
		/* Default exit sequence for state Threshold_Reached */
		stateVector[0] = State._SENSOR_COMPONENT___SENSOR_MONITORING_;
		exitAction__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached();
	}
	
	/* Default exit sequence for state <off> */
	private void exitSequence__Sensor_Component___off_() {
		/* Default exit sequence for state <off> */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region <Sensor_Component> */
	private void exitSequence__Sensor_Component_() {
		/* Default exit sequence for region <Sensor_Component> */
		switch (stateVector[0]) {
		case _SENSOR_COMPONENT___SENSOR_MONITORING_:
			exitSequence__Sensor_Component___Sensor_Monitoring_();
			break;
		case _SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__UNDER_THRESHOLD:
			exitSequence__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold();
			exitAction__Sensor_Component___Sensor_Monitoring_();
			break;
		case _SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__THRESHOLD_REACHED:
			exitSequence__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached();
			exitAction__Sensor_Component___Sensor_Monitoring_();
			break;
		case _SENSOR_COMPONENT___OFF_:
			exitSequence__Sensor_Component___off_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region <Sensing> */
	private void exitSequence__Sensor_Component___Sensor_Monitoring___Sensing_() {
		/* Default exit sequence for region <Sensing> */
		switch (stateVector[0]) {
		case _SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__UNDER_THRESHOLD:
			exitSequence__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold();
			break;
		case _SENSOR_COMPONENT___SENSOR_MONITORING___SENSING__THRESHOLD_REACHED:
			exitSequence__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react__Sensor_Component___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__Sensor_Component___Sensor_Monitoring__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__Sensor_Component___Sensor_Monitoring___Sensing___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold_default();
	}
	
	private long _Sensor_Component___Sensor_Monitoring__react(long transitioned_before) {
		/* The reactions of state <Sensor_Monitoring>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (off) {
				exitSequence__Sensor_Component___Sensor_Monitoring_();
				enterSequence__Sensor_Component___off__default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (timeEvents[0]) {
				setSensorData(environmentData);
			}
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long _Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold_react(long transitioned_before) {
		/* The reactions of state Under_Threshold. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getSensorData()>90l) {
				exitSequence__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold();
				enterSequence__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached_default();
				_Sensor_Component___Sensor_Monitoring__react(0l);
				transitioned_after = 0l;
			} else {
				if (((timeEvents[1]) && (getActivity()))) {
					exitSequence__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold();
					raiseActivitySensed();
					timeEvents[1] = false;
					enterSequence__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold_default();
					_Sensor_Component___Sensor_Monitoring__react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = _Sensor_Component___Sensor_Monitoring__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached_react(long transitioned_before) {
		/* The reactions of state Threshold_Reached. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (noActivitySensed) {
				exitSequence__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached();
				enterSequence__Sensor_Component___Sensor_Monitoring___Sensing__Under_Threshold_default();
				_Sensor_Component___Sensor_Monitoring__react(0l);
				transitioned_after = 0l;
			} else {
				if (((timeEvents[2]) && (!(getActivity())))) {
					exitSequence__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached();
					raiseNoActivitySensed();
					timeEvents[2] = false;
					enterSequence__Sensor_Component___Sensor_Monitoring___Sensing__Threshold_Reached_default();
					_Sensor_Component___Sensor_Monitoring__react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = _Sensor_Component___Sensor_Monitoring__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _Sensor_Component___off__react(long transitioned_before) {
		/* The reactions of state <off>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (on) {
				exitSequence__Sensor_Component___off_();
				enterSequence__Sensor_Component___Sensor_Monitoring__default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
