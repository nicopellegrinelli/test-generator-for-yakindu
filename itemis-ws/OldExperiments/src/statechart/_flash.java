/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class _flash implements ITimed, IEventDriven {
	public enum State {
		FLASH_LIGHT,
		FLASH_DARK,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public _flash() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart _flash */
		setT_light(500l);
		setT_dark(500l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart _flash */
		enterSequence_flash_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart _flash */
		exitSequence_flash();
		stateVector[0] = State.$NULLSTATE$;
		/* Exit action for state '_flash'. */
		operationCallback.switchOff(1l);
		operationCallback.switchOff(2l);
		operationCallback.switchOff(3l);
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case FLASH_LIGHT:
			flash_Light_react(-1l);
			break;
		case FLASH_DARK:
			flash_Dark_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case FLASH_LIGHT:
			return stateVector[0] == State.FLASH_LIGHT;
		case FLASH_DARK:
			return stateVector[0] == State.FLASH_DARK;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	public interface OperationCallback {
	
		public void switchOn(long led);
		
		public void switchOff(long led);
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private long t_light;
	
	public long getT_light() {
		return t_light;
	}
	
	public void setT_light(long value) {
		this.t_light = value;
	}
	
	private long t_dark;
	
	public long getT_dark() {
		return t_dark;
	}
	
	public void setT_dark(long value) {
		this.t_dark = value;
	}
	
	/* Entry action for state 'Light'. */
	private void entryAction_flash_Light() {
		/* Entry action for state 'Light'. */
		timerService.setTimer(this, 0, getT_light(), false);
		operationCallback.switchOn(1l);
		operationCallback.switchOn(2l);
		operationCallback.switchOn(3l);
	}
	
	/* Entry action for state 'Dark'. */
	private void entryAction_flash_Dark() {
		/* Entry action for state 'Dark'. */
		timerService.setTimer(this, 1, getT_dark(), false);
		operationCallback.switchOff(1l);
		operationCallback.switchOff(2l);
		operationCallback.switchOff(3l);
	}
	
	/* Exit action for state 'Light'. */
	private void exitAction_flash_Light() {
		/* Exit action for state 'Light'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Dark'. */
	private void exitAction_flash_Dark() {
		/* Exit action for state 'Dark'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Light */
	private void enterSequence_flash_Light_default() {
		/* 'default' enter sequence for state Light */
		entryAction_flash_Light();
		stateVector[0] = State.FLASH_LIGHT;
	}
	
	/* 'default' enter sequence for state Dark */
	private void enterSequence_flash_Dark_default() {
		/* 'default' enter sequence for state Dark */
		entryAction_flash_Dark();
		stateVector[0] = State.FLASH_DARK;
	}
	
	/* 'default' enter sequence for region flash */
	private void enterSequence_flash_default() {
		/* 'default' enter sequence for region flash */
		react_flash__entry_Default();
	}
	
	/* Default exit sequence for state Light */
	private void exitSequence_flash_Light() {
		/* Default exit sequence for state Light */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_flash_Light();
	}
	
	/* Default exit sequence for state Dark */
	private void exitSequence_flash_Dark() {
		/* Default exit sequence for state Dark */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_flash_Dark();
	}
	
	/* Default exit sequence for region flash */
	private void exitSequence_flash() {
		/* Default exit sequence for region flash */
		switch (stateVector[0]) {
		case FLASH_LIGHT:
			exitSequence_flash_Light();
			break;
		case FLASH_DARK:
			exitSequence_flash_Dark();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_flash__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_flash_Light_default();
	}
	
	private long flash_Light_react(long transitioned_before) {
		/* The reactions of state Light. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_flash_Light();
				timeEvents[0] = false;
				enterSequence_flash_Dark_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long flash_Dark_react(long transitioned_before) {
		/* The reactions of state Dark. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_flash_Dark();
				timeEvents[1] = false;
				enterSequence_flash_Light_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
