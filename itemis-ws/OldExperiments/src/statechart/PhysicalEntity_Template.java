/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;
import statechart.Actuator_Component;
import statechart.Controller_Component;
import statechart.Power_Component;

public class PhysicalEntity_Template implements ITimed, IEventDriven {
	public static class Status {
		private PhysicalEntity_Template parent;
		
		public Status(PhysicalEntity_Template parent) {
			this.parent = parent;
		}
		private boolean activitySensed;
		
		
		public void raiseActivitySensed() {
			parent.inEventQueue.add(() -> {
				activitySensed = true;
			});
			parent.runCycle();
		}
		
		private boolean noActivitySensed;
		
		
		public void raiseNoActivitySensed() {
			parent.inEventQueue.add(() -> {
				noActivitySensed = true;
			});
			parent.runCycle();
		}
		
		private boolean activity;
		
		public boolean getActivity() {
			return activity;
		}
		
		public void setActivity(boolean value) {
			this.activity = value;
		}
		
	}
	
	public static class Oscillator {
		private boolean transducing;
		
		public boolean getTransducing() {
			return transducing;
		}
		
		public void setTransducing(boolean value) {
			this.transducing = value;
		}
		
		private boolean receiving;
		
		public boolean getReceiving() {
			return receiving;
		}
		
		public void setReceiving(boolean value) {
			this.receiving = value;
		}
		
		private long transmit_value;
		
		public long getTransmit_value() {
			return transmit_value;
		}
		
		public void setTransmit_value(long value) {
			this.transmit_value = value;
		}
		
		private long echo_value;
		
		public long getEcho_value() {
			return echo_value;
		}
		
		public void setEcho_value(long value) {
			this.echo_value = value;
		}
		
	}
	
	public static class Frequency {
		private long doppler;
		
		public long getDoppler() {
			return doppler;
		}
		
		public void setDoppler(long value) {
			this.doppler = value;
		}
		
	}
	
	public static class Comparator {
		private boolean working;
		
		public boolean getWorking() {
			return working;
		}
		
		public void setWorking(boolean value) {
			this.working = value;
		}
		
	}
	
	public static class Trigger {
		private PhysicalEntity_Template parent;
		
		public Trigger(PhysicalEntity_Template parent) {
			this.parent = parent;
		}
		private boolean on;
		
		
		public void raiseOn() {
			parent.inEventQueue.add(() -> {
				on = true;
			});
			parent.runCycle();
		}
		
		private boolean off;
		
		
		public void raiseOff() {
			parent.inEventQueue.add(() -> {
				off = true;
			});
			parent.runCycle();
		}
		
	}
	
	public static class Power {
		private long kWh;
		
		public long getKWh() {
			return kWh;
		}
		
		public void setKWh(long value) {
			this.kWh = value;
		}
		
	}
	
	protected Status status;
	
	protected Oscillator oscillator;
	
	protected Frequency frequency;
	
	protected Comparator comparator;
	
	protected Trigger trigger;
	
	protected Power power;
	
	public enum State {
		PHYSICALENTITY_TEMPLATE__DETECTING_,
		PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_TRANSMITTING,
		PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_RECEIVING,
		PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA,
		PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_TRIGGER_CHANGED,
		PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_COMPARING,
		PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ONSTANDBY,
		PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ACTUATE_TRIGGER,
		PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS,
		PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CONSUMINGMINIMUM,
		PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CIRCUITTRIGGER,
		PHYSICALENTITY_TEMPLATE__OFF_,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[2];
	private final State[] stateVector = new State[4];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public PhysicalEntity_Template() {
		status = new Status(this);
		oscillator = new Oscillator();
		frequency = new Frequency();
		comparator = new Comparator();
		trigger = new Trigger(this);
		power = new Power();
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 2; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart PhysicalEntity_Template */
		setController(null);
		setActuator(null);
		setPowerSupply(null);
		setReading(false);
		setSensorData(0l);
		setEnvironmentData(0l);
		status.setActivity(false);
		oscillator.setTransducing(false);
		oscillator.setReceiving(false);
		oscillator.setTransmit_value(0l);
		oscillator.setEcho_value(0l);
		frequency.setDoppler(0l);
		comparator.setWorking(false);
		power.setKWh(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart PhysicalEntity_Template */
		enterSequence_PhysicalEntity_Template_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart PhysicalEntity_Template */
		exitSequence_PhysicalEntity_Template();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateVector[2] = State.$NULLSTATE$;
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		on = false;
		off = false;
		status.activitySensed = false;
		status.noActivitySensed = false;
		trigger.on = false;
		trigger.off = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_TRANSMITTING:
			transitioned = physicalEntity_Template__Detecting__Sensor_Transmitting_react(transitioned);
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_RECEIVING:
			transitioned = physicalEntity_Template__Detecting__Sensor_Receiving_react(transitioned);
			break;
		case PHYSICALENTITY_TEMPLATE__OFF_:
			transitioned = physicalEntity_Template__off__react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_TRIGGER_CHANGED:
				transitioned = physicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed_react(transitioned);
				break;
			case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_COMPARING:
				transitioned = physicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ONSTANDBY:
				transitioned = physicalEntity_Template__Detecting__Actuator_OnStandby_react(transitioned);
				break;
			case PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ACTUATE_TRIGGER:
				transitioned = physicalEntity_Template__Detecting__Actuator_Actuate_Trigger_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CONSUMINGMINIMUM:
				physicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum_react(transitioned);
				break;
			case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CIRCUITTRIGGER:
				physicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case PHYSICALENTITY_TEMPLATE__DETECTING_:
			return stateVector[0].ordinal() >= State.
					PHYSICALENTITY_TEMPLATE__DETECTING_.ordinal()&& stateVector[0].ordinal() <= State.PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CIRCUITTRIGGER.ordinal();
		case PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_TRANSMITTING:
			return stateVector[0] == State.PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_TRANSMITTING;
		case PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_RECEIVING:
			return stateVector[0] == State.PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_RECEIVING;
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA:
			return stateVector[1].ordinal() >= State.
					PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA.ordinal()&& stateVector[1].ordinal() <= State.PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_COMPARING.ordinal();
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_TRIGGER_CHANGED:
			return stateVector[1] == State.PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_TRIGGER_CHANGED;
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_COMPARING:
			return stateVector[1] == State.PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_COMPARING;
		case PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ONSTANDBY:
			return stateVector[2] == State.PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ONSTANDBY;
		case PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ACTUATE_TRIGGER:
			return stateVector[2] == State.PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ACTUATE_TRIGGER;
		case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS:
			return stateVector[3].ordinal() >= State.
					PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS.ordinal()&& stateVector[3].ordinal() <= State.PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CIRCUITTRIGGER.ordinal();
		case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CONSUMINGMINIMUM:
			return stateVector[3] == State.PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CONSUMINGMINIMUM;
		case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CIRCUITTRIGGER:
			return stateVector[3] == State.PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CIRCUITTRIGGER;
		case PHYSICALENTITY_TEMPLATE__OFF_:
			return stateVector[0] == State.PHYSICALENTITY_TEMPLATE__OFF_;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Status status() {
		return status;
	}
	
	public Oscillator oscillator() {
		return oscillator;
	}
	
	public Frequency frequency() {
		return frequency;
	}
	
	public Comparator comparator() {
		return comparator;
	}
	
	public Trigger trigger() {
		return trigger;
	}
	
	public Power power() {
		return power;
	}
	
	
	private boolean on;
	
	
	public void raiseOn() {
		inEventQueue.add(() -> {
			on = true;
		});
		runCycle();
	}
	
	private boolean off;
	
	
	public void raiseOff() {
		inEventQueue.add(() -> {
			off = true;
		});
		runCycle();
	}
	
	private Controller_Component controller;
	
	public Controller_Component getController() {
		return controller;
	}
	
	public void setController(Controller_Component value) {
		this.controller = value;
	}
	
	private Actuator_Component actuator;
	
	public Actuator_Component getActuator() {
		return actuator;
	}
	
	public void setActuator(Actuator_Component value) {
		this.actuator = value;
	}
	
	private Power_Component powerSupply;
	
	public Power_Component getPowerSupply() {
		return powerSupply;
	}
	
	public void setPowerSupply(Power_Component value) {
		this.powerSupply = value;
	}
	
	private boolean reading;
	
	public boolean getReading() {
		return reading;
	}
	
	public void setReading(boolean value) {
		this.reading = value;
	}
	
	private long sensorData;
	
	public long getSensorData() {
		return sensorData;
	}
	
	public void setSensorData(long value) {
		this.sensorData = value;
	}
	
	private long environmentData;
	
	public long getEnvironmentData() {
		return environmentData;
	}
	
	public void setEnvironmentData(long value) {
		this.environmentData = value;
	}
	
	/* Entry action for state '<Detecting>'. */
	private void entryAction_PhysicalEntity_Template__Detecting_() {
		/* Entry action for state '<Detecting>'. */
		timerService.setTimer(this, 0, (1l * 1000l), true);
		setReading(true);
	}
	
	/* Entry action for state 'Transmitting'. */
	private void entryAction_PhysicalEntity_Template__Detecting__Sensor_Transmitting() {
		/* Entry action for state 'Transmitting'. */
		timerService.setTimer(this, 1, (1l * 1000l), true);
	}
	
	/* Entry action for state 'Receiving'. */
	private void entryAction_PhysicalEntity_Template__Detecting__Sensor_Receiving() {
		/* Entry action for state 'Receiving'. */
		timerService.setTimer(this, 2, (1l * 1000l), true);
	}
	
	/* Entry action for state 'Reading_Sensor_Data'. */
	private void entryAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data() {
		/* Entry action for state 'Reading_Sensor_Data'. */
		timerService.setTimer(this, 3, (1l * 1000l), false);
		comparator.setWorking(true);
	}
	
	/* Entry action for state 'Trigger_Changed'. */
	private void entryAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed() {
		/* Entry action for state 'Trigger_Changed'. */
		trigger.raiseOn();
		status.setActivity(true);
		getController().actuator().raiseTrigger();
	}
	
	/* Entry action for state 'Comparing'. */
	private void entryAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing() {
		/* Entry action for state 'Comparing'. */
		status.setActivity(false);
	}
	
	/* Entry action for state 'OnStandby'. */
	private void entryAction_PhysicalEntity_Template__Detecting__Actuator_OnStandby() {
		/* Entry action for state 'OnStandby'. */
		timerService.setTimer(this, 4, (1l * 1000l), false);
	}
	
	/* Entry action for state 'Actuate_Trigger'. */
	private void entryAction_PhysicalEntity_Template__Detecting__Actuator_Actuate_Trigger() {
		/* Entry action for state 'Actuate_Trigger'. */
		actuator.setIsTriggered(true);
	}
	
	/* Entry action for state 'ConsumingMinimum'. */
	private void entryAction_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum() {
		/* Entry action for state 'ConsumingMinimum'. */
		power.setKWh(1l);
	}
	
	/* Entry action for state 'CircuitTrigger'. */
	private void entryAction_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger() {
		/* Entry action for state 'CircuitTrigger'. */
		timerService.setTimer(this, 5, (5l * 1000l), false);
		power.setKWh(power.getKWh() + 5l);
	}
	
	/* Entry action for state '<off>'. */
	private void entryAction_PhysicalEntity_Template__off_() {
		/* Entry action for state '<off>'. */
		setReading(false);
	}
	
	/* Exit action for state '<Detecting>'. */
	private void exitAction_PhysicalEntity_Template__Detecting_() {
		/* Exit action for state '<Detecting>'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Transmitting'. */
	private void exitAction_PhysicalEntity_Template__Detecting__Sensor_Transmitting() {
		/* Exit action for state 'Transmitting'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Receiving'. */
	private void exitAction_PhysicalEntity_Template__Detecting__Sensor_Receiving() {
		/* Exit action for state 'Receiving'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Reading_Sensor_Data'. */
	private void exitAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data() {
		/* Exit action for state 'Reading_Sensor_Data'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Trigger_Changed'. */
	private void exitAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed() {
		/* Exit action for state 'Trigger_Changed'. */
		trigger.raiseOff();
		controller.sensors().setTriggered(false);
	}
	
	/* Exit action for state 'OnStandby'. */
	private void exitAction_PhysicalEntity_Template__Detecting__Actuator_OnStandby() {
		/* Exit action for state 'OnStandby'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'CircuitTrigger'. */
	private void exitAction_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger() {
		/* Exit action for state 'CircuitTrigger'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state <Detecting> */
	private void enterSequence_PhysicalEntity_Template__Detecting__default() {
		/* 'default' enter sequence for state <Detecting> */
		entryAction_PhysicalEntity_Template__Detecting_();
		enterSequence_PhysicalEntity_Template__Detecting__Sensor_default();
		enterSequence_PhysicalEntity_Template__Detecting__Controller_default();
		enterSequence_PhysicalEntity_Template__Detecting__Actuator_default();
		enterSequence_PhysicalEntity_Template__Detecting__Power_default();
	}
	
	/* 'default' enter sequence for state Transmitting */
	private void enterSequence_PhysicalEntity_Template__Detecting__Sensor_Transmitting_default() {
		/* 'default' enter sequence for state Transmitting */
		entryAction_PhysicalEntity_Template__Detecting__Sensor_Transmitting();
		stateVector[0] = State.PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_TRANSMITTING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Receiving */
	private void enterSequence_PhysicalEntity_Template__Detecting__Sensor_Receiving_default() {
		/* 'default' enter sequence for state Receiving */
		entryAction_PhysicalEntity_Template__Detecting__Sensor_Receiving();
		stateVector[0] = State.PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_RECEIVING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Reading_Sensor_Data */
	private void enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_default() {
		/* 'default' enter sequence for state Reading_Sensor_Data */
		entryAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data();
		enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_default();
		historyVector[0] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Trigger_Changed */
	private void enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed_default() {
		/* 'default' enter sequence for state Trigger_Changed */
		entryAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed();
		stateVector[1] = State.PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_TRIGGER_CHANGED;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Comparing */
	private void enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing_default() {
		/* 'default' enter sequence for state Comparing */
		entryAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing();
		stateVector[1] = State.PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_COMPARING;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state OnStandby */
	private void enterSequence_PhysicalEntity_Template__Detecting__Actuator_OnStandby_default() {
		/* 'default' enter sequence for state OnStandby */
		entryAction_PhysicalEntity_Template__Detecting__Actuator_OnStandby();
		stateVector[2] = State.PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ONSTANDBY;
		stateConfVectorPosition = 2;
		historyVector[1] = stateVector[2];
	}
	
	/* 'default' enter sequence for state Actuate_Trigger */
	private void enterSequence_PhysicalEntity_Template__Detecting__Actuator_Actuate_Trigger_default() {
		/* 'default' enter sequence for state Actuate_Trigger */
		entryAction_PhysicalEntity_Template__Detecting__Actuator_Actuate_Trigger();
		stateVector[2] = State.PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ACTUATE_TRIGGER;
		stateConfVectorPosition = 2;
		historyVector[1] = stateVector[2];
	}
	
	/* 'default' enter sequence for state PowerSupplyStatus */
	private void enterSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_default() {
		/* 'default' enter sequence for state PowerSupplyStatus */
		enterSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_default();
	}
	
	/* 'default' enter sequence for state ConsumingMinimum */
	private void enterSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum_default() {
		/* 'default' enter sequence for state ConsumingMinimum */
		entryAction_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum();
		stateVector[3] = State.PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CONSUMINGMINIMUM;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state CircuitTrigger */
	private void enterSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger_default() {
		/* 'default' enter sequence for state CircuitTrigger */
		entryAction_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger();
		stateVector[3] = State.PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CIRCUITTRIGGER;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state <off> */
	private void enterSequence_PhysicalEntity_Template__off__default() {
		/* 'default' enter sequence for state <off> */
		entryAction_PhysicalEntity_Template__off_();
		stateVector[0] = State.PHYSICALENTITY_TEMPLATE__OFF_;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for region PhysicalEntity_Template */
	private void enterSequence_PhysicalEntity_Template_default() {
		/* 'default' enter sequence for region PhysicalEntity_Template */
		react_PhysicalEntity_Template__entry_Default();
	}
	
	/* 'default' enter sequence for region Sensor */
	private void enterSequence_PhysicalEntity_Template__Detecting__Sensor_default() {
		/* 'default' enter sequence for region Sensor */
		react_PhysicalEntity_Template__Detecting__Sensor__entry_Default();
	}
	
	/* 'default' enter sequence for region Controller */
	private void enterSequence_PhysicalEntity_Template__Detecting__Controller_default() {
		/* 'default' enter sequence for region Controller */
		react_PhysicalEntity_Template__Detecting__Controller__entry_Default();
	}
	
	/* shallow enterSequence with history in child Controller */
	private void shallowEnterSequence_PhysicalEntity_Template__Detecting__Controller() {
		/* shallow enterSequence with history in child Controller */
		switch (historyVector[0]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_TRIGGER_CHANGED:
			enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_default();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_COMPARING:
			enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region Processing */
	private void enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_default() {
		/* 'default' enter sequence for region Processing */
		react_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing__entry_Default();
	}
	
	/* 'default' enter sequence for region Actuator */
	private void enterSequence_PhysicalEntity_Template__Detecting__Actuator_default() {
		/* 'default' enter sequence for region Actuator */
		react_PhysicalEntity_Template__Detecting__Actuator__entry_Default();
	}
	
	/* shallow enterSequence with history in child Actuator */
	private void shallowEnterSequence_PhysicalEntity_Template__Detecting__Actuator() {
		/* shallow enterSequence with history in child Actuator */
		switch (historyVector[1]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ONSTANDBY:
			enterSequence_PhysicalEntity_Template__Detecting__Actuator_OnStandby_default();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ACTUATE_TRIGGER:
			enterSequence_PhysicalEntity_Template__Detecting__Actuator_Actuate_Trigger_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region Power */
	private void enterSequence_PhysicalEntity_Template__Detecting__Power_default() {
		/* 'default' enter sequence for region Power */
		react_PhysicalEntity_Template__Detecting__Power__entry_Default();
	}
	
	/* 'default' enter sequence for region Status */
	private void enterSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_default() {
		/* 'default' enter sequence for region Status */
		react_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status__entry_Default();
	}
	
	/* Default exit sequence for state <Detecting> */
	private void exitSequence_PhysicalEntity_Template__Detecting_() {
		/* Default exit sequence for state <Detecting> */
		exitSequence_PhysicalEntity_Template__Detecting__Sensor();
		exitSequence_PhysicalEntity_Template__Detecting__Controller();
		exitSequence_PhysicalEntity_Template__Detecting__Actuator();
		exitSequence_PhysicalEntity_Template__Detecting__Power();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateVector[2] = State.$NULLSTATE$;
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		exitAction_PhysicalEntity_Template__Detecting_();
	}
	
	/* Default exit sequence for state Transmitting */
	private void exitSequence_PhysicalEntity_Template__Detecting__Sensor_Transmitting() {
		/* Default exit sequence for state Transmitting */
		stateVector[0] = State.PHYSICALENTITY_TEMPLATE__DETECTING_;
		stateConfVectorPosition = 0;
		exitAction_PhysicalEntity_Template__Detecting__Sensor_Transmitting();
	}
	
	/* Default exit sequence for state Receiving */
	private void exitSequence_PhysicalEntity_Template__Detecting__Sensor_Receiving() {
		/* Default exit sequence for state Receiving */
		stateVector[0] = State.PHYSICALENTITY_TEMPLATE__DETECTING_;
		stateConfVectorPosition = 0;
		exitAction_PhysicalEntity_Template__Detecting__Sensor_Receiving();
	}
	
	/* Default exit sequence for state Reading_Sensor_Data */
	private void exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data() {
		/* Default exit sequence for state Reading_Sensor_Data */
		exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing();
		stateVector[1] = State.PHYSICALENTITY_TEMPLATE__DETECTING_;
		stateConfVectorPosition = 1;
		exitAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data();
	}
	
	/* Default exit sequence for state Trigger_Changed */
	private void exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed() {
		/* Default exit sequence for state Trigger_Changed */
		stateVector[1] = State.PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA;
		stateConfVectorPosition = 1;
		exitAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed();
	}
	
	/* Default exit sequence for state Comparing */
	private void exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing() {
		/* Default exit sequence for state Comparing */
		stateVector[1] = State.PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state OnStandby */
	private void exitSequence_PhysicalEntity_Template__Detecting__Actuator_OnStandby() {
		/* Default exit sequence for state OnStandby */
		stateVector[2] = State.PHYSICALENTITY_TEMPLATE__DETECTING_;
		stateConfVectorPosition = 2;
		exitAction_PhysicalEntity_Template__Detecting__Actuator_OnStandby();
	}
	
	/* Default exit sequence for state Actuate_Trigger */
	private void exitSequence_PhysicalEntity_Template__Detecting__Actuator_Actuate_Trigger() {
		/* Default exit sequence for state Actuate_Trigger */
		stateVector[2] = State.PHYSICALENTITY_TEMPLATE__DETECTING_;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state PowerSupplyStatus */
	private void exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus() {
		/* Default exit sequence for state PowerSupplyStatus */
		exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status();
		stateVector[3] = State.PHYSICALENTITY_TEMPLATE__DETECTING_;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state ConsumingMinimum */
	private void exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum() {
		/* Default exit sequence for state ConsumingMinimum */
		stateVector[3] = State.PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state CircuitTrigger */
	private void exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger() {
		/* Default exit sequence for state CircuitTrigger */
		stateVector[3] = State.PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS;
		stateConfVectorPosition = 3;
		exitAction_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger();
	}
	
	/* Default exit sequence for state <off> */
	private void exitSequence_PhysicalEntity_Template__off_() {
		/* Default exit sequence for state <off> */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for region PhysicalEntity_Template */
	private void exitSequence_PhysicalEntity_Template() {
		/* Default exit sequence for region PhysicalEntity_Template */
		switch (stateVector[0]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_TRANSMITTING:
			exitSequence_PhysicalEntity_Template__Detecting__Sensor_Transmitting();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_RECEIVING:
			exitSequence_PhysicalEntity_Template__Detecting__Sensor_Receiving();
			break;
		case PHYSICALENTITY_TEMPLATE__OFF_:
			exitSequence_PhysicalEntity_Template__off_();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA:
			exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_TRIGGER_CHANGED:
			exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed();
			exitAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_COMPARING:
			exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing();
			exitAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data();
			break;
		default:
			break;
		}
		switch (stateVector[2]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ONSTANDBY:
			exitSequence_PhysicalEntity_Template__Detecting__Actuator_OnStandby();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ACTUATE_TRIGGER:
			exitSequence_PhysicalEntity_Template__Detecting__Actuator_Actuate_Trigger();
			break;
		default:
			break;
		}
		switch (stateVector[3]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS:
			exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus();
			exitAction_PhysicalEntity_Template__Detecting_();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CONSUMINGMINIMUM:
			exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum();
			exitAction_PhysicalEntity_Template__Detecting_();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CIRCUITTRIGGER:
			exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger();
			exitAction_PhysicalEntity_Template__Detecting_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Sensor */
	private void exitSequence_PhysicalEntity_Template__Detecting__Sensor() {
		/* Default exit sequence for region Sensor */
		switch (stateVector[0]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_TRANSMITTING:
			exitSequence_PhysicalEntity_Template__Detecting__Sensor_Transmitting();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__SENSOR_RECEIVING:
			exitSequence_PhysicalEntity_Template__Detecting__Sensor_Receiving();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Controller */
	private void exitSequence_PhysicalEntity_Template__Detecting__Controller() {
		/* Default exit sequence for region Controller */
		switch (stateVector[1]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA:
			exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_TRIGGER_CHANGED:
			exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed();
			exitAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_COMPARING:
			exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing();
			exitAction_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Processing */
	private void exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing() {
		/* Default exit sequence for region Processing */
		switch (stateVector[1]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_TRIGGER_CHANGED:
			exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__CONTROLLER_READING_SENSOR_DATA_PROCESSING_COMPARING:
			exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Actuator */
	private void exitSequence_PhysicalEntity_Template__Detecting__Actuator() {
		/* Default exit sequence for region Actuator */
		switch (stateVector[2]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ONSTANDBY:
			exitSequence_PhysicalEntity_Template__Detecting__Actuator_OnStandby();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__ACTUATOR_ACTUATE_TRIGGER:
			exitSequence_PhysicalEntity_Template__Detecting__Actuator_Actuate_Trigger();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Power */
	private void exitSequence_PhysicalEntity_Template__Detecting__Power() {
		/* Default exit sequence for region Power */
		switch (stateVector[3]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS:
			exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CONSUMINGMINIMUM:
			exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CIRCUITTRIGGER:
			exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Status */
	private void exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status() {
		/* Default exit sequence for region Status */
		switch (stateVector[3]) {
		case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CONSUMINGMINIMUM:
			exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum();
			break;
		case PHYSICALENTITY_TEMPLATE__DETECTING__POWER_POWERSUPPLYSTATUS_STATUS_CIRCUITTRIGGER:
			exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_PhysicalEntity_Template__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_PhysicalEntity_Template__Detecting__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_PhysicalEntity_Template__Detecting__Sensor__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_PhysicalEntity_Template__Detecting__Sensor_Transmitting_default();
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_PhysicalEntity_Template__Detecting__Controller__entry_Default() {
		/* Default react sequence for shallow history entry  */
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_PhysicalEntity_Template__Detecting__Controller();
		} else {
			getController().enter();
			enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing_default();
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_PhysicalEntity_Template__Detecting__Actuator__entry_Default() {
		/* Default react sequence for shallow history entry  */
		/* Enter the region with shallow history */
		if (historyVector[1] != State.$NULLSTATE$) {
			shallowEnterSequence_PhysicalEntity_Template__Detecting__Actuator();
		} else {
			getActuator().enter();
			enterSequence_PhysicalEntity_Template__Detecting__Actuator_OnStandby_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_PhysicalEntity_Template__Detecting__Power__entry_Default() {
		/* Default react sequence for initial entry  */
		getPowerSupply().enter();
		enterSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum_default();
	}
	
	private long physicalEntity_Template__Detecting__react(long transitioned_before) {
		/* The reactions of state <Detecting>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (off) {
				exitSequence_PhysicalEntity_Template__Detecting_();
				enterSequence_PhysicalEntity_Template__off__default();
				transitioned_after = 3l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (timeEvents[0]) {
				frequency.setDoppler((oscillator.echo_value - oscillator.transmit_value));
			}
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long physicalEntity_Template__Detecting__Sensor_Transmitting_react(long transitioned_before) {
		/* The reactions of state Transmitting. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((timeEvents[1]) && (oscillator.getReceiving()))) {
				exitSequence_PhysicalEntity_Template__Detecting__Sensor_Transmitting();
				timeEvents[1] = false;
				enterSequence_PhysicalEntity_Template__Detecting__Sensor_Receiving_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long physicalEntity_Template__Detecting__Sensor_Receiving_react(long transitioned_before) {
		/* The reactions of state Receiving. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((timeEvents[2]) && (oscillator.getTransducing()))) {
				exitSequence_PhysicalEntity_Template__Detecting__Sensor_Receiving();
				timeEvents[2] = false;
				enterSequence_PhysicalEntity_Template__Detecting__Sensor_Transmitting_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long physicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_react(long transitioned_before) {
		/* The reactions of state Reading_Sensor_Data. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[3]) {
				exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data();
				timeEvents[3] = false;
				enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long physicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed_react(long transitioned_before) {
		/* The reactions of state Trigger_Changed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (frequency.getDoppler()==0l) {
				exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed();
				controller.sensors().setTriggered(false);
				enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing_default();
				physicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = physicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long physicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing_react(long transitioned_before) {
		/* The reactions of state Comparing. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (frequency.getDoppler()>0l) {
				exitSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Comparing();
				controller.sensors().setTriggered(true);
				enterSequence_PhysicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_Processing_Trigger_Changed_default();
				physicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = physicalEntity_Template__Detecting__Controller_Reading_Sensor_Data_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long physicalEntity_Template__Detecting__Actuator_OnStandby_react(long transitioned_before) {
		/* The reactions of state OnStandby. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (timeEvents[4]) {
				exitSequence_PhysicalEntity_Template__Detecting__Actuator_OnStandby();
				timeEvents[4] = false;
				enterSequence_PhysicalEntity_Template__Detecting__Actuator_OnStandby_default();
				transitioned_after = 2l;
			} else {
				if (trigger.on) {
					exitSequence_PhysicalEntity_Template__Detecting__Actuator_OnStandby();
					enterSequence_PhysicalEntity_Template__Detecting__Actuator_Actuate_Trigger_default();
					transitioned_after = 2l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long physicalEntity_Template__Detecting__Actuator_Actuate_Trigger_react(long transitioned_before) {
		/* The reactions of state Actuate_Trigger. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (trigger.off) {
				exitSequence_PhysicalEntity_Template__Detecting__Actuator_Actuate_Trigger();
				enterSequence_PhysicalEntity_Template__Detecting__Actuator_OnStandby_default();
				transitioned_after = 2l;
			}
		}
		return transitioned_after;
	}
	
	private long physicalEntity_Template__Detecting__Power_PowerSupplyStatus_react(long transitioned_before) {
		/* The reactions of state PowerSupplyStatus. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = physicalEntity_Template__Detecting__react(transitioned_before);
		return transitioned_after;
	}
	
	private long physicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum_react(long transitioned_before) {
		/* The reactions of state ConsumingMinimum. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<3l) {
			if (trigger.on) {
				exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum();
				enterSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger_default();
				physicalEntity_Template__Detecting__Power_PowerSupplyStatus_react(3l);
				transitioned_after = 3l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = physicalEntity_Template__Detecting__Power_PowerSupplyStatus_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long physicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger_react(long transitioned_before) {
		/* The reactions of state CircuitTrigger. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<3l) {
			if (timeEvents[5]) {
				exitSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_CircuitTrigger();
				timeEvents[5] = false;
				enterSequence_PhysicalEntity_Template__Detecting__Power_PowerSupplyStatus_Status_ConsumingMinimum_default();
				physicalEntity_Template__Detecting__Power_PowerSupplyStatus_react(3l);
				transitioned_after = 3l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = physicalEntity_Template__Detecting__Power_PowerSupplyStatus_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long physicalEntity_Template__off__react(long transitioned_before) {
		/* The reactions of state <off>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (on) {
				exitSequence_PhysicalEntity_Template__off_();
				enterSequence_PhysicalEntity_Template__Detecting__default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
