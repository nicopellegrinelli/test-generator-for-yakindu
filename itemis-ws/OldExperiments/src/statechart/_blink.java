/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class _blink implements ITimed, IEventDriven {
	public enum State {
		MAIN_LIGHT,
		MAIN_LIGHT__REGION0_ON1,
		MAIN_LIGHT__REGION0_ON2,
		MAIN_LIGHT__REGION0_ON3,
		MAIN_LIGHT__REGION0_ON4,
		MAIN_LIGHT__REGION0_ON5,
		MAIN_DARK,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public _blink() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart _blink */
		setT_light(500l);
		setT_dark(500l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart _blink */
		enterSequence_main_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart _blink */
		exitSequence_main();
		stateVector[0] = State.$NULLSTATE$;
		/* Exit action for state '_blink'. */
		operationCallback.switchOff(1l);
		operationCallback.switchOff(2l);
		operationCallback.switchOff(3l);
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_LIGHT__REGION0_ON1:
			main_Light__region0_On1_react(-1l);
			break;
		case MAIN_LIGHT__REGION0_ON2:
			main_Light__region0_On2_react(-1l);
			break;
		case MAIN_LIGHT__REGION0_ON3:
			main_Light__region0_On3_react(-1l);
			break;
		case MAIN_LIGHT__REGION0_ON4:
			main_Light__region0_On4_react(-1l);
			break;
		case MAIN_LIGHT__REGION0_ON5:
			main_Light__region0_On5_react(-1l);
			break;
		case MAIN_DARK:
			main_Dark_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_LIGHT:
			return stateVector[0].ordinal() >= State.
					MAIN_LIGHT.ordinal()&& stateVector[0].ordinal() <= State.MAIN_LIGHT__REGION0_ON5.ordinal();
		case MAIN_LIGHT__REGION0_ON1:
			return stateVector[0] == State.MAIN_LIGHT__REGION0_ON1;
		case MAIN_LIGHT__REGION0_ON2:
			return stateVector[0] == State.MAIN_LIGHT__REGION0_ON2;
		case MAIN_LIGHT__REGION0_ON3:
			return stateVector[0] == State.MAIN_LIGHT__REGION0_ON3;
		case MAIN_LIGHT__REGION0_ON4:
			return stateVector[0] == State.MAIN_LIGHT__REGION0_ON4;
		case MAIN_LIGHT__REGION0_ON5:
			return stateVector[0] == State.MAIN_LIGHT__REGION0_ON5;
		case MAIN_DARK:
			return stateVector[0] == State.MAIN_DARK;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	public interface OperationCallback {
	
		public void switchOn(long led);
		
		public void switchOff(long led);
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean cycleCompleted;
	
	
	protected void raiseCycleCompleted() {
		cycleCompleted = true;
		cycleCompletedObservable.next(null);
	}
	
	private Observable<Void> cycleCompletedObservable = new Observable<Void>();
	
	public Observable<Void> getCycleCompleted() {
		return cycleCompletedObservable;
	}
	
	private long t_light;
	
	public long getT_light() {
		return t_light;
	}
	
	public void setT_light(long value) {
		this.t_light = value;
	}
	
	private long t_dark;
	
	public long getT_dark() {
		return t_dark;
	}
	
	public void setT_dark(long value) {
		this.t_dark = value;
	}
	
	/* Entry action for state 'On1'. */
	private void entryAction_main_Light__region0_On1() {
		/* Entry action for state 'On1'. */
		timerService.setTimer(this, 0, ((getT_light() / 5l)), false);
		operationCallback.switchOn(1l);
	}
	
	/* Entry action for state 'On2'. */
	private void entryAction_main_Light__region0_On2() {
		/* Entry action for state 'On2'. */
		timerService.setTimer(this, 1, ((getT_light() / 5l)), false);
		operationCallback.switchOn(2l);
	}
	
	/* Entry action for state 'On3'. */
	private void entryAction_main_Light__region0_On3() {
		/* Entry action for state 'On3'. */
		timerService.setTimer(this, 2, ((getT_light() / 5l)), false);
		operationCallback.switchOn(3l);
	}
	
	/* Entry action for state 'On4'. */
	private void entryAction_main_Light__region0_On4() {
		/* Entry action for state 'On4'. */
		timerService.setTimer(this, 3, ((getT_light() / 5l)), false);
		operationCallback.switchOff(1l);
	}
	
	/* Entry action for state 'On5'. */
	private void entryAction_main_Light__region0_On5() {
		/* Entry action for state 'On5'. */
		timerService.setTimer(this, 4, ((getT_light() / 5l)), false);
		operationCallback.switchOff(2l);
	}
	
	/* Entry action for state 'Dark'. */
	private void entryAction_main_Dark() {
		/* Entry action for state 'Dark'. */
		timerService.setTimer(this, 5, getT_dark(), false);
		operationCallback.switchOff(3l);
		raiseCycleCompleted();
	}
	
	/* Exit action for state 'On1'. */
	private void exitAction_main_Light__region0_On1() {
		/* Exit action for state 'On1'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'On2'. */
	private void exitAction_main_Light__region0_On2() {
		/* Exit action for state 'On2'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'On3'. */
	private void exitAction_main_Light__region0_On3() {
		/* Exit action for state 'On3'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'On4'. */
	private void exitAction_main_Light__region0_On4() {
		/* Exit action for state 'On4'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'On5'. */
	private void exitAction_main_Light__region0_On5() {
		/* Exit action for state 'On5'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Dark'. */
	private void exitAction_main_Dark() {
		/* Exit action for state 'Dark'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state Light */
	private void enterSequence_main_Light_default() {
		/* 'default' enter sequence for state Light */
		enterSequence_main_Light__region0_default();
	}
	
	/* 'default' enter sequence for state On1 */
	private void enterSequence_main_Light__region0_On1_default() {
		/* 'default' enter sequence for state On1 */
		entryAction_main_Light__region0_On1();
		stateVector[0] = State.MAIN_LIGHT__REGION0_ON1;
	}
	
	/* 'default' enter sequence for state On2 */
	private void enterSequence_main_Light__region0_On2_default() {
		/* 'default' enter sequence for state On2 */
		entryAction_main_Light__region0_On2();
		stateVector[0] = State.MAIN_LIGHT__REGION0_ON2;
	}
	
	/* 'default' enter sequence for state On3 */
	private void enterSequence_main_Light__region0_On3_default() {
		/* 'default' enter sequence for state On3 */
		entryAction_main_Light__region0_On3();
		stateVector[0] = State.MAIN_LIGHT__REGION0_ON3;
	}
	
	/* 'default' enter sequence for state On4 */
	private void enterSequence_main_Light__region0_On4_default() {
		/* 'default' enter sequence for state On4 */
		entryAction_main_Light__region0_On4();
		stateVector[0] = State.MAIN_LIGHT__REGION0_ON4;
	}
	
	/* 'default' enter sequence for state On5 */
	private void enterSequence_main_Light__region0_On5_default() {
		/* 'default' enter sequence for state On5 */
		entryAction_main_Light__region0_On5();
		stateVector[0] = State.MAIN_LIGHT__REGION0_ON5;
	}
	
	/* 'default' enter sequence for state Dark */
	private void enterSequence_main_Dark_default() {
		/* 'default' enter sequence for state Dark */
		entryAction_main_Dark();
		stateVector[0] = State.MAIN_DARK;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		/* 'default' enter sequence for region main */
		react_main__entry_Default();
	}
	
	/* 'default' enter sequence for region  */
	private void enterSequence_main_Light__region0_default() {
		/* 'default' enter sequence for region  */
		react_main_Light__region0__entry_Default();
	}
	
	/* Default exit sequence for state Light */
	private void exitSequence_main_Light() {
		/* Default exit sequence for state Light */
		exitSequence_main_Light__region0();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state On1 */
	private void exitSequence_main_Light__region0_On1() {
		/* Default exit sequence for state On1 */
		stateVector[0] = State.MAIN_LIGHT;
		exitAction_main_Light__region0_On1();
	}
	
	/* Default exit sequence for state On2 */
	private void exitSequence_main_Light__region0_On2() {
		/* Default exit sequence for state On2 */
		stateVector[0] = State.MAIN_LIGHT;
		exitAction_main_Light__region0_On2();
	}
	
	/* Default exit sequence for state On3 */
	private void exitSequence_main_Light__region0_On3() {
		/* Default exit sequence for state On3 */
		stateVector[0] = State.MAIN_LIGHT;
		exitAction_main_Light__region0_On3();
	}
	
	/* Default exit sequence for state On4 */
	private void exitSequence_main_Light__region0_On4() {
		/* Default exit sequence for state On4 */
		stateVector[0] = State.MAIN_LIGHT;
		exitAction_main_Light__region0_On4();
	}
	
	/* Default exit sequence for state On5 */
	private void exitSequence_main_Light__region0_On5() {
		/* Default exit sequence for state On5 */
		stateVector[0] = State.MAIN_LIGHT;
		exitAction_main_Light__region0_On5();
	}
	
	/* Default exit sequence for state Dark */
	private void exitSequence_main_Dark() {
		/* Default exit sequence for state Dark */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_Dark();
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		/* Default exit sequence for region main */
		switch (stateVector[0]) {
		case MAIN_LIGHT:
			exitSequence_main_Light();
			break;
		case MAIN_LIGHT__REGION0_ON1:
			exitSequence_main_Light__region0_On1();
			break;
		case MAIN_LIGHT__REGION0_ON2:
			exitSequence_main_Light__region0_On2();
			break;
		case MAIN_LIGHT__REGION0_ON3:
			exitSequence_main_Light__region0_On3();
			break;
		case MAIN_LIGHT__REGION0_ON4:
			exitSequence_main_Light__region0_On4();
			break;
		case MAIN_LIGHT__REGION0_ON5:
			exitSequence_main_Light__region0_On5();
			break;
		case MAIN_DARK:
			exitSequence_main_Dark();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region  */
	private void exitSequence_main_Light__region0() {
		/* Default exit sequence for region  */
		switch (stateVector[0]) {
		case MAIN_LIGHT__REGION0_ON1:
			exitSequence_main_Light__region0_On1();
			break;
		case MAIN_LIGHT__REGION0_ON2:
			exitSequence_main_Light__region0_On2();
			break;
		case MAIN_LIGHT__REGION0_ON3:
			exitSequence_main_Light__region0_On3();
			break;
		case MAIN_LIGHT__REGION0_ON4:
			exitSequence_main_Light__region0_On4();
			break;
		case MAIN_LIGHT__REGION0_ON5:
			exitSequence_main_Light__region0_On5();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_Light_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Light__region0__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_Light__region0_On1_default();
	}
	
	private long main_Light__region0_On1_react(long transitioned_before) {
		/* The reactions of state On1. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_Light__region0_On1();
				timeEvents[0] = false;
				enterSequence_main_Light__region0_On2_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_Light__region0_On2_react(long transitioned_before) {
		/* The reactions of state On2. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_Light__region0_On2();
				timeEvents[1] = false;
				enterSequence_main_Light__region0_On3_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_Light__region0_On3_react(long transitioned_before) {
		/* The reactions of state On3. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_main_Light__region0_On3();
				timeEvents[2] = false;
				enterSequence_main_Light__region0_On4_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_Light__region0_On4_react(long transitioned_before) {
		/* The reactions of state On4. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[3]) {
				exitSequence_main_Light__region0_On4();
				timeEvents[3] = false;
				enterSequence_main_Light__region0_On5_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_Light__region0_On5_react(long transitioned_before) {
		/* The reactions of state On5. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[4]) {
				exitSequence_main_Light();
				timeEvents[4] = false;
				enterSequence_main_Dark_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_Dark_react(long transitioned_before) {
		/* The reactions of state Dark. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[5]) {
				exitSequence_main_Dark();
				timeEvents[5] = false;
				enterSequence_main_Light_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
