/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class _Trolley implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_TROLLEY,
		MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSCLOSED,
		MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN,
		MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_BOARDINGPOSSIBLE,
		MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_DOORSOBSTRUCTED,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_JUST_ARRIVED,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPEN,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPENAWAITINGREQUEST,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSFREE,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSOBSTRUCTED,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_DOORSCLOSED,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_RESPONDTOAPPROACHINGSTATION,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_BREAKUNTILSTANDSTILL,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_STARTDEPARTURE,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_EMERGENCYSTARTED,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_BREAKUNTILSTANDSTILL,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPEN,
		MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPENARRIVAL,
		MAIN_REGION_TROLLEY_REQUESTHANDLER_ACCEPTINGREQUESTS,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[3];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean doorFree;
	private boolean doorObstructed;
	private boolean stopAdded;
	private boolean openDoorsIn;
	private boolean closeDoorsIn;
	private boolean local_closeDoors;
	private boolean isDoorObstructed;
	
	protected boolean getIsDoorObstructed() {
		return isDoorObstructed;
	}
	
	protected void setIsDoorObstructed(boolean value) {
		this.isDoorObstructed = value;
	}
	
	
	private boolean isDoorAvailable;
	
	protected boolean getIsDoorAvailable() {
		return isDoorAvailable;
	}
	
	protected void setIsDoorAvailable(boolean value) {
		this.isDoorAvailable = value;
	}
	
	
	private boolean isEmergencyActive;
	
	protected boolean getIsEmergencyActive() {
		return isEmergencyActive;
	}
	
	protected void setIsEmergencyActive(boolean value) {
		this.isEmergencyActive = value;
	}
	
	
	private boolean wasDepartureState;
	
	protected boolean getWasDepartureState() {
		return wasDepartureState;
	}
	
	protected void setWasDepartureState(boolean value) {
		this.wasDepartureState = value;
	}
	
	
	private long currentStation;
	
	protected long getCurrentStation() {
		return currentStation;
	}
	
	protected void setCurrentStation(long value) {
		this.currentStation = value;
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public _Trolley() {
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		/* Default init sequence for statechart _Trolley */
		setStopsAt(1l);
		setRemainingCapacity(6l);
		setNumPassengers(0l);
		setIsDoorObstructed(false);
		setIsDoorAvailable(false);
		setIsEmergencyActive(false);
		setWasDepartureState(false);
		setCurrentStation(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart _Trolley */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart _Trolley */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		approachingStation = false;
		board = false;
		unboard = false;
		requestStop = false;
		atTargetSpeed = false;
		startEmergency = false;
		stopEmergency = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
	}
	
	private void clearInternalEvents() {
		doorFree = false;
		doorObstructed = false;
		stopAdded = false;
		openDoorsIn = false;
		closeDoorsIn = false;
		local_closeDoors = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSCLOSED:
			transitioned = main_region_Trolley_BoardingManager_DoorsClosed_react(transitioned);
			break;
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_BOARDINGPOSSIBLE:
			transitioned = main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible_react(transitioned);
			break;
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_DOORSOBSTRUCTED:
			transitioned = main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_JUST_ARRIVED:
				transitioned = main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPEN:
				transitioned = main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPENAWAITINGREQUEST:
				transitioned = main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpenAwaitingRequest_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSFREE:
				transitioned = main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSOBSTRUCTED:
				transitioned = main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsObstructed_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_DOORSCLOSED:
				transitioned = main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_RESPONDTOAPPROACHINGSTATION:
				transitioned = main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_RespondToApproachingStation_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_BREAKUNTILSTANDSTILL:
				transitioned = main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_BreakUntilStandstill_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_STARTDEPARTURE:
				transitioned = main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_StartDeparture_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_EMERGENCYSTARTED:
				transitioned = main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_BREAKUNTILSTANDSTILL:
				transitioned = main_region_Trolley_Departure_Arrival_EmergencyStop_r1_BreakUntilStandstill_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPEN:
				transitioned = main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpen_react(transitioned);
				break;
			case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPENARRIVAL:
				transitioned = main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpenArrival_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case MAIN_REGION_TROLLEY_REQUESTHANDLER_ACCEPTINGREQUESTS:
				main_region_Trolley_requestHandler_AcceptingRequests_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			clearInternalEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return true;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_TROLLEY:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_TROLLEY.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_TROLLEY_REQUESTHANDLER_ACCEPTINGREQUESTS.ordinal();
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSCLOSED:
			return stateVector[0] == State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSCLOSED;
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_DOORSOBSTRUCTED.ordinal();
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_BOARDINGPOSSIBLE:
			return stateVector[0] == State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_BOARDINGPOSSIBLE;
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_DOORSOBSTRUCTED:
			return stateVector[0] == State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_DOORSOBSTRUCTED;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPENAWAITINGREQUEST.ordinal();
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_JUST_ARRIVED:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_JUST_ARRIVED;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPEN:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPEN;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPENAWAITINGREQUEST:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPENAWAITINGREQUEST;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_STARTDEPARTURE.ordinal();
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSOBSTRUCTED.ordinal();
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSFREE:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSFREE;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSOBSTRUCTED:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSOBSTRUCTED;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_DOORSCLOSED:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_DOORSCLOSED;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_RESPONDTOAPPROACHINGSTATION:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_RESPONDTOAPPROACHINGSTATION;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_BREAKUNTILSTANDSTILL:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_BREAKUNTILSTANDSTILL;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_STARTDEPARTURE:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_STARTDEPARTURE;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPENARRIVAL.ordinal();
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_EMERGENCYSTARTED:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_EMERGENCYSTARTED;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_BREAKUNTILSTANDSTILL:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_BREAKUNTILSTANDSTILL;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPEN:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPEN;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPENARRIVAL:
			return stateVector[1] == State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPENARRIVAL;
		case MAIN_REGION_TROLLEY_REQUESTHANDLER_ACCEPTINGREQUESTS:
			return stateVector[2] == State.MAIN_REGION_TROLLEY_REQUESTHANDLER_ACCEPTINGREQUESTS;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	protected void raiseDoorFree() {
		internalEventQueue.add(() -> {
			doorFree = true;
		});
	}
	
	protected void raiseDoorObstructed() {
		internalEventQueue.add(() -> {
			doorObstructed = true;
		});
	}
	
	protected void raiseStopAdded() {
		internalEventQueue.add(() -> {
			stopAdded = true;
		});
	}
	
	protected void raiseOpenDoorsIn() {
		internalEventQueue.add(() -> {
			openDoorsIn = true;
		});
	}
	
	protected void raiseCloseDoorsIn() {
		internalEventQueue.add(() -> {
			closeDoorsIn = true;
		});
	}
	
	protected void raiseLocal_closeDoors() {
		internalEventQueue.add(() -> {
			local_closeDoors = true;
		});
	}
	
	private boolean approachingStation;
	
	private long approachingStationValue;
	
	
	public void raiseApproachingStation(final long value) {
		inEventQueue.add(() -> {
			approachingStationValue = value;
			approachingStation = true;
		});
		runCycle();
	}
	protected long getApproachingStationValue() {
		if (! approachingStation ) 
			throw new IllegalStateException("Illegal event value access. Event ApproachingStation is not raised!");
		return approachingStationValue;
	}
	
	private boolean openDoors;
	
	
	protected void raiseOpenDoors() {
		openDoors = true;
		openDoorsObservable.next(null);
	}
	
	private Observable<Void> openDoorsObservable = new Observable<Void>();
	
	public Observable<Void> getOpenDoors() {
		return openDoorsObservable;
	}
	
	private boolean closeDoors;
	
	
	protected void raiseCloseDoors() {
		closeDoors = true;
		closeDoorsObservable.next(null);
		raiseLocal_closeDoors();
	}
	
	private Observable<Void> closeDoorsObservable = new Observable<Void>();
	
	public Observable<Void> getCloseDoors() {
		return closeDoorsObservable;
	}
	
	private boolean startDoorsSignal;
	
	
	protected void raiseStartDoorsSignal() {
		startDoorsSignal = true;
		startDoorsSignalObservable.next(null);
	}
	
	private Observable<Void> startDoorsSignalObservable = new Observable<Void>();
	
	public Observable<Void> getStartDoorsSignal() {
		return startDoorsSignalObservable;
	}
	
	private boolean stopDoorsSignal;
	
	
	protected void raiseStopDoorsSignal() {
		stopDoorsSignal = true;
		stopDoorsSignalObservable.next(null);
	}
	
	private Observable<Void> stopDoorsSignalObservable = new Observable<Void>();
	
	public Observable<Void> getStopDoorsSignal() {
		return stopDoorsSignalObservable;
	}
	
	private boolean board;
	
	
	public void raiseBoard() {
		inEventQueue.add(() -> {
			board = true;
		});
		runCycle();
	}
	
	private boolean unboard;
	
	
	public void raiseUnboard() {
		inEventQueue.add(() -> {
			unboard = true;
		});
		runCycle();
	}
	
	private boolean requestStop;
	
	private long requestStopValue;
	
	
	public void raiseRequestStop(final long value) {
		inEventQueue.add(() -> {
			requestStopValue = value;
			requestStop = true;
		});
		runCycle();
	}
	protected long getRequestStopValue() {
		if (! requestStop ) 
			throw new IllegalStateException("Illegal event value access. Event RequestStop is not raised!");
		return requestStopValue;
	}
	
	private boolean setTargetSpeed;
	
	private double setTargetSpeedValue;
	
	
	protected void raiseSetTargetSpeed(double value) {
		setTargetSpeedValue = value;
		setTargetSpeed = true;
		setTargetSpeedObservable.next(value);
	}
	
	private Observable<Double> setTargetSpeedObservable = new Observable<Double>();
	
	public Observable<Double> getSetTargetSpeed() {
		return setTargetSpeedObservable;
	}
	
	private boolean atTargetSpeed;
	
	
	public void raiseAtTargetSpeed() {
		inEventQueue.add(() -> {
			atTargetSpeed = true;
		});
		runCycle();
	}
	
	private boolean startEmergency;
	
	
	public void raiseStartEmergency() {
		inEventQueue.add(() -> {
			startEmergency = true;
		});
		runCycle();
	}
	
	private boolean stopEmergency;
	
	
	public void raiseStopEmergency() {
		inEventQueue.add(() -> {
			stopEmergency = true;
		});
		runCycle();
	}
	
	private boolean refreshUI;
	
	
	protected void raiseRefreshUI() {
		refreshUI = true;
		refreshUIObservable.next(null);
	}
	
	private Observable<Void> refreshUIObservable = new Observable<Void>();
	
	public Observable<Void> getRefreshUI() {
		return refreshUIObservable;
	}
	
	private long stopsAt;
	
	public long getStopsAt() {
		return stopsAt;
	}
	
	public void setStopsAt(long value) {
		this.stopsAt = value;
	}
	
	private long remainingCapacity;
	
	public long getRemainingCapacity() {
		return remainingCapacity;
	}
	
	public void setRemainingCapacity(long value) {
		this.remainingCapacity = value;
	}
	
	private long numPassengers;
	
	public long getNumPassengers() {
		return numPassengers;
	}
	
	public void setNumPassengers(long value) {
		this.numPassengers = value;
	}
	
	/* Entry action for state 'BoardingPossible'. */
	private void entryAction_main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible() {
		/* Entry action for state 'BoardingPossible'. */
		setIsDoorObstructed(false);
		raiseDoorFree();
	}
	
	/* Entry action for state 'DoorsObstructed'. */
	private void entryAction_main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed() {
		/* Entry action for state 'DoorsObstructed'. */
		timerService.setTimer(this, 0, (1l * 1000l), false);
		raiseDoorObstructed();
		raiseRefreshUI();
		setIsDoorObstructed(true);
	}
	
	/* Entry action for state 'Just Arrived'. */
	private void entryAction_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived() {
		/* Entry action for state 'Just Arrived'. */
		timerService.setTimer(this, 1, (1l * 1000l), false);
		setWasDepartureState(false);
	}
	
	/* Entry action for state 'DoorsOpen'. */
	private void entryAction_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen() {
		/* Entry action for state 'DoorsOpen'. */
		timerService.setTimer(this, 2, (2l * 1000l), false);
		raiseOpenDoorsIn();
		raiseOpenDoors();
		setIsDoorAvailable(true);
	}
	
	/* Entry action for state 'ClosingDoors'. */
	private void entryAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors() {
		/* Entry action for state 'ClosingDoors'. */
		raiseStartDoorsSignal();
	}
	
	/* Entry action for state 'DoorsFree'. */
	private void entryAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree() {
		/* Entry action for state 'DoorsFree'. */
		timerService.setTimer(this, 3, (1l * 1000l), false);
	}
	
	/* Entry action for state 'DoorsClosed'. */
	private void entryAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed() {
		/* Entry action for state 'DoorsClosed'. */
		timerService.setTimer(this, 4, (1l * 1000l), false);
		setIsDoorAvailable(false);
	}
	
	/* Entry action for state 'BreakUntilStandstill'. */
	private void entryAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_BreakUntilStandstill() {
		/* Entry action for state 'BreakUntilStandstill'. */
		raiseSetTargetSpeed(0l);
	}
	
	/* Entry action for state 'StartDeparture'. */
	private void entryAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_StartDeparture() {
		/* Entry action for state 'StartDeparture'. */
		raiseSetTargetSpeed(24l);
	}
	
	/* Entry action for state 'EmergencyStarted'. */
	private void entryAction_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted() {
		/* Entry action for state 'EmergencyStarted'. */
		timerService.setTimer(this, 5, (0l * 1000l), false);
		setIsEmergencyActive(true);
	}
	
	/* Entry action for state 'BreakUntilStandstill'. */
	private void entryAction_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_BreakUntilStandstill() {
		/* Entry action for state 'BreakUntilStandstill'. */
		raiseSetTargetSpeed(0l);
	}
	
	/* Entry action for state 'DoorsOpen'. */
	private void entryAction_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpen() {
		/* Entry action for state 'DoorsOpen'. */
		raiseOpenDoorsIn();
		raiseOpenDoors();
		setIsDoorAvailable(true);
	}
	
	/* Entry action for state 'DoorsOpenArrival'. */
	private void entryAction_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpenArrival() {
		/* Entry action for state 'DoorsOpenArrival'. */
		raiseOpenDoorsIn();
		raiseOpenDoors();
		setIsDoorAvailable(true);
	}
	
	/* Exit action for state 'DoorsObstructed'. */
	private void exitAction_main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed() {
		/* Exit action for state 'DoorsObstructed'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Just Arrived'. */
	private void exitAction_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived() {
		/* Exit action for state 'Just Arrived'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'DoorsOpen'. */
	private void exitAction_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen() {
		/* Exit action for state 'DoorsOpen'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'ClosingDoors'. */
	private void exitAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors() {
		/* Exit action for state 'ClosingDoors'. */
		setStopsAt(getStopsAt() & (~(((1l << currentStation)))));
		raiseCloseDoors();
		raiseCloseDoorsIn();
		raiseStopDoorsSignal();
		raiseRefreshUI();
		setWasDepartureState(true);
	}
	
	/* Exit action for state 'DoorsFree'. */
	private void exitAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree() {
		/* Exit action for state 'DoorsFree'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'DoorsClosed'. */
	private void exitAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed() {
		/* Exit action for state 'DoorsClosed'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'EmergencyStarted'. */
	private void exitAction_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted() {
		/* Exit action for state 'EmergencyStarted'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state Trolley */
	private void enterSequence_main_region_Trolley_default() {
		/* 'default' enter sequence for state Trolley */
		enterSequence_main_region_Trolley_BoardingManager_default();
		enterSequence_main_region_Trolley_Departure_Arrival_default();
		enterSequence_main_region_Trolley_requestHandler_default();
	}
	
	/* 'default' enter sequence for state DoorsClosed */
	private void enterSequence_main_region_Trolley_BoardingManager_DoorsClosed_default() {
		/* 'default' enter sequence for state DoorsClosed */
		stateVector[0] = State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSCLOSED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state DoorsOpen */
	private void enterSequence_main_region_Trolley_BoardingManager_DoorsOpen_default() {
		/* 'default' enter sequence for state DoorsOpen */
		enterSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_default();
	}
	
	/* 'default' enter sequence for state BoardingPossible */
	private void enterSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible_default() {
		/* 'default' enter sequence for state BoardingPossible */
		entryAction_main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible();
		stateVector[0] = State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_BOARDINGPOSSIBLE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state DoorsObstructed */
	private void enterSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed_default() {
		/* 'default' enter sequence for state DoorsObstructed */
		entryAction_main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed();
		stateVector[0] = State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_DOORSOBSTRUCTED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Arrival at a station */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_default() {
		/* 'default' enter sequence for state Arrival at a station */
		enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_default();
	}
	
	/* 'default' enter sequence for state Just Arrived */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived_default() {
		/* 'default' enter sequence for state Just Arrived */
		entryAction_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived();
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_JUST_ARRIVED;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state DoorsOpen */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen_default() {
		/* 'default' enter sequence for state DoorsOpen */
		entryAction_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen();
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPEN;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state DoorsOpenAwaitingRequest */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpenAwaitingRequest_default() {
		/* 'default' enter sequence for state DoorsOpenAwaitingRequest */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPENAWAITINGREQUEST;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Departure to a station */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_default() {
		/* 'default' enter sequence for state Departure to a station */
		enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_default();
	}
	
	/* 'default' enter sequence for state ClosingDoors */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_default() {
		/* 'default' enter sequence for state ClosingDoors */
		entryAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors();
		enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_default();
	}
	
	/* 'default' enter sequence for state DoorsFree */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree_default() {
		/* 'default' enter sequence for state DoorsFree */
		entryAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree();
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSFREE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state DoorsObstructed */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsObstructed_default() {
		/* 'default' enter sequence for state DoorsObstructed */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSOBSTRUCTED;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state DoorsClosed */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed_default() {
		/* 'default' enter sequence for state DoorsClosed */
		entryAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed();
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_DOORSCLOSED;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state RespondToApproachingStation */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_RespondToApproachingStation_default() {
		/* 'default' enter sequence for state RespondToApproachingStation */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_RESPONDTOAPPROACHINGSTATION;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state BreakUntilStandstill */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_BreakUntilStandstill_default() {
		/* 'default' enter sequence for state BreakUntilStandstill */
		entryAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_BreakUntilStandstill();
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_BREAKUNTILSTANDSTILL;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state StartDeparture */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_StartDeparture_default() {
		/* 'default' enter sequence for state StartDeparture */
		entryAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_StartDeparture();
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_STARTDEPARTURE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state EmergencyStop */
	private void enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_default() {
		/* 'default' enter sequence for state EmergencyStop */
		enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_default();
	}
	
	/* 'default' enter sequence for state EmergencyStarted */
	private void enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted_default() {
		/* 'default' enter sequence for state EmergencyStarted */
		entryAction_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted();
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_EMERGENCYSTARTED;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state BreakUntilStandstill */
	private void enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_BreakUntilStandstill_default() {
		/* 'default' enter sequence for state BreakUntilStandstill */
		entryAction_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_BreakUntilStandstill();
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_BREAKUNTILSTANDSTILL;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state DoorsOpen */
	private void enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpen_default() {
		/* 'default' enter sequence for state DoorsOpen */
		entryAction_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpen();
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPEN;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state DoorsOpenArrival */
	private void enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpenArrival_default() {
		/* 'default' enter sequence for state DoorsOpenArrival */
		entryAction_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpenArrival();
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPENARRIVAL;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state AcceptingRequests */
	private void enterSequence_main_region_Trolley_requestHandler_AcceptingRequests_default() {
		/* 'default' enter sequence for state AcceptingRequests */
		stateVector[2] = State.MAIN_REGION_TROLLEY_REQUESTHANDLER_ACCEPTINGREQUESTS;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region BoardingManager */
	private void enterSequence_main_region_Trolley_BoardingManager_default() {
		/* 'default' enter sequence for region BoardingManager */
		react_main_region_Trolley_BoardingManager__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Trolley_BoardingManager_DoorsOpen_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region Departure Arrival */
	private void enterSequence_main_region_Trolley_Departure_Arrival_default() {
		/* 'default' enter sequence for region Departure Arrival */
		react_main_region_Trolley_Departure_Arrival__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Trolley_Departure_Arrival_EmergencyStop_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region requestHandler */
	private void enterSequence_main_region_Trolley_requestHandler_default() {
		/* 'default' enter sequence for region requestHandler */
		react_main_region_Trolley_requestHandler__entry_Default();
	}
	
	/* Default exit sequence for state DoorsClosed */
	private void exitSequence_main_region_Trolley_BoardingManager_DoorsClosed() {
		/* Default exit sequence for state DoorsClosed */
		stateVector[0] = State.MAIN_REGION_TROLLEY;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state DoorsOpen */
	private void exitSequence_main_region_Trolley_BoardingManager_DoorsOpen() {
		/* Default exit sequence for state DoorsOpen */
		exitSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1();
		stateVector[0] = State.MAIN_REGION_TROLLEY;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state BoardingPossible */
	private void exitSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible() {
		/* Default exit sequence for state BoardingPossible */
		stateVector[0] = State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state DoorsObstructed */
	private void exitSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed() {
		/* Default exit sequence for state DoorsObstructed */
		stateVector[0] = State.MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN;
		stateConfVectorPosition = 0;
		exitAction_main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed();
	}
	
	/* Default exit sequence for state Arrival at a station */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station() {
		/* Default exit sequence for state Arrival at a station */
		exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1();
		stateVector[1] = State.MAIN_REGION_TROLLEY;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Just Arrived */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived() {
		/* Default exit sequence for state Just Arrived */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION;
		stateConfVectorPosition = 1;
		exitAction_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived();
	}
	
	/* Default exit sequence for state DoorsOpen */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen() {
		/* Default exit sequence for state DoorsOpen */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION;
		stateConfVectorPosition = 1;
		exitAction_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen();
	}
	
	/* Default exit sequence for state DoorsOpenAwaitingRequest */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpenAwaitingRequest() {
		/* Default exit sequence for state DoorsOpenAwaitingRequest */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Departure to a station */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station() {
		/* Default exit sequence for state Departure to a station */
		exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1();
		stateVector[1] = State.MAIN_REGION_TROLLEY;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state ClosingDoors */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors() {
		/* Default exit sequence for state ClosingDoors */
		exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1();
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION;
		stateConfVectorPosition = 1;
		exitAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors();
	}
	
	/* Default exit sequence for state DoorsFree */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree() {
		/* Default exit sequence for state DoorsFree */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS;
		stateConfVectorPosition = 1;
		exitAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree();
	}
	
	/* Default exit sequence for state DoorsObstructed */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsObstructed() {
		/* Default exit sequence for state DoorsObstructed */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state DoorsClosed */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed() {
		/* Default exit sequence for state DoorsClosed */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION;
		stateConfVectorPosition = 1;
		exitAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed();
	}
	
	/* Default exit sequence for state RespondToApproachingStation */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_RespondToApproachingStation() {
		/* Default exit sequence for state RespondToApproachingStation */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state BreakUntilStandstill */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_BreakUntilStandstill() {
		/* Default exit sequence for state BreakUntilStandstill */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state StartDeparture */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_StartDeparture() {
		/* Default exit sequence for state StartDeparture */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state EmergencyStop */
	private void exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop() {
		/* Default exit sequence for state EmergencyStop */
		exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1();
		stateVector[1] = State.MAIN_REGION_TROLLEY;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state EmergencyStarted */
	private void exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted() {
		/* Default exit sequence for state EmergencyStarted */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP;
		stateConfVectorPosition = 1;
		exitAction_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted();
	}
	
	/* Default exit sequence for state BreakUntilStandstill */
	private void exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_BreakUntilStandstill() {
		/* Default exit sequence for state BreakUntilStandstill */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state DoorsOpen */
	private void exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpen() {
		/* Default exit sequence for state DoorsOpen */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state DoorsOpenArrival */
	private void exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpenArrival() {
		/* Default exit sequence for state DoorsOpenArrival */
		stateVector[1] = State.MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state AcceptingRequests */
	private void exitSequence_main_region_Trolley_requestHandler_AcceptingRequests() {
		/* Default exit sequence for state AcceptingRequests */
		stateVector[2] = State.MAIN_REGION_TROLLEY;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSCLOSED:
			exitSequence_main_region_Trolley_BoardingManager_DoorsClosed();
			break;
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN:
			exitSequence_main_region_Trolley_BoardingManager_DoorsOpen();
			break;
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_BOARDINGPOSSIBLE:
			exitSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible();
			break;
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_DOORSOBSTRUCTED:
			exitSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION:
			exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_JUST_ARRIVED:
			exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPEN:
			exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPENAWAITINGREQUEST:
			exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpenAwaitingRequest();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSFREE:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree();
			exitAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSOBSTRUCTED:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsObstructed();
			exitAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_DOORSCLOSED:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_RESPONDTOAPPROACHINGSTATION:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_RespondToApproachingStation();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_BREAKUNTILSTANDSTILL:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_BreakUntilStandstill();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_STARTDEPARTURE:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_StartDeparture();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP:
			exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_EMERGENCYSTARTED:
			exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_BREAKUNTILSTANDSTILL:
			exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_BreakUntilStandstill();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPEN:
			exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpen();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPENARRIVAL:
			exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpenArrival();
			break;
		default:
			break;
		}
		switch (stateVector[2]) {
		case MAIN_REGION_TROLLEY_REQUESTHANDLER_ACCEPTINGREQUESTS:
			exitSequence_main_region_Trolley_requestHandler_AcceptingRequests();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_BOARDINGPOSSIBLE:
			exitSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible();
			break;
		case MAIN_REGION_TROLLEY_BOARDINGMANAGER_DOORSOPEN_R1_DOORSOBSTRUCTED:
			exitSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[1]) {
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_JUST_ARRIVED:
			exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPEN:
			exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_ARRIVAL_AT_A_STATION_R1_DOORSOPENAWAITINGREQUEST:
			exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpenAwaitingRequest();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[1]) {
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSFREE:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree();
			exitAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSOBSTRUCTED:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsObstructed();
			exitAction_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_DOORSCLOSED:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_RESPONDTOAPPROACHINGSTATION:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_RespondToApproachingStation();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_BREAKUNTILSTANDSTILL:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_BreakUntilStandstill();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_STARTDEPARTURE:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_StartDeparture();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[1]) {
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSFREE:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_DEPARTURE_TO_A_STATION_R1_CLOSINGDOORS_R1_DOORSOBSTRUCTED:
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsObstructed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[1]) {
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_EMERGENCYSTARTED:
			exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_BREAKUNTILSTANDSTILL:
			exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_BreakUntilStandstill();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPEN:
			exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpen();
			break;
		case MAIN_REGION_TROLLEY_DEPARTURE_ARRIVAL_EMERGENCYSTOP_R1_DOORSOPENARRIVAL:
			exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpenArrival();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1__choice_0() {
		/* The reactions of state null. */
		if (((getStopsAt() & ~(((1l << getCurrentStation())))))!=0l) {
			exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station();
			enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_default();
		} else {
			enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpenAwaitingRequest_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1__choice_0() {
		/* The reactions of state null. */
		if (getIsDoorObstructed()) {
			enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsObstructed_default();
		} else {
			exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors();
			enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed_default();
			main_region_Trolley_Departure_Arrival_Departure_to_a_station_react(1l);
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Trolley_Departure_Arrival_EmergencyStop_r1__choice_0() {
		/* The reactions of state null. */
		if (getWasDepartureState()) {
			enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_BreakUntilStandstill_default();
		} else {
			enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpenArrival_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Trolley_BoardingManager_DoorsOpen_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Trolley_BoardingManager__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Trolley_BoardingManager_DoorsClosed_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Trolley_Departure_Arrival__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Trolley_Departure_Arrival_EmergencyStop_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Trolley_requestHandler__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Trolley_requestHandler_AcceptingRequests_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Trolley_default();
	}
	
	private long main_region_Trolley_BoardingManager_DoorsClosed_react(long transitioned_before) {
		/* The reactions of state DoorsClosed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (openDoorsIn) {
				exitSequence_main_region_Trolley_BoardingManager_DoorsClosed();
				enterSequence_main_region_Trolley_BoardingManager_DoorsOpen_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_BoardingManager_DoorsOpen_react(long transitioned_before) {
		/* The reactions of state DoorsOpen. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (local_closeDoors) {
				exitSequence_main_region_Trolley_BoardingManager_DoorsOpen();
				enterSequence_main_region_Trolley_BoardingManager_DoorsClosed_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible_react(long transitioned_before) {
		/* The reactions of state BoardingPossible. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((board) && ((getRemainingCapacity()>0l && getIsDoorAvailable())))) {
				exitSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible();
				setRemainingCapacity(getRemainingCapacity() - 1l);
				setNumPassengers(getNumPassengers() + 1l);
				enterSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed_default();
				main_region_Trolley_BoardingManager_DoorsOpen_react(0l);
				transitioned_after = 0l;
			} else {
				if (((unboard) && ((getNumPassengers()>0l && getIsDoorAvailable())))) {
					exitSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible();
					setRemainingCapacity(getRemainingCapacity() + 1l);
					setNumPassengers(getNumPassengers() - 1l);
					enterSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed_default();
					main_region_Trolley_BoardingManager_DoorsOpen_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Trolley_BoardingManager_DoorsOpen_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed_react(long transitioned_before) {
		/* The reactions of state DoorsObstructed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_DoorsObstructed();
				timeEvents[0] = false;
				enterSequence_main_region_Trolley_BoardingManager_DoorsOpen_r1_BoardingPossible_default();
				main_region_Trolley_BoardingManager_DoorsOpen_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Trolley_BoardingManager_DoorsOpen_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Arrival_at_a_station_react(long transitioned_before) {
		/* The reactions of state Arrival at a station. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (startEmergency) {
				exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station();
				enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived_react(long transitioned_before) {
		/* The reactions of state Just Arrived. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_Just_Arrived();
				timeEvents[1] = false;
				enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen_default();
				main_region_Trolley_Departure_Arrival_Arrival_at_a_station_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Trolley_Departure_Arrival_Arrival_at_a_station_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen_react(long transitioned_before) {
		/* The reactions of state DoorsOpen. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[2]) {
				exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen();
				timeEvents[2] = false;
				react_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1__choice_0();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Trolley_Departure_Arrival_Arrival_at_a_station_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpenAwaitingRequest_react(long transitioned_before) {
		/* The reactions of state DoorsOpenAwaitingRequest. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (((stopAdded) && (((getStopsAt() & ~(((1l << getCurrentStation())))))!=0l))) {
				exitSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station();
				enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Trolley_Departure_Arrival_Arrival_at_a_station_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Departure_to_a_station_react(long transitioned_before) {
		/* The reactions of state Departure to a station. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (startEmergency) {
				exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station();
				enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_react(long transitioned_before) {
		/* The reactions of state ClosingDoors. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Trolley_Departure_Arrival_Departure_to_a_station_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree_react(long transitioned_before) {
		/* The reactions of state DoorsFree. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[3]) {
				exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree();
				timeEvents[3] = false;
				react_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1__choice_0();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsObstructed_react(long transitioned_before) {
		/* The reactions of state DoorsObstructed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (doorFree) {
				exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsObstructed();
				enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_r1_DoorsFree_default();
				main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_ClosingDoors_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed_react(long transitioned_before) {
		/* The reactions of state DoorsClosed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[4]) {
				exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_DoorsClosed();
				timeEvents[4] = false;
				enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_StartDeparture_default();
				main_region_Trolley_Departure_Arrival_Departure_to_a_station_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Trolley_Departure_Arrival_Departure_to_a_station_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_RespondToApproachingStation_react(long transitioned_before) {
		/* The reactions of state RespondToApproachingStation. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (((approachingStation) && (((getStopsAt() & ((1l << getApproachingStationValue()))))!=0l))) {
				exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_RespondToApproachingStation();
				setCurrentStation(getApproachingStationValue());
				enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_BreakUntilStandstill_default();
				main_region_Trolley_Departure_Arrival_Departure_to_a_station_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Trolley_Departure_Arrival_Departure_to_a_station_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_BreakUntilStandstill_react(long transitioned_before) {
		/* The reactions of state BreakUntilStandstill. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (atTargetSpeed) {
				exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station();
				enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Trolley_Departure_Arrival_Departure_to_a_station_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_StartDeparture_react(long transitioned_before) {
		/* The reactions of state StartDeparture. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (atTargetSpeed) {
				exitSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_StartDeparture();
				enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_r1_RespondToApproachingStation_default();
				main_region_Trolley_Departure_Arrival_Departure_to_a_station_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Trolley_Departure_Arrival_Departure_to_a_station_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted_react(long transitioned_before) {
		/* The reactions of state EmergencyStarted. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[5]) {
				exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_EmergencyStarted();
				timeEvents[5] = false;
				react_main_region_Trolley_Departure_Arrival_EmergencyStop_r1__choice_0();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_EmergencyStop_r1_BreakUntilStandstill_react(long transitioned_before) {
		/* The reactions of state BreakUntilStandstill. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (atTargetSpeed) {
				exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_BreakUntilStandstill();
				enterSequence_main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpen_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpen_react(long transitioned_before) {
		/* The reactions of state DoorsOpen. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (stopEmergency) {
				exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop();
				enterSequence_main_region_Trolley_Departure_Arrival_Departure_to_a_station_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_Departure_Arrival_EmergencyStop_r1_DoorsOpenArrival_react(long transitioned_before) {
		/* The reactions of state DoorsOpenArrival. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (stopEmergency) {
				exitSequence_main_region_Trolley_Departure_Arrival_EmergencyStop();
				enterSequence_main_region_Trolley_Departure_Arrival_Arrival_at_a_station_r1_DoorsOpen_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Trolley_requestHandler_AcceptingRequests_react(long transitioned_before) {
		/* The reactions of state AcceptingRequests. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (requestStop) {
				exitSequence_main_region_Trolley_requestHandler_AcceptingRequests();
				setStopsAt(getStopsAt() | (((1l << getRequestStopValue()))));
				raiseStopAdded();
				raiseRefreshUI();
				enterSequence_main_region_Trolley_requestHandler_AcceptingRequests_default();
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
