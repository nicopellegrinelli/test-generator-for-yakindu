/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class Blink1 implements ITimed, IEventDriven {
	public enum State {
		ESP_BLINK,
		ESP_BLINK_BLINKY_ON,
		ESP_BLINK_BLINKY_OFF,
		ESP_IDLE,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private long low;
	
	protected long getLow() {
		return low;
	}
	
	protected void setLow(long value) {
		this.low = value;
	}
	
	
	private long high;
	
	protected long getHigh() {
		return high;
	}
	
	protected void setHigh(long value) {
		this.high = value;
	}
	
	
	private long output;
	
	protected long getOutput() {
		return output;
	}
	
	protected void setOutput(long value) {
		this.output = value;
	}
	
	
	private long led_pin;
	
	protected long getLed_pin() {
		return led_pin;
	}
	
	protected void setLed_pin(long value) {
		this.led_pin = value;
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Blink1() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart blink1 */
		setLow(0l);
		setHigh(1l);
		setOutput(2l);
		setLed_pin(5l);
		setDelay(2000l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart blink1 */
		/* Entry action for statechart 'blink1'. */
		operationCallback.pinMode(getLed_pin(), getOutput());
		enterSequence_esp_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart blink1 */
		exitSequence_esp();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		toggle = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case ESP_BLINK_BLINKY_ON:
			esp_Blink_blinky_On_react(-1l);
			break;
		case ESP_BLINK_BLINKY_OFF:
			esp_Blink_blinky_Off_react(-1l);
			break;
		case ESP_IDLE:
			esp_Idle_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case ESP_BLINK:
			return stateVector[0].ordinal() >= State.
					ESP_BLINK.ordinal()&& stateVector[0].ordinal() <= State.ESP_BLINK_BLINKY_OFF.ordinal();
		case ESP_BLINK_BLINKY_ON:
			return stateVector[0] == State.ESP_BLINK_BLINKY_ON;
		case ESP_BLINK_BLINKY_OFF:
			return stateVector[0] == State.ESP_BLINK_BLINKY_OFF;
		case ESP_IDLE:
			return stateVector[0] == State.ESP_IDLE;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	public interface OperationCallback {
	
		public void digitalWrite(long pin, long value);
		
		public void pinMode(long pin, long mode);
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean tic;
	
	
	protected void raiseTic() {
		tic = true;
		ticObservable.next(null);
	}
	
	private Observable<Void> ticObservable = new Observable<Void>();
	
	public Observable<Void> getTic() {
		return ticObservable;
	}
	
	private boolean toggle;
	
	
	public void raiseToggle() {
		inEventQueue.add(() -> {
			toggle = true;
		});
		runCycle();
	}
	
	private long delay;
	
	public long getDelay() {
		return delay;
	}
	
	public void setDelay(long value) {
		this.delay = value;
	}
	
	/* Entry action for state 'On'. */
	private void entryAction_esp_Blink_blinky_On() {
		/* Entry action for state 'On'. */
		timerService.setTimer(this, 0, getDelay(), false);
		operationCallback.digitalWrite(getLed_pin(), getHigh());
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_esp_Blink_blinky_Off() {
		/* Entry action for state 'Off'. */
		timerService.setTimer(this, 1, getDelay(), false);
		operationCallback.digitalWrite(getLed_pin(), getLow());
		raiseTic();
	}
	
	/* Exit action for state 'On'. */
	private void exitAction_esp_Blink_blinky_On() {
		/* Exit action for state 'On'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Off'. */
	private void exitAction_esp_Blink_blinky_Off() {
		/* Exit action for state 'Off'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Blink */
	private void enterSequence_esp_Blink_default() {
		/* 'default' enter sequence for state Blink */
		enterSequence_esp_Blink_blinky_default();
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_esp_Blink_blinky_On_default() {
		/* 'default' enter sequence for state On */
		entryAction_esp_Blink_blinky_On();
		stateVector[0] = State.ESP_BLINK_BLINKY_ON;
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_esp_Blink_blinky_Off_default() {
		/* 'default' enter sequence for state Off */
		entryAction_esp_Blink_blinky_Off();
		stateVector[0] = State.ESP_BLINK_BLINKY_OFF;
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_esp_Idle_default() {
		/* 'default' enter sequence for state Idle */
		stateVector[0] = State.ESP_IDLE;
	}
	
	/* 'default' enter sequence for region esp */
	private void enterSequence_esp_default() {
		/* 'default' enter sequence for region esp */
		react_esp__entry_Default();
	}
	
	/* 'default' enter sequence for region blinky */
	private void enterSequence_esp_Blink_blinky_default() {
		/* 'default' enter sequence for region blinky */
		react_esp_Blink_blinky__entry_Default();
	}
	
	/* Default exit sequence for state Blink */
	private void exitSequence_esp_Blink() {
		/* Default exit sequence for state Blink */
		exitSequence_esp_Blink_blinky();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_esp_Blink_blinky_On() {
		/* Default exit sequence for state On */
		stateVector[0] = State.ESP_BLINK;
		exitAction_esp_Blink_blinky_On();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_esp_Blink_blinky_Off() {
		/* Default exit sequence for state Off */
		stateVector[0] = State.ESP_BLINK;
		exitAction_esp_Blink_blinky_Off();
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_esp_Idle() {
		/* Default exit sequence for state Idle */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region esp */
	private void exitSequence_esp() {
		/* Default exit sequence for region esp */
		switch (stateVector[0]) {
		case ESP_BLINK:
			exitSequence_esp_Blink();
			break;
		case ESP_BLINK_BLINKY_ON:
			exitSequence_esp_Blink_blinky_On();
			break;
		case ESP_BLINK_BLINKY_OFF:
			exitSequence_esp_Blink_blinky_Off();
			break;
		case ESP_IDLE:
			exitSequence_esp_Idle();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region blinky */
	private void exitSequence_esp_Blink_blinky() {
		/* Default exit sequence for region blinky */
		switch (stateVector[0]) {
		case ESP_BLINK_BLINKY_ON:
			exitSequence_esp_Blink_blinky_On();
			break;
		case ESP_BLINK_BLINKY_OFF:
			exitSequence_esp_Blink_blinky_Off();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_esp_Blink_blinky__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_esp_Blink_blinky_Off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_esp__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_esp_Idle_default();
	}
	
	private long esp_Blink_react(long transitioned_before) {
		/* The reactions of state Blink. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (toggle) {
				exitSequence_esp_Blink();
				enterSequence_esp_Idle_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long esp_Blink_blinky_On_react(long transitioned_before) {
		/* The reactions of state On. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_esp_Blink_blinky_On();
				timeEvents[0] = false;
				enterSequence_esp_Blink_blinky_Off_default();
				esp_Blink_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = esp_Blink_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long esp_Blink_blinky_Off_react(long transitioned_before) {
		/* The reactions of state Off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_esp_Blink_blinky_Off();
				timeEvents[1] = false;
				enterSequence_esp_Blink_blinky_On_default();
				esp_Blink_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = esp_Blink_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long esp_Idle_react(long transitioned_before) {
		/* The reactions of state Idle. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (toggle) {
				exitSequence_esp_Idle();
				enterSequence_esp_Blink_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
