/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import statechart.__ReleaseProcess;
import statechart.___TrafficLight;

public class _TwoWayTrafficControl2 implements ICycleBased {
	private static class EvBuf {
		private boolean on;
		private boolean off;
		private boolean operate;
		private boolean standby;
	}
	private static class _TwoWayTrafficControl2EvBuf {
		private EvBuf iface = new EvBuf();
	}
	public enum State {
		MAIN_OFF,
		MAIN_STANDBY,
		MAIN_OPERATE,
		MAIN_OPERATE_R_PROCESS_A,
		MAIN_OPERATE_R_PROCESS_B,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private _TwoWayTrafficControl2EvBuf current = new _TwoWayTrafficControl2EvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public _TwoWayTrafficControl2() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart _TwoWayTrafficControl2 */
		setTrafficLightA(null);
		setTrafficLightB(null);
		setProcess(null);
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		microStep();
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart _TwoWayTrafficControl2 */
		enterSequence_main_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart _TwoWayTrafficControl2 */
		exitSequence_main();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		current.iface.on = on;
		on = false;
		current.iface.off = off;
		off = false;
		current.iface.operate = operate;
		operate = false;
		current.iface.standby = standby;
		standby = false;
	}
	
	private void clearInEvents() {
		on = false;
		off = false;
		operate = false;
		standby = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_OFF:
			main_Off_react(-1l);
			break;
		case MAIN_STANDBY:
			main_Standby_react(-1l);
			break;
		case MAIN_OPERATE_R_PROCESS_A:
			main_Operate_r_Process_A_react(-1l);
			break;
		case MAIN_OPERATE_R_PROCESS_B:
			main_Operate_r_Process_B_react(-1l);
			break;
		default:
			break;
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_OFF:
			return stateVector[0] == State.MAIN_OFF;
		case MAIN_STANDBY:
			return stateVector[0] == State.MAIN_STANDBY;
		case MAIN_OPERATE:
			return stateVector[0].ordinal() >= State.
					MAIN_OPERATE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_OPERATE_R_PROCESS_B.ordinal();
		case MAIN_OPERATE_R_PROCESS_A:
			return stateVector[0] == State.MAIN_OPERATE_R_PROCESS_A;
		case MAIN_OPERATE_R_PROCESS_B:
			return stateVector[0] == State.MAIN_OPERATE_R_PROCESS_B;
		default:
			return false;
		}
	}
	
	
	private boolean on;
	
	
	public void raiseOn() {
		on = true;
	}
	
	private boolean off;
	
	
	public void raiseOff() {
		off = true;
	}
	
	private boolean operate;
	
	
	public void raiseOperate() {
		operate = true;
	}
	
	private boolean standby;
	
	
	public void raiseStandby() {
		standby = true;
	}
	
	private ___TrafficLight trafficLightA;
	
	public ___TrafficLight getTrafficLightA() {
		return trafficLightA;
	}
	
	public void setTrafficLightA(___TrafficLight value) {
		this.trafficLightA = value;
	}
	
	private ___TrafficLight trafficLightB;
	
	public ___TrafficLight getTrafficLightB() {
		return trafficLightB;
	}
	
	public void setTrafficLightB(___TrafficLight value) {
		this.trafficLightB = value;
	}
	
	private __ReleaseProcess process;
	
	public __ReleaseProcess getProcess() {
		return process;
	}
	
	public void setProcess(__ReleaseProcess value) {
		this.process = value;
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_main_Off() {
		/* Entry action for state 'Off'. */
		getTrafficLightA().raiseSwitchOff();
		getTrafficLightB().raiseSwitchOff();
	}
	
	/* Entry action for state 'Standby'. */
	private void entryAction_main_Standby() {
		/* Entry action for state 'Standby'. */
		getTrafficLightA().raiseAttention();
		getTrafficLightB().raiseAttention();
	}
	
	/* Entry action for state 'Operate'. */
	private void entryAction_main_Operate() {
		/* Entry action for state 'Operate'. */
		getTrafficLightA().raiseBlock();
		getTrafficLightB().raiseBlock();
	}
	
	/* Entry action for state 'Process A'. */
	private void entryAction_main_Operate_r_Process_A() {
		/* Entry action for state 'Process A'. */
		process.setTrafficLight(trafficLightA);
		getProcess().enter();
	}
	
	/* Entry action for state 'Process B'. */
	private void entryAction_main_Operate_r_Process_B() {
		/* Entry action for state 'Process B'. */
		process.setTrafficLight(trafficLightB);
		getProcess().enter();
	}
	
	/* Exit action for state 'Off'. */
	private void exitAction_main_Off() {
		/* Exit action for state 'Off'. */
		getTrafficLightA().raiseSwitchOn();
		getTrafficLightB().raiseSwitchOn();
	}
	
	/* Exit action for state 'Process A'. */
	private void exitAction_main_Operate_r_Process_A() {
		/* Exit action for state 'Process A'. */
		getProcess().exit();
	}
	
	/* Exit action for state 'Process B'. */
	private void exitAction_main_Operate_r_Process_B() {
		/* Exit action for state 'Process B'. */
		getProcess().exit();
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_Off_default() {
		/* 'default' enter sequence for state Off */
		entryAction_main_Off();
		stateVector[0] = State.MAIN_OFF;
	}
	
	/* 'default' enter sequence for state Standby */
	private void enterSequence_main_Standby_default() {
		/* 'default' enter sequence for state Standby */
		entryAction_main_Standby();
		stateVector[0] = State.MAIN_STANDBY;
	}
	
	/* 'default' enter sequence for state Operate */
	private void enterSequence_main_Operate_default() {
		/* 'default' enter sequence for state Operate */
		entryAction_main_Operate();
		enterSequence_main_Operate_r_default();
	}
	
	/* 'default' enter sequence for state Process A */
	private void enterSequence_main_Operate_r_Process_A_default() {
		/* 'default' enter sequence for state Process A */
		entryAction_main_Operate_r_Process_A();
		stateVector[0] = State.MAIN_OPERATE_R_PROCESS_A;
	}
	
	/* 'default' enter sequence for state Process B */
	private void enterSequence_main_Operate_r_Process_B_default() {
		/* 'default' enter sequence for state Process B */
		entryAction_main_Operate_r_Process_B();
		stateVector[0] = State.MAIN_OPERATE_R_PROCESS_B;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		/* 'default' enter sequence for region main */
		react_main__entry_Default();
	}
	
	/* 'default' enter sequence for region r */
	private void enterSequence_main_Operate_r_default() {
		/* 'default' enter sequence for region r */
		react_main_Operate_r__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_Off() {
		/* Default exit sequence for state Off */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_Off();
	}
	
	/* Default exit sequence for state Standby */
	private void exitSequence_main_Standby() {
		/* Default exit sequence for state Standby */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Operate */
	private void exitSequence_main_Operate() {
		/* Default exit sequence for state Operate */
		exitSequence_main_Operate_r();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Process A */
	private void exitSequence_main_Operate_r_Process_A() {
		/* Default exit sequence for state Process A */
		stateVector[0] = State.MAIN_OPERATE;
		exitAction_main_Operate_r_Process_A();
	}
	
	/* Default exit sequence for state Process B */
	private void exitSequence_main_Operate_r_Process_B() {
		/* Default exit sequence for state Process B */
		stateVector[0] = State.MAIN_OPERATE;
		exitAction_main_Operate_r_Process_B();
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		/* Default exit sequence for region main */
		switch (stateVector[0]) {
		case MAIN_OFF:
			exitSequence_main_Off();
			break;
		case MAIN_STANDBY:
			exitSequence_main_Standby();
			break;
		case MAIN_OPERATE:
			exitSequence_main_Operate();
			break;
		case MAIN_OPERATE_R_PROCESS_A:
			exitSequence_main_Operate_r_Process_A();
			break;
		case MAIN_OPERATE_R_PROCESS_B:
			exitSequence_main_Operate_r_Process_B();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r */
	private void exitSequence_main_Operate_r() {
		/* Default exit sequence for region r */
		switch (stateVector[0]) {
		case MAIN_OPERATE_R_PROCESS_A:
			exitSequence_main_Operate_r_Process_A();
			break;
		case MAIN_OPERATE_R_PROCESS_B:
			exitSequence_main_Operate_r_Process_B();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_Off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Operate_r__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_Operate_r_Process_A_default();
	}
	
	private long main_Off_react(long transitioned_before) {
		/* The reactions of state Off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.on) {
				exitSequence_main_Off();
				enterSequence_main_Standby_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_Standby_react(long transitioned_before) {
		/* The reactions of state Standby. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.off) {
				exitSequence_main_Standby();
				enterSequence_main_Off_default();
				transitioned_after = 0l;
			} else {
				if (current.iface.operate) {
					exitSequence_main_Standby();
					enterSequence_main_Operate_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_Operate_react(long transitioned_before) {
		/* The reactions of state Operate. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.standby) {
				exitSequence_main_Operate();
				enterSequence_main_Standby_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_Operate_r_Process_A_react(long transitioned_before) {
		/* The reactions of state Process A. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getProcess().isFinal()) {
				exitSequence_main_Operate_r_Process_A();
				enterSequence_main_Operate_r_Process_B_default();
				main_Operate_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			getProcess().runCycle();
			transitioned_after = main_Operate_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Operate_r_Process_B_react(long transitioned_before) {
		/* The reactions of state Process B. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getProcess().isFinal()) {
				exitSequence_main_Operate_r_Process_B();
				enterSequence_main_Operate_r_Process_A_default();
				main_Operate_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			getProcess().runCycle();
			transitioned_after = main_Operate_react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
