/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.rx.Observer;
import java.util.LinkedList;
import java.util.Queue;
import statechart._blink;
import statechart._flash;

public class Signalcontrol implements IEventDriven {
	public enum State {
		MAIN_IDLE,
		MAIN_BLINK,
		MAIN_BLINK_R_RIGHT,
		MAIN_BLINK_R_RIGHT_RIGHT_COMFORT,
		MAIN_BLINK_R_RIGHT_RIGHT_REGULAR,
		MAIN_BLINK_R_LEFT,
		MAIN_BLINK_R_LEFT_LEFT_COMFORT,
		MAIN_BLINK_R_LEFT_LEFT_REGULAR,
		MAIN_HAZARD_LIGHTS,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[3];
	private final State[] stateVector = new State[1];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean stopBlinking;
	private boolean blinkRight_cycleCompleted;
	private boolean blinkLeft_cycleCompleted;
	private boolean interrupted;
	
	protected boolean getInterrupted() {
		return interrupted;
	}
	
	protected void setInterrupted(boolean value) {
		this.interrupted = value;
	}
	
	
	private long periodCount;
	
	protected long getPeriodCount() {
		return periodCount;
	}
	
	protected void setPeriodCount(long value) {
		this.periodCount = value;
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Signalcontrol() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 3; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		/* Default init sequence for statechart signalcontrol */
		setBlinkRight(null);
		setBlinkLeft(null);
		setFlash(null);
		setComfortBlinkingPeriods(3l);
		setInterrupted(false);
		setPeriodCount(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart signalcontrol */
		enterSequence_main_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart signalcontrol */
		exitSequence_main();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		right = false;
		left = false;
		hazard = false;
		blinkRight_cycleCompleted = false;
		blinkLeft_cycleCompleted = false;
	}
	
	private void clearInternalEvents() {
		stopBlinking = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_IDLE:
			main_Idle_react(-1l);
			break;
		case MAIN_BLINK_R_RIGHT_RIGHT_COMFORT:
			main_Blink_r_Right_right_Comfort_react(-1l);
			break;
		case MAIN_BLINK_R_RIGHT_RIGHT_REGULAR:
			main_Blink_r_Right_right_Regular_react(-1l);
			break;
		case MAIN_BLINK_R_LEFT_LEFT_COMFORT:
			main_Blink_r_Left_left_Comfort_react(-1l);
			break;
		case MAIN_BLINK_R_LEFT_LEFT_REGULAR:
			main_Blink_r_Left_left_Regular_react(-1l);
			break;
		case MAIN_HAZARD_LIGHTS:
			main_Hazard_Lights_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			clearInternalEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return true;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_IDLE:
			return stateVector[0] == State.MAIN_IDLE;
		case MAIN_BLINK:
			return stateVector[0].ordinal() >= State.
					MAIN_BLINK.ordinal()&& stateVector[0].ordinal() <= State.MAIN_BLINK_R_LEFT_LEFT_REGULAR.ordinal();
		case MAIN_BLINK_R_RIGHT:
			return stateVector[0].ordinal() >= State.
					MAIN_BLINK_R_RIGHT.ordinal()&& stateVector[0].ordinal() <= State.MAIN_BLINK_R_RIGHT_RIGHT_REGULAR.ordinal();
		case MAIN_BLINK_R_RIGHT_RIGHT_COMFORT:
			return stateVector[0] == State.MAIN_BLINK_R_RIGHT_RIGHT_COMFORT;
		case MAIN_BLINK_R_RIGHT_RIGHT_REGULAR:
			return stateVector[0] == State.MAIN_BLINK_R_RIGHT_RIGHT_REGULAR;
		case MAIN_BLINK_R_LEFT:
			return stateVector[0].ordinal() >= State.
					MAIN_BLINK_R_LEFT.ordinal()&& stateVector[0].ordinal() <= State.MAIN_BLINK_R_LEFT_LEFT_REGULAR.ordinal();
		case MAIN_BLINK_R_LEFT_LEFT_COMFORT:
			return stateVector[0] == State.MAIN_BLINK_R_LEFT_LEFT_COMFORT;
		case MAIN_BLINK_R_LEFT_LEFT_REGULAR:
			return stateVector[0] == State.MAIN_BLINK_R_LEFT_LEFT_REGULAR;
		case MAIN_HAZARD_LIGHTS:
			return stateVector[0] == State.MAIN_HAZARD_LIGHTS;
		default:
			return false;
		}
	}
	
	
	protected void raiseStopBlinking() {
		internalEventQueue.add(() -> {
			stopBlinking = true;
		});
	}
	
	protected void raiseBlinkRight_cycleCompleted() {
		inEventQueue.add(() -> {
			blinkRight_cycleCompleted = true;
		});
		runCycle();
	}
	
	protected void raiseBlinkLeft_cycleCompleted() {
		inEventQueue.add(() -> {
			blinkLeft_cycleCompleted = true;
		});
		runCycle();
	}
	
	private boolean right;
	
	private boolean rightValue;
	
	
	public void raiseRight(final boolean value) {
		inEventQueue.add(() -> {
			rightValue = value;
			right = true;
		});
		runCycle();
	}
	protected boolean getRightValue() {
		if (! right ) 
			throw new IllegalStateException("Illegal event value access. Event Right is not raised!");
		return rightValue;
	}
	
	private boolean left;
	
	private boolean leftValue;
	
	
	public void raiseLeft(final boolean value) {
		inEventQueue.add(() -> {
			leftValue = value;
			left = true;
		});
		runCycle();
	}
	protected boolean getLeftValue() {
		if (! left ) 
			throw new IllegalStateException("Illegal event value access. Event Left is not raised!");
		return leftValue;
	}
	
	private boolean hazard;
	
	
	public void raiseHazard() {
		inEventQueue.add(() -> {
			hazard = true;
		});
		runCycle();
	}
	
	private _blink blinkRight;
	
	private Observer<Void> blinkRight_cycleCompleted_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseBlinkRight_cycleCompleted();
		}
	};
	
	
	public _blink getBlinkRight() {
		return blinkRight;
	}
	
	public void setBlinkRight(_blink value) {
		if (this.blinkRight != null) {
			this.blinkRight.getCycleCompleted().unsubscribe(blinkRight_cycleCompleted_observer);
		}
		
		this.blinkRight = value;
		
		if (this.blinkRight != null) {
			this.blinkRight.getCycleCompleted().subscribe(blinkRight_cycleCompleted_observer);
		}
	}
	
	private _blink blinkLeft;
	
	private Observer<Void> blinkLeft_cycleCompleted_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseBlinkLeft_cycleCompleted();
		}
	};
	
	
	public _blink getBlinkLeft() {
		return blinkLeft;
	}
	
	public void setBlinkLeft(_blink value) {
		if (this.blinkLeft != null) {
			this.blinkLeft.getCycleCompleted().unsubscribe(blinkLeft_cycleCompleted_observer);
		}
		
		this.blinkLeft = value;
		
		if (this.blinkLeft != null) {
			this.blinkLeft.getCycleCompleted().subscribe(blinkLeft_cycleCompleted_observer);
		}
	}
	
	private _flash flash;
	
	public _flash getFlash() {
		return flash;
	}
	
	public void setFlash(_flash value) {
		this.flash = value;
	}
	
	private long comfortBlinkingPeriods;
	
	public long getComfortBlinkingPeriods() {
		return comfortBlinkingPeriods;
	}
	
	public void setComfortBlinkingPeriods(long value) {
		this.comfortBlinkingPeriods = value;
	}
	
	/* Entry action for state 'Right'. */
	private void entryAction_main_Blink_r_Right() {
		/* Entry action for state 'Right'. */
		getBlinkRight().enter();
	}
	
	/* Entry action for state 'Comfort'. */
	private void entryAction_main_Blink_r_Right_right_Comfort() {
		/* Entry action for state 'Comfort'. */
		setPeriodCount(comfortBlinkingPeriods);
	}
	
	/* Entry action for state 'Regular'. */
	private void entryAction_main_Blink_r_Right_right_Regular() {
		/* Entry action for state 'Regular'. */
		setPeriodCount(-(1l));
	}
	
	/* Entry action for state 'Left'. */
	private void entryAction_main_Blink_r_Left() {
		/* Entry action for state 'Left'. */
		getBlinkLeft().enter();
	}
	
	/* Entry action for state 'Comfort'. */
	private void entryAction_main_Blink_r_Left_left_Comfort() {
		/* Entry action for state 'Comfort'. */
		setPeriodCount(comfortBlinkingPeriods);
	}
	
	/* Entry action for state 'Regular'. */
	private void entryAction_main_Blink_r_Left_left_Regular() {
		/* Entry action for state 'Regular'. */
		setPeriodCount(-(1l));
	}
	
	/* Entry action for state 'Hazard Lights'. */
	private void entryAction_main_Hazard_Lights() {
		/* Entry action for state 'Hazard Lights'. */
		getFlash().enter();
	}
	
	/* Exit action for state 'Right'. */
	private void exitAction_main_Blink_r_Right() {
		/* Exit action for state 'Right'. */
		getBlinkRight().exit();
	}
	
	/* Exit action for state 'Left'. */
	private void exitAction_main_Blink_r_Left() {
		/* Exit action for state 'Left'. */
		getBlinkLeft().exit();
	}
	
	/* Exit action for state 'Hazard Lights'. */
	private void exitAction_main_Hazard_Lights() {
		/* Exit action for state 'Hazard Lights'. */
		getFlash().exit();
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_main_Idle_default() {
		/* 'default' enter sequence for state Idle */
		stateVector[0] = State.MAIN_IDLE;
	}
	
	/* 'default' enter sequence for state Right */
	private void enterSequence_main_Blink_r_Right_default() {
		/* 'default' enter sequence for state Right */
		entryAction_main_Blink_r_Right();
		enterSequence_main_Blink_r_Right_right_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Comfort */
	private void enterSequence_main_Blink_r_Right_right_Comfort_default() {
		/* 'default' enter sequence for state Comfort */
		entryAction_main_Blink_r_Right_right_Comfort();
		stateVector[0] = State.MAIN_BLINK_R_RIGHT_RIGHT_COMFORT;
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Regular */
	private void enterSequence_main_Blink_r_Right_right_Regular_default() {
		/* 'default' enter sequence for state Regular */
		entryAction_main_Blink_r_Right_right_Regular();
		stateVector[0] = State.MAIN_BLINK_R_RIGHT_RIGHT_REGULAR;
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Left */
	private void enterSequence_main_Blink_r_Left_default() {
		/* 'default' enter sequence for state Left */
		entryAction_main_Blink_r_Left();
		enterSequence_main_Blink_r_Left_left_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Comfort */
	private void enterSequence_main_Blink_r_Left_left_Comfort_default() {
		/* 'default' enter sequence for state Comfort */
		entryAction_main_Blink_r_Left_left_Comfort();
		stateVector[0] = State.MAIN_BLINK_R_LEFT_LEFT_COMFORT;
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Regular */
	private void enterSequence_main_Blink_r_Left_left_Regular_default() {
		/* 'default' enter sequence for state Regular */
		entryAction_main_Blink_r_Left_left_Regular();
		stateVector[0] = State.MAIN_BLINK_R_LEFT_LEFT_REGULAR;
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Hazard Lights */
	private void enterSequence_main_Hazard_Lights_default() {
		/* 'default' enter sequence for state Hazard Lights */
		entryAction_main_Hazard_Lights();
		stateVector[0] = State.MAIN_HAZARD_LIGHTS;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		/* 'default' enter sequence for region main */
		react_main__entry_Default();
	}
	
	/* deep enterSequence with history in child r */
	private void deepEnterSequence_main_Blink_r() {
		/* deep enterSequence with history in child r */
		switch (historyVector[0]) {
		case MAIN_BLINK_R_RIGHT_RIGHT_COMFORT:
			/* enterSequence with history in child Right for leaf Comfort */
			entryAction_main_Blink_r_Right();
			deepEnterSequence_main_Blink_r_Right_right();
			break;
		case MAIN_BLINK_R_RIGHT_RIGHT_REGULAR:
			/* enterSequence with history in child Right for leaf Regular */
			entryAction_main_Blink_r_Right();
			deepEnterSequence_main_Blink_r_Right_right();
			break;
		case MAIN_BLINK_R_LEFT_LEFT_COMFORT:
			/* enterSequence with history in child Left for leaf Comfort */
			entryAction_main_Blink_r_Left();
			deepEnterSequence_main_Blink_r_Left_left();
			break;
		case MAIN_BLINK_R_LEFT_LEFT_REGULAR:
			/* enterSequence with history in child Left for leaf Regular */
			entryAction_main_Blink_r_Left();
			deepEnterSequence_main_Blink_r_Left_left();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region right */
	private void enterSequence_main_Blink_r_Right_right_default() {
		/* 'default' enter sequence for region right */
		react_main_Blink_r_Right_right__entry_Default();
	}
	
	/* deep enterSequence with history in child right */
	private void deepEnterSequence_main_Blink_r_Right_right() {
		/* deep enterSequence with history in child right */
		switch (historyVector[1]) {
		case MAIN_BLINK_R_RIGHT_RIGHT_COMFORT:
			/* enterSequence with history in child Comfort for leaf Comfort */
			enterSequence_main_Blink_r_Right_right_Comfort_default();
			break;
		case MAIN_BLINK_R_RIGHT_RIGHT_REGULAR:
			/* enterSequence with history in child Regular for leaf Regular */
			enterSequence_main_Blink_r_Right_right_Regular_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region left */
	private void enterSequence_main_Blink_r_Left_left_default() {
		/* 'default' enter sequence for region left */
		react_main_Blink_r_Left_left__entry_Default();
	}
	
	/* deep enterSequence with history in child left */
	private void deepEnterSequence_main_Blink_r_Left_left() {
		/* deep enterSequence with history in child left */
		switch (historyVector[2]) {
		case MAIN_BLINK_R_LEFT_LEFT_COMFORT:
			/* enterSequence with history in child Comfort for leaf Comfort */
			enterSequence_main_Blink_r_Left_left_Comfort_default();
			break;
		case MAIN_BLINK_R_LEFT_LEFT_REGULAR:
			/* enterSequence with history in child Regular for leaf Regular */
			enterSequence_main_Blink_r_Left_left_Regular_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_main_Idle() {
		/* Default exit sequence for state Idle */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Blink */
	private void exitSequence_main_Blink() {
		/* Default exit sequence for state Blink */
		exitSequence_main_Blink_r();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Right */
	private void exitSequence_main_Blink_r_Right() {
		/* Default exit sequence for state Right */
		exitSequence_main_Blink_r_Right_right();
		stateVector[0] = State.MAIN_BLINK;
		exitAction_main_Blink_r_Right();
	}
	
	/* Default exit sequence for state Comfort */
	private void exitSequence_main_Blink_r_Right_right_Comfort() {
		/* Default exit sequence for state Comfort */
		stateVector[0] = State.MAIN_BLINK_R_RIGHT;
	}
	
	/* Default exit sequence for state Regular */
	private void exitSequence_main_Blink_r_Right_right_Regular() {
		/* Default exit sequence for state Regular */
		stateVector[0] = State.MAIN_BLINK_R_RIGHT;
	}
	
	/* Default exit sequence for state Left */
	private void exitSequence_main_Blink_r_Left() {
		/* Default exit sequence for state Left */
		exitSequence_main_Blink_r_Left_left();
		stateVector[0] = State.MAIN_BLINK;
		exitAction_main_Blink_r_Left();
	}
	
	/* Default exit sequence for state Comfort */
	private void exitSequence_main_Blink_r_Left_left_Comfort() {
		/* Default exit sequence for state Comfort */
		stateVector[0] = State.MAIN_BLINK_R_LEFT;
	}
	
	/* Default exit sequence for state Regular */
	private void exitSequence_main_Blink_r_Left_left_Regular() {
		/* Default exit sequence for state Regular */
		stateVector[0] = State.MAIN_BLINK_R_LEFT;
	}
	
	/* Default exit sequence for state Hazard Lights */
	private void exitSequence_main_Hazard_Lights() {
		/* Default exit sequence for state Hazard Lights */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_Hazard_Lights();
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		/* Default exit sequence for region main */
		switch (stateVector[0]) {
		case MAIN_IDLE:
			exitSequence_main_Idle();
			break;
		case MAIN_BLINK:
			exitSequence_main_Blink();
			break;
		case MAIN_BLINK_R_RIGHT:
			exitSequence_main_Blink_r_Right();
			break;
		case MAIN_BLINK_R_RIGHT_RIGHT_COMFORT:
			exitSequence_main_Blink_r_Right_right_Comfort();
			exitAction_main_Blink_r_Right();
			break;
		case MAIN_BLINK_R_RIGHT_RIGHT_REGULAR:
			exitSequence_main_Blink_r_Right_right_Regular();
			exitAction_main_Blink_r_Right();
			break;
		case MAIN_BLINK_R_LEFT:
			exitSequence_main_Blink_r_Left();
			break;
		case MAIN_BLINK_R_LEFT_LEFT_COMFORT:
			exitSequence_main_Blink_r_Left_left_Comfort();
			exitAction_main_Blink_r_Left();
			break;
		case MAIN_BLINK_R_LEFT_LEFT_REGULAR:
			exitSequence_main_Blink_r_Left_left_Regular();
			exitAction_main_Blink_r_Left();
			break;
		case MAIN_HAZARD_LIGHTS:
			exitSequence_main_Hazard_Lights();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r */
	private void exitSequence_main_Blink_r() {
		/* Default exit sequence for region r */
		switch (stateVector[0]) {
		case MAIN_BLINK_R_RIGHT:
			exitSequence_main_Blink_r_Right();
			break;
		case MAIN_BLINK_R_RIGHT_RIGHT_COMFORT:
			exitSequence_main_Blink_r_Right_right_Comfort();
			exitAction_main_Blink_r_Right();
			break;
		case MAIN_BLINK_R_RIGHT_RIGHT_REGULAR:
			exitSequence_main_Blink_r_Right_right_Regular();
			exitAction_main_Blink_r_Right();
			break;
		case MAIN_BLINK_R_LEFT:
			exitSequence_main_Blink_r_Left();
			break;
		case MAIN_BLINK_R_LEFT_LEFT_COMFORT:
			exitSequence_main_Blink_r_Left_left_Comfort();
			exitAction_main_Blink_r_Left();
			break;
		case MAIN_BLINK_R_LEFT_LEFT_REGULAR:
			exitSequence_main_Blink_r_Left_left_Regular();
			exitAction_main_Blink_r_Left();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region right */
	private void exitSequence_main_Blink_r_Right_right() {
		/* Default exit sequence for region right */
		switch (stateVector[0]) {
		case MAIN_BLINK_R_RIGHT_RIGHT_COMFORT:
			exitSequence_main_Blink_r_Right_right_Comfort();
			break;
		case MAIN_BLINK_R_RIGHT_RIGHT_REGULAR:
			exitSequence_main_Blink_r_Right_right_Regular();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region left */
	private void exitSequence_main_Blink_r_Left_left() {
		/* Default exit sequence for region left */
		switch (stateVector[0]) {
		case MAIN_BLINK_R_LEFT_LEFT_COMFORT:
			exitSequence_main_Blink_r_Left_left_Comfort();
			break;
		case MAIN_BLINK_R_LEFT_LEFT_REGULAR:
			exitSequence_main_Blink_r_Left_left_Regular();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_Blink_r_Right_right__choice_0() {
		/* The reactions of state null. */
		if (getRightValue()) {
			enterSequence_main_Blink_r_Right_right_Comfort_default();
		} else {
			enterSequence_main_Blink_r_Right_right_Regular_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_Blink_r_Left_left__choice_0() {
		/* The reactions of state null. */
		if (getLeftValue()) {
			enterSequence_main_Blink_r_Left_left_Comfort_default();
		} else {
			enterSequence_main_Blink_r_Left_left_Regular_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main__choice_0() {
		/* The reactions of state null. */
		if (getInterrupted()) {
			setInterrupted(false);
			react_main_Blink_r__entry_Default();
		} else {
			enterSequence_main_Idle_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main__choice_1() {
		/* The reactions of state null. */
		if (getInterrupted()) {
			setInterrupted(false);
			enterSequence_main_Hazard_Lights_default();
		} else {
			enterSequence_main_Idle_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_Idle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Blink_r_Right_right__entry_Default() {
		/* Default react sequence for initial entry  */
		react_main_Blink_r_Right_right__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Blink_r_Left_left__entry_Default() {
		/* Default react sequence for initial entry  */
		react_main_Blink_r_Left_left__choice_0();
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_Blink_r__entry_Default() {
		/* Default react sequence for deep history entry  */
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NULLSTATE$) {
			deepEnterSequence_main_Blink_r();
		} else {
			enterSequence_main_Blink_r_Right_default();
		}
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		if ((((blinkRight_cycleCompleted || blinkLeft_cycleCompleted)) && (getPeriodCount()>0l))) {
			setPeriodCount(getPeriodCount() - 1l);
		}
		if (getPeriodCount()==0l) {
			raiseStopBlinking();
		}
		return transitioned_before;
	}
	
	private long main_Idle_react(long transitioned_before) {
		/* The reactions of state Idle. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (right) {
				exitSequence_main_Idle();
				enterSequence_main_Blink_r_Right_default();
				react(0l);
				transitioned_after = 0l;
			} else {
				if (left) {
					exitSequence_main_Idle();
					enterSequence_main_Blink_r_Left_default();
					react(0l);
					transitioned_after = 0l;
				} else {
					if (hazard) {
						exitSequence_main_Idle();
						enterSequence_main_Hazard_Lights_default();
						react(0l);
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Blink_react(long transitioned_before) {
		/* The reactions of state Blink. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (stopBlinking) {
				exitSequence_main_Blink();
				react_main__choice_1();
				transitioned_after = 0l;
			} else {
				if (((hazard) && (!(getInterrupted())))) {
					exitSequence_main_Blink();
					setInterrupted(true);
					enterSequence_main_Hazard_Lights_default();
					react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Blink_r_Right_react(long transitioned_before) {
		/* The reactions of state Right. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (left) {
				exitSequence_main_Blink_r_Right();
				enterSequence_main_Blink_r_Left_default();
				main_Blink_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_Blink_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Blink_r_Right_right_Comfort_react(long transitioned_before) {
		/* The reactions of state Comfort. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (right) {
				exitSequence_main_Blink_r_Right_right_Comfort();
				react_main_Blink_r_Right_right__choice_0();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_Blink_r_Right_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Blink_r_Right_right_Regular_react(long transitioned_before) {
		/* The reactions of state Regular. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		if (right) {
			setPeriodCount(1l);
		}
		transitioned_after = main_Blink_r_Right_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_Blink_r_Left_react(long transitioned_before) {
		/* The reactions of state Left. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (right) {
				exitSequence_main_Blink_r_Left();
				enterSequence_main_Blink_r_Right_default();
				main_Blink_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_Blink_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Blink_r_Left_left_Comfort_react(long transitioned_before) {
		/* The reactions of state Comfort. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (left) {
				exitSequence_main_Blink_r_Left_left_Comfort();
				react_main_Blink_r_Left_left__choice_0();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_Blink_r_Left_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Blink_r_Left_left_Regular_react(long transitioned_before) {
		/* The reactions of state Regular. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		if (left) {
			setPeriodCount(1l);
		}
		transitioned_after = main_Blink_r_Left_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_Hazard_Lights_react(long transitioned_before) {
		/* The reactions of state Hazard Lights. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (hazard) {
				exitSequence_main_Hazard_Lights();
				react_main__choice_0();
				transitioned_after = 0l;
			} else {
				if (((right) && (!(getInterrupted())))) {
					exitSequence_main_Hazard_Lights();
					setInterrupted(true);
					enterSequence_main_Blink_r_Right_default();
					react(0l);
					transitioned_after = 0l;
				} else {
					if (((left) && (!(getInterrupted())))) {
						exitSequence_main_Hazard_Lights();
						setInterrupted(true);
						enterSequence_main_Blink_r_Left_default();
						react(0l);
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
