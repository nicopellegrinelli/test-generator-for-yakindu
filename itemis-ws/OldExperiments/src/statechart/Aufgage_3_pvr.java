/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import java.util.LinkedList;
import java.util.Queue;

public class Aufgage_3_pvr implements IEventDriven {
	public enum State {
		MAIN_REGION_AUSGESCHALTET,
		MAIN_REGION_EINGESCHALTET,
		MAIN_REGION_TAPE_EINGELEGT,
		MAIN_REGION_KEIN_TAPE_EINGELEGT,
		MAIN_REGION_WIEDERGEBEND,
		MAIN_REGION_BESCHLEUNIGTE_WIEDERGABE,
		MAIN_REGION_ANGEHALTENE_WIEDERGABE,
		MAIN_REGION_ZURÜCKGEHENDE_WIEDERGABE,
		MAIN_REGION_VORGESPULTES_TAPE,
		MAIN_REGION_ZURÜCKGESPULTES_TAPE,
		MAIN_REGION_BEENDETE_WIEDERGABE,
		MAIN_REGION_NORMALER_MODUS_DER_AUFNAHME,
		MAIN_REGION_PAUSIERTE_AUFNAHME,
		MAIN_REGION_AUTOMATISCHER_MODUS_DER_AUFNAHME,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean completed;
	
	protected boolean getCompleted() {
		return completed;
	}
	
	protected void setCompleted(boolean value) {
		this.completed = value;
	}
	private boolean doCompletion;
	
	protected boolean getDoCompletion() {
		return doCompletion;
	}
	
	protected void setDoCompletion(boolean value) {
		this.doCompletion = value;
	}
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Aufgage_3_pvr() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart aufgage_3_pvr */
		enterSequence_main_region_default();
		doCompletion = false;
		do { 
			if (getCompleted()) {
				doCompletion = true;
			}
			completed = false;
			microStep();
			clearInEvents();
			doCompletion = false;
		} while (getCompleted());
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart aufgage_3_pvr */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		operate = false;
		tapeIn = false;
		record = false;
		stop_eject = false;
		rewind = false;
		play = false;
		pause = false;
		fastForward = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_AUSGESCHALTET:
			main_region_ausgeschaltet_react(-1l);
			break;
		case MAIN_REGION_EINGESCHALTET:
			main_region_eingeschaltet_react(-1l);
			break;
		case MAIN_REGION_TAPE_EINGELEGT:
			main_region_tape_eingelegt_react(-1l);
			break;
		case MAIN_REGION_KEIN_TAPE_EINGELEGT:
			main_region_kein_tape_eingelegt_react(-1l);
			break;
		case MAIN_REGION_WIEDERGEBEND:
			main_region_wiedergebend_react(-1l);
			break;
		case MAIN_REGION_BESCHLEUNIGTE_WIEDERGABE:
			main_region_beschleunigte_Wiedergabe_react(-1l);
			break;
		case MAIN_REGION_ANGEHALTENE_WIEDERGABE:
			main_region_angehaltene_Wiedergabe_react(-1l);
			break;
		case MAIN_REGION_ZURÜCKGEHENDE_WIEDERGABE:
			main_region_zur_ckgehende_Wiedergabe_react(-1l);
			break;
		case MAIN_REGION_VORGESPULTES_TAPE:
			main_region_vorgespultes_Tape_react(-1l);
			break;
		case MAIN_REGION_ZURÜCKGESPULTES_TAPE:
			main_region_zur_ckgespultes_Tape_react(-1l);
			break;
		case MAIN_REGION_BEENDETE_WIEDERGABE:
			main_region_beendete_Wiedergabe_react(-1l);
			break;
		case MAIN_REGION_NORMALER_MODUS_DER_AUFNAHME:
			main_region_normaler_Modus_der_Aufnahme_react(-1l);
			break;
		case MAIN_REGION_PAUSIERTE_AUFNAHME:
			main_region_pausierte_Aufnahme_react(-1l);
			break;
		case MAIN_REGION_AUTOMATISCHER_MODUS_DER_AUFNAHME:
			main_region_automatischer_Modus_der_Aufnahme_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			doCompletion = false;
			do { 
				if (getCompleted()) {
					doCompletion = true;
				}
				completed = false;
				microStep();
				clearInEvents();
				doCompletion = false;
			} while (getCompleted());
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_AUSGESCHALTET:
			return stateVector[0] == State.MAIN_REGION_AUSGESCHALTET;
		case MAIN_REGION_EINGESCHALTET:
			return stateVector[0] == State.MAIN_REGION_EINGESCHALTET;
		case MAIN_REGION_TAPE_EINGELEGT:
			return stateVector[0] == State.MAIN_REGION_TAPE_EINGELEGT;
		case MAIN_REGION_KEIN_TAPE_EINGELEGT:
			return stateVector[0] == State.MAIN_REGION_KEIN_TAPE_EINGELEGT;
		case MAIN_REGION_WIEDERGEBEND:
			return stateVector[0] == State.MAIN_REGION_WIEDERGEBEND;
		case MAIN_REGION_BESCHLEUNIGTE_WIEDERGABE:
			return stateVector[0] == State.MAIN_REGION_BESCHLEUNIGTE_WIEDERGABE;
		case MAIN_REGION_ANGEHALTENE_WIEDERGABE:
			return stateVector[0] == State.MAIN_REGION_ANGEHALTENE_WIEDERGABE;
		case MAIN_REGION_ZURÜCKGEHENDE_WIEDERGABE:
			return stateVector[0] == State.MAIN_REGION_ZURÜCKGEHENDE_WIEDERGABE;
		case MAIN_REGION_VORGESPULTES_TAPE:
			return stateVector[0] == State.MAIN_REGION_VORGESPULTES_TAPE;
		case MAIN_REGION_ZURÜCKGESPULTES_TAPE:
			return stateVector[0] == State.MAIN_REGION_ZURÜCKGESPULTES_TAPE;
		case MAIN_REGION_BEENDETE_WIEDERGABE:
			return stateVector[0] == State.MAIN_REGION_BEENDETE_WIEDERGABE;
		case MAIN_REGION_NORMALER_MODUS_DER_AUFNAHME:
			return stateVector[0] == State.MAIN_REGION_NORMALER_MODUS_DER_AUFNAHME;
		case MAIN_REGION_PAUSIERTE_AUFNAHME:
			return stateVector[0] == State.MAIN_REGION_PAUSIERTE_AUFNAHME;
		case MAIN_REGION_AUTOMATISCHER_MODUS_DER_AUFNAHME:
			return stateVector[0] == State.MAIN_REGION_AUTOMATISCHER_MODUS_DER_AUFNAHME;
		default:
			return false;
		}
	}
	
	
	private boolean operate;
	
	
	public void raiseOperate() {
		inEventQueue.add(() -> {
			operate = true;
		});
		runCycle();
	}
	
	private boolean tapeIn;
	
	
	public void raiseTapeIn() {
		inEventQueue.add(() -> {
			tapeIn = true;
		});
		runCycle();
	}
	
	private boolean record;
	
	
	public void raiseRecord() {
		inEventQueue.add(() -> {
			record = true;
		});
		runCycle();
	}
	
	private boolean stop_eject;
	
	
	public void raiseStop_eject() {
		inEventQueue.add(() -> {
			stop_eject = true;
		});
		runCycle();
	}
	
	private boolean rewind;
	
	
	public void raiseRewind() {
		inEventQueue.add(() -> {
			rewind = true;
		});
		runCycle();
	}
	
	private boolean play;
	
	
	public void raisePlay() {
		inEventQueue.add(() -> {
			play = true;
		});
		runCycle();
	}
	
	private boolean pause;
	
	
	public void raisePause() {
		inEventQueue.add(() -> {
			pause = true;
		});
		runCycle();
	}
	
	private boolean fastForward;
	
	
	public void raiseFastForward() {
		inEventQueue.add(() -> {
			fastForward = true;
		});
		runCycle();
	}
	
	private void entryAction_main_region_eingeschaltet() {
		completed = true;
	}
	
	/* 'default' enter sequence for state ausgeschaltet */
	private void enterSequence_main_region_ausgeschaltet_default() {
		/* 'default' enter sequence for state ausgeschaltet */
		stateVector[0] = State.MAIN_REGION_AUSGESCHALTET;
	}
	
	/* 'default' enter sequence for state eingeschaltet */
	private void enterSequence_main_region_eingeschaltet_default() {
		/* 'default' enter sequence for state eingeschaltet */
		entryAction_main_region_eingeschaltet();
		stateVector[0] = State.MAIN_REGION_EINGESCHALTET;
	}
	
	/* 'default' enter sequence for state tape eingelegt */
	private void enterSequence_main_region_tape_eingelegt_default() {
		/* 'default' enter sequence for state tape eingelegt */
		stateVector[0] = State.MAIN_REGION_TAPE_EINGELEGT;
	}
	
	/* 'default' enter sequence for state kein tape eingelegt */
	private void enterSequence_main_region_kein_tape_eingelegt_default() {
		/* 'default' enter sequence for state kein tape eingelegt */
		stateVector[0] = State.MAIN_REGION_KEIN_TAPE_EINGELEGT;
	}
	
	/* 'default' enter sequence for state wiedergebend */
	private void enterSequence_main_region_wiedergebend_default() {
		/* 'default' enter sequence for state wiedergebend */
		stateVector[0] = State.MAIN_REGION_WIEDERGEBEND;
	}
	
	/* 'default' enter sequence for state beschleunigte Wiedergabe */
	private void enterSequence_main_region_beschleunigte_Wiedergabe_default() {
		/* 'default' enter sequence for state beschleunigte Wiedergabe */
		stateVector[0] = State.MAIN_REGION_BESCHLEUNIGTE_WIEDERGABE;
	}
	
	/* 'default' enter sequence for state angehaltene Wiedergabe */
	private void enterSequence_main_region_angehaltene_Wiedergabe_default() {
		/* 'default' enter sequence for state angehaltene Wiedergabe */
		stateVector[0] = State.MAIN_REGION_ANGEHALTENE_WIEDERGABE;
	}
	
	/* 'default' enter sequence for state zurückgehende Wiedergabe */
	private void enterSequence_main_region_zur_ckgehende_Wiedergabe_default() {
		/* 'default' enter sequence for state zurückgehende Wiedergabe */
		stateVector[0] = State.MAIN_REGION_ZURÜCKGEHENDE_WIEDERGABE;
	}
	
	/* 'default' enter sequence for state vorgespultes Tape */
	private void enterSequence_main_region_vorgespultes_Tape_default() {
		/* 'default' enter sequence for state vorgespultes Tape */
		stateVector[0] = State.MAIN_REGION_VORGESPULTES_TAPE;
	}
	
	/* 'default' enter sequence for state zurückgespultes Tape */
	private void enterSequence_main_region_zur_ckgespultes_Tape_default() {
		/* 'default' enter sequence for state zurückgespultes Tape */
		stateVector[0] = State.MAIN_REGION_ZURÜCKGESPULTES_TAPE;
	}
	
	/* 'default' enter sequence for state beendete Wiedergabe */
	private void enterSequence_main_region_beendete_Wiedergabe_default() {
		/* 'default' enter sequence for state beendete Wiedergabe */
		stateVector[0] = State.MAIN_REGION_BEENDETE_WIEDERGABE;
	}
	
	/* 'default' enter sequence for state normaler Modus der Aufnahme */
	private void enterSequence_main_region_normaler_Modus_der_Aufnahme_default() {
		/* 'default' enter sequence for state normaler Modus der Aufnahme */
		stateVector[0] = State.MAIN_REGION_NORMALER_MODUS_DER_AUFNAHME;
	}
	
	/* 'default' enter sequence for state pausierte Aufnahme */
	private void enterSequence_main_region_pausierte_Aufnahme_default() {
		/* 'default' enter sequence for state pausierte Aufnahme */
		stateVector[0] = State.MAIN_REGION_PAUSIERTE_AUFNAHME;
	}
	
	/* 'default' enter sequence for state automatischer Modus der Aufnahme */
	private void enterSequence_main_region_automatischer_Modus_der_Aufnahme_default() {
		/* 'default' enter sequence for state automatischer Modus der Aufnahme */
		stateVector[0] = State.MAIN_REGION_AUTOMATISCHER_MODUS_DER_AUFNAHME;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state ausgeschaltet */
	private void exitSequence_main_region_ausgeschaltet() {
		/* Default exit sequence for state ausgeschaltet */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state eingeschaltet */
	private void exitSequence_main_region_eingeschaltet() {
		/* Default exit sequence for state eingeschaltet */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state tape eingelegt */
	private void exitSequence_main_region_tape_eingelegt() {
		/* Default exit sequence for state tape eingelegt */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state kein tape eingelegt */
	private void exitSequence_main_region_kein_tape_eingelegt() {
		/* Default exit sequence for state kein tape eingelegt */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state wiedergebend */
	private void exitSequence_main_region_wiedergebend() {
		/* Default exit sequence for state wiedergebend */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state beschleunigte Wiedergabe */
	private void exitSequence_main_region_beschleunigte_Wiedergabe() {
		/* Default exit sequence for state beschleunigte Wiedergabe */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state angehaltene Wiedergabe */
	private void exitSequence_main_region_angehaltene_Wiedergabe() {
		/* Default exit sequence for state angehaltene Wiedergabe */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state zurückgehende Wiedergabe */
	private void exitSequence_main_region_zur_ckgehende_Wiedergabe() {
		/* Default exit sequence for state zurückgehende Wiedergabe */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state vorgespultes Tape */
	private void exitSequence_main_region_vorgespultes_Tape() {
		/* Default exit sequence for state vorgespultes Tape */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state zurückgespultes Tape */
	private void exitSequence_main_region_zur_ckgespultes_Tape() {
		/* Default exit sequence for state zurückgespultes Tape */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state beendete Wiedergabe */
	private void exitSequence_main_region_beendete_Wiedergabe() {
		/* Default exit sequence for state beendete Wiedergabe */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state normaler Modus der Aufnahme */
	private void exitSequence_main_region_normaler_Modus_der_Aufnahme() {
		/* Default exit sequence for state normaler Modus der Aufnahme */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state pausierte Aufnahme */
	private void exitSequence_main_region_pausierte_Aufnahme() {
		/* Default exit sequence for state pausierte Aufnahme */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state automatischer Modus der Aufnahme */
	private void exitSequence_main_region_automatischer_Modus_der_Aufnahme() {
		/* Default exit sequence for state automatischer Modus der Aufnahme */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_AUSGESCHALTET:
			exitSequence_main_region_ausgeschaltet();
			break;
		case MAIN_REGION_EINGESCHALTET:
			exitSequence_main_region_eingeschaltet();
			break;
		case MAIN_REGION_TAPE_EINGELEGT:
			exitSequence_main_region_tape_eingelegt();
			break;
		case MAIN_REGION_KEIN_TAPE_EINGELEGT:
			exitSequence_main_region_kein_tape_eingelegt();
			break;
		case MAIN_REGION_WIEDERGEBEND:
			exitSequence_main_region_wiedergebend();
			break;
		case MAIN_REGION_BESCHLEUNIGTE_WIEDERGABE:
			exitSequence_main_region_beschleunigte_Wiedergabe();
			break;
		case MAIN_REGION_ANGEHALTENE_WIEDERGABE:
			exitSequence_main_region_angehaltene_Wiedergabe();
			break;
		case MAIN_REGION_ZURÜCKGEHENDE_WIEDERGABE:
			exitSequence_main_region_zur_ckgehende_Wiedergabe();
			break;
		case MAIN_REGION_VORGESPULTES_TAPE:
			exitSequence_main_region_vorgespultes_Tape();
			break;
		case MAIN_REGION_ZURÜCKGESPULTES_TAPE:
			exitSequence_main_region_zur_ckgespultes_Tape();
			break;
		case MAIN_REGION_BEENDETE_WIEDERGABE:
			exitSequence_main_region_beendete_Wiedergabe();
			break;
		case MAIN_REGION_NORMALER_MODUS_DER_AUFNAHME:
			exitSequence_main_region_normaler_Modus_der_Aufnahme();
			break;
		case MAIN_REGION_PAUSIERTE_AUFNAHME:
			exitSequence_main_region_pausierte_Aufnahme();
			break;
		case MAIN_REGION_AUTOMATISCHER_MODUS_DER_AUFNAHME:
			exitSequence_main_region_automatischer_Modus_der_Aufnahme();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_ausgeschaltet_default();
	}
	
	private long main_region_ausgeschaltet_react(long transitioned_before) {
		/* The reactions of state ausgeschaltet. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (operate) {
					exitSequence_main_region_ausgeschaltet();
					enterSequence_main_region_eingeschaltet_default();
					transitioned_after = 0l;
				} else {
					if (tapeIn) {
						exitSequence_main_region_ausgeschaltet();
						enterSequence_main_region_tape_eingelegt_default();
						transitioned_after = 0l;
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_eingeschaltet_react(long transitioned_before) {
		/* The reactions of state eingeschaltet. */
		long transitioned_after = transitioned_before;
		if (getDoCompletion()) {
			/* Default exit sequence for state eingeschaltet */
			stateVector[0] = State.$NULLSTATE$;
			/* 'default' enter sequence for state kein tape eingelegt */
			stateVector[0] = State.MAIN_REGION_KEIN_TAPE_EINGELEGT;
		} else {
			if (transitioned_after<0l) {
				if (operate) {
					exitSequence_main_region_eingeschaltet();
					enterSequence_main_region_ausgeschaltet_default();
					transitioned_after = 0l;
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_tape_eingelegt_react(long transitioned_before) {
		/* The reactions of state tape eingelegt. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (play) {
					exitSequence_main_region_tape_eingelegt();
					enterSequence_main_region_wiedergebend_default();
					transitioned_after = 0l;
				} else {
					if (record) {
						exitSequence_main_region_tape_eingelegt();
						enterSequence_main_region_normaler_Modus_der_Aufnahme_default();
						transitioned_after = 0l;
					} else {
						if (stop_eject) {
							exitSequence_main_region_tape_eingelegt();
							enterSequence_main_region_kein_tape_eingelegt_default();
							transitioned_after = 0l;
						}
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_kein_tape_eingelegt_react(long transitioned_before) {
		/* The reactions of state kein tape eingelegt. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (tapeIn) {
					exitSequence_main_region_kein_tape_eingelegt();
					enterSequence_main_region_tape_eingelegt_default();
					transitioned_after = 0l;
				} else {
					if (operate) {
						exitSequence_main_region_kein_tape_eingelegt();
						enterSequence_main_region_ausgeschaltet_default();
						transitioned_after = 0l;
					} else {
						if (fastForward) {
							exitSequence_main_region_kein_tape_eingelegt();
							enterSequence_main_region_vorgespultes_Tape_default();
							transitioned_after = 0l;
						} else {
							if (rewind) {
								exitSequence_main_region_kein_tape_eingelegt();
								enterSequence_main_region_zur_ckgespultes_Tape_default();
								transitioned_after = 0l;
							}
						}
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_wiedergebend_react(long transitioned_before) {
		/* The reactions of state wiedergebend. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (fastForward) {
					exitSequence_main_region_wiedergebend();
					enterSequence_main_region_beschleunigte_Wiedergabe_default();
					transitioned_after = 0l;
				} else {
					if (rewind) {
						exitSequence_main_region_wiedergebend();
						enterSequence_main_region_zur_ckgehende_Wiedergabe_default();
						transitioned_after = 0l;
					} else {
						if (stop_eject) {
							exitSequence_main_region_wiedergebend();
							enterSequence_main_region_beendete_Wiedergabe_default();
							transitioned_after = 0l;
						}
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_beschleunigte_Wiedergabe_react(long transitioned_before) {
		/* The reactions of state beschleunigte Wiedergabe. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (play) {
					exitSequence_main_region_beschleunigte_Wiedergabe();
					enterSequence_main_region_wiedergebend_default();
					transitioned_after = 0l;
				} else {
					if (pause) {
						exitSequence_main_region_beschleunigte_Wiedergabe();
						enterSequence_main_region_angehaltene_Wiedergabe_default();
						transitioned_after = 0l;
					} else {
						if (stop_eject) {
							exitSequence_main_region_beschleunigte_Wiedergabe();
							enterSequence_main_region_beendete_Wiedergabe_default();
							transitioned_after = 0l;
						}
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_angehaltene_Wiedergabe_react(long transitioned_before) {
		/* The reactions of state angehaltene Wiedergabe. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (fastForward) {
					exitSequence_main_region_angehaltene_Wiedergabe();
					enterSequence_main_region_vorgespultes_Tape_default();
					transitioned_after = 0l;
				} else {
					if (rewind) {
						exitSequence_main_region_angehaltene_Wiedergabe();
						enterSequence_main_region_zur_ckgespultes_Tape_default();
						transitioned_after = 0l;
					} else {
						if (stop_eject) {
							exitSequence_main_region_angehaltene_Wiedergabe();
							enterSequence_main_region_beendete_Wiedergabe_default();
							transitioned_after = 0l;
						}
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_zur_ckgehende_Wiedergabe_react(long transitioned_before) {
		/* The reactions of state zurückgehende Wiedergabe. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (play) {
					exitSequence_main_region_zur_ckgehende_Wiedergabe();
					enterSequence_main_region_wiedergebend_default();
					transitioned_after = 0l;
				} else {
					if (pause) {
						exitSequence_main_region_zur_ckgehende_Wiedergabe();
						enterSequence_main_region_angehaltene_Wiedergabe_default();
						transitioned_after = 0l;
					} else {
						if (stop_eject) {
							exitSequence_main_region_zur_ckgehende_Wiedergabe();
							enterSequence_main_region_beendete_Wiedergabe_default();
							transitioned_after = 0l;
						}
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_vorgespultes_Tape_react(long transitioned_before) {
		/* The reactions of state vorgespultes Tape. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (stop_eject) {
					exitSequence_main_region_vorgespultes_Tape();
					enterSequence_main_region_angehaltene_Wiedergabe_default();
					transitioned_after = 0l;
				} else {
					if (rewind) {
						exitSequence_main_region_vorgespultes_Tape();
						enterSequence_main_region_kein_tape_eingelegt_default();
						transitioned_after = 0l;
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_zur_ckgespultes_Tape_react(long transitioned_before) {
		/* The reactions of state zurückgespultes Tape. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (stop_eject) {
					exitSequence_main_region_zur_ckgespultes_Tape();
					enterSequence_main_region_angehaltene_Wiedergabe_default();
					transitioned_after = 0l;
				} else {
					if (stop_eject) {
						exitSequence_main_region_zur_ckgespultes_Tape();
						enterSequence_main_region_kein_tape_eingelegt_default();
						transitioned_after = 0l;
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_beendete_Wiedergabe_react(long transitioned_before) {
		/* The reactions of state beendete Wiedergabe. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			/* Always execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_normaler_Modus_der_Aufnahme_react(long transitioned_before) {
		/* The reactions of state normaler Modus der Aufnahme. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (record) {
					exitSequence_main_region_normaler_Modus_der_Aufnahme();
					enterSequence_main_region_automatischer_Modus_der_Aufnahme_default();
					transitioned_after = 0l;
				} else {
					if (pause) {
						exitSequence_main_region_normaler_Modus_der_Aufnahme();
						enterSequence_main_region_pausierte_Aufnahme_default();
						transitioned_after = 0l;
					} else {
						if (stop_eject) {
							exitSequence_main_region_normaler_Modus_der_Aufnahme();
							enterSequence_main_region_tape_eingelegt_default();
							transitioned_after = 0l;
						}
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_pausierte_Aufnahme_react(long transitioned_before) {
		/* The reactions of state pausierte Aufnahme. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (play) {
					exitSequence_main_region_pausierte_Aufnahme();
					enterSequence_main_region_automatischer_Modus_der_Aufnahme_default();
					transitioned_after = 0l;
				} else {
					if (play) {
						exitSequence_main_region_pausierte_Aufnahme();
						enterSequence_main_region_normaler_Modus_der_Aufnahme_default();
						transitioned_after = 0l;
					} else {
						if (record) {
							exitSequence_main_region_pausierte_Aufnahme();
							enterSequence_main_region_automatischer_Modus_der_Aufnahme_default();
							transitioned_after = 0l;
						} else {
							if (stop_eject) {
								exitSequence_main_region_pausierte_Aufnahme();
								enterSequence_main_region_tape_eingelegt_default();
								transitioned_after = 0l;
							}
						}
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_automatischer_Modus_der_Aufnahme_react(long transitioned_before) {
		/* The reactions of state automatischer Modus der Aufnahme. */
		long transitioned_after = transitioned_before;
		if (!(getDoCompletion())) {
			if (transitioned_after<0l) {
				if (pause) {
					exitSequence_main_region_automatischer_Modus_der_Aufnahme();
					enterSequence_main_region_pausierte_Aufnahme_default();
					transitioned_after = 0l;
				} else {
					if (stop_eject) {
						exitSequence_main_region_automatischer_Modus_der_Aufnahme();
						enterSequence_main_region_tape_eingelegt_default();
						transitioned_after = 0l;
					}
				}
			}
			/* If no transition was taken */
			if (transitioned_after==transitioned_before) {
				/* then execute local reactions. */
				transitioned_after = transitioned_before;
			}
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
