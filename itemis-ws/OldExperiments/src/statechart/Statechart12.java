/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class Statechart12 implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_TRAFFICLIGHT,
		MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR,
		MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWON,
		MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWOFF,
		MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR,
		MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_RED,
		MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN,
		MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN_EXITLOGIC_EXITTIMERRESETTER,
		MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_YELLOW,
		MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_TOGGLEMODEUNPRESSED,
		MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDSHORT,
		MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDLONG,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[7];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean interrupt;
	private boolean isSmartMode;
	
	protected boolean getIsSmartMode() {
		return isSmartMode;
	}
	
	protected void setIsSmartMode(boolean value) {
		this.isSmartMode = value;
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Statechart12() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		/* Default init sequence for statechart Statechart12 */
		setIsSmartMode(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Statechart12 */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Statechart12 */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		buttonPressed = false;
		buttonReleased = false;
		carDetected = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
	}
	
	private void clearInternalEvents() {
		interrupt = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWON:
			transitioned = main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn_react(transitioned);
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWOFF:
			transitioned = main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff_react(transitioned);
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_RED:
			transitioned = main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red_react(transitioned);
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN_EXITLOGIC_EXITTIMERRESETTER:
			transitioned = main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter_react(transitioned);
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_YELLOW:
			transitioned = main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_TOGGLEMODEUNPRESSED:
				main_region_TrafficLight_toggleButtonHandling_ToggleModeUnpressed_react(transitioned);
				break;
			case MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDSHORT:
				main_region_TrafficLight_toggleButtonHandling_PressedShort_react(transitioned);
				break;
			case MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDLONG:
				main_region_TrafficLight_toggleButtonHandling_PressedLong_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			clearInternalEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return true;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_TRAFFICLIGHT:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_TRAFFICLIGHT.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDLONG.ordinal();
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWOFF.ordinal();
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWON:
			return stateVector[0] == State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWON;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWOFF:
			return stateVector[0] == State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWOFF;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_YELLOW.ordinal();
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_RED:
			return stateVector[0] == State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_RED;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN_EXITLOGIC_EXITTIMERRESETTER.ordinal();
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN_EXITLOGIC_EXITTIMERRESETTER:
			return stateVector[0] == State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN_EXITLOGIC_EXITTIMERRESETTER;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_YELLOW:
			return stateVector[0] == State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_YELLOW;
		case MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_TOGGLEMODEUNPRESSED:
			return stateVector[1] == State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_TOGGLEMODEUNPRESSED;
		case MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDSHORT:
			return stateVector[1] == State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDSHORT;
		case MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDLONG:
			return stateVector[1] == State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDLONG;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	protected void raiseInterrupt() {
		internalEventQueue.add(() -> {
			interrupt = true;
		});
	}
	
	private boolean buttonPressed;
	
	
	public void raiseButtonPressed() {
		inEventQueue.add(() -> {
			buttonPressed = true;
		});
		runCycle();
	}
	
	private boolean buttonReleased;
	
	
	public void raiseButtonReleased() {
		inEventQueue.add(() -> {
			buttonReleased = true;
		});
		runCycle();
	}
	
	private boolean carDetected;
	
	
	public void raiseCarDetected() {
		inEventQueue.add(() -> {
			carDetected = true;
		});
		runCycle();
	}
	
	private boolean setLED;
	
	private boolean setLEDValue;
	
	
	protected void raiseSetLED(boolean value) {
		setLEDValue = value;
		setLED = true;
		setLEDObservable.next(value);
	}
	
	private Observable<Boolean> setLEDObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetLED() {
		return setLEDObservable;
	}
	
	private boolean setRed;
	
	private boolean setRedValue;
	
	
	protected void raiseSetRed(boolean value) {
		setRedValue = value;
		setRed = true;
		setRedObservable.next(value);
	}
	
	private Observable<Boolean> setRedObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetRed() {
		return setRedObservable;
	}
	
	private boolean setGreen;
	
	private boolean setGreenValue;
	
	
	protected void raiseSetGreen(boolean value) {
		setGreenValue = value;
		setGreen = true;
		setGreenObservable.next(value);
	}
	
	private Observable<Boolean> setGreenObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetGreen() {
		return setGreenObservable;
	}
	
	private boolean setYellow;
	
	private boolean setYellowValue;
	
	
	protected void raiseSetYellow(boolean value) {
		setYellowValue = value;
		setYellow = true;
		setYellowObservable.next(value);
	}
	
	private Observable<Boolean> setYellowObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetYellow() {
		return setYellowObservable;
	}
	
	/* Entry action for state 'YellowOn'. */
	private void entryAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn() {
		/* Entry action for state 'YellowOn'. */
		timerService.setTimer(this, 0, 500l, false);
		raiseSetYellow(true);
	}
	
	/* Entry action for state 'YellowOff'. */
	private void entryAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff() {
		/* Entry action for state 'YellowOff'. */
		timerService.setTimer(this, 1, 500l, false);
		raiseSetYellow(false);
	}
	
	/* Entry action for state 'red'. */
	private void entryAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red() {
		/* Entry action for state 'red'. */
		timerService.setTimer(this, 2, (2l * 1000l), false);
		raiseSetRed(true);
	}
	
	/* Entry action for state 'green'. */
	private void entryAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green() {
		/* Entry action for state 'green'. */
		timerService.setTimer(this, 3, (5l * 1000l), false);
		raiseSetGreen(true);
	}
	
	/* Entry action for state 'exitTimerResetter'. */
	private void entryAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter() {
		/* Entry action for state 'exitTimerResetter'. */
		timerService.setTimer(this, 4, (2l * 1000l), false);
	}
	
	/* Entry action for state 'yellow'. */
	private void entryAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow() {
		/* Entry action for state 'yellow'. */
		timerService.setTimer(this, 5, (1l * 1000l), false);
		raiseSetYellow(true);
	}
	
	/* Entry action for state 'PressedShort'. */
	private void entryAction_main_region_TrafficLight_toggleButtonHandling_PressedShort() {
		/* Entry action for state 'PressedShort'. */
		timerService.setTimer(this, 6, (2l * 1000l), false);
	}
	
	/* Exit action for state 'PoliceInterruptBehavior'. */
	private void exitAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior() {
		/* Exit action for state 'PoliceInterruptBehavior'. */
		raiseSetYellow(false);
	}
	
	/* Exit action for state 'YellowOn'. */
	private void exitAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn() {
		/* Exit action for state 'YellowOn'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'YellowOff'. */
	private void exitAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff() {
		/* Exit action for state 'YellowOff'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'red'. */
	private void exitAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red() {
		/* Exit action for state 'red'. */
		timerService.unsetTimer(this, 2);
		raiseSetRed(false);
	}
	
	/* Exit action for state 'green'. */
	private void exitAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green() {
		/* Exit action for state 'green'. */
		timerService.unsetTimer(this, 3);
		raiseSetGreen(false);
	}
	
	/* Exit action for state 'exitTimerResetter'. */
	private void exitAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter() {
		/* Exit action for state 'exitTimerResetter'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'yellow'. */
	private void exitAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow() {
		/* Exit action for state 'yellow'. */
		timerService.unsetTimer(this, 5);
		raiseSetYellow(false);
	}
	
	/* Exit action for state 'PressedShort'. */
	private void exitAction_main_region_TrafficLight_toggleButtonHandling_PressedShort() {
		/* Exit action for state 'PressedShort'. */
		timerService.unsetTimer(this, 6);
	}
	
	/* 'default' enter sequence for state TrafficLight */
	private void enterSequence_main_region_TrafficLight_default() {
		/* 'default' enter sequence for state TrafficLight */
		enterSequence_main_region_TrafficLight_trafficLightsHandling_default();
		enterSequence_main_region_TrafficLight_toggleButtonHandling_default();
	}
	
	/* 'default' enter sequence for state PoliceInterruptBehavior */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_default() {
		/* 'default' enter sequence for state PoliceInterruptBehavior */
		enterSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_default();
	}
	
	/* 'default' enter sequence for state YellowOn */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn_default() {
		/* 'default' enter sequence for state YellowOn */
		entryAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn();
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWON;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state YellowOff */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff_default() {
		/* 'default' enter sequence for state YellowOff */
		entryAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff();
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWOFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state NormalBehavior */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_default() {
		/* 'default' enter sequence for state NormalBehavior */
		enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_default();
	}
	
	/* 'default' enter sequence for state red */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red_default() {
		/* 'default' enter sequence for state red */
		entryAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red();
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_RED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state green */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_default() {
		/* 'default' enter sequence for state green */
		entryAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green();
		enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_default();
	}
	
	/* 'default' enter sequence for state exitTimerResetter */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter_default() {
		/* 'default' enter sequence for state exitTimerResetter */
		entryAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter();
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN_EXITLOGIC_EXITTIMERRESETTER;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state yellow */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow_default() {
		/* 'default' enter sequence for state yellow */
		entryAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow();
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_YELLOW;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state ToggleModeUnpressed */
	private void enterSequence_main_region_TrafficLight_toggleButtonHandling_ToggleModeUnpressed_default() {
		/* 'default' enter sequence for state ToggleModeUnpressed */
		stateVector[1] = State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_TOGGLEMODEUNPRESSED;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state PressedShort */
	private void enterSequence_main_region_TrafficLight_toggleButtonHandling_PressedShort_default() {
		/* 'default' enter sequence for state PressedShort */
		entryAction_main_region_TrafficLight_toggleButtonHandling_PressedShort();
		stateVector[1] = State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDSHORT;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state PressedLong */
	private void enterSequence_main_region_TrafficLight_toggleButtonHandling_PressedLong_default() {
		/* 'default' enter sequence for state PressedLong */
		stateVector[1] = State.MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDLONG;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region trafficLightsHandling */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_default() {
		/* 'default' enter sequence for region trafficLightsHandling */
		react_main_region_TrafficLight_trafficLightsHandling__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region exitLogic */
	private void enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_default() {
		/* 'default' enter sequence for region exitLogic */
		react_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic__entry_Default();
	}
	
	/* 'default' enter sequence for region toggleButtonHandling */
	private void enterSequence_main_region_TrafficLight_toggleButtonHandling_default() {
		/* 'default' enter sequence for region toggleButtonHandling */
		react_main_region_TrafficLight_toggleButtonHandling__entry_Default();
	}
	
	/* Default exit sequence for state PoliceInterruptBehavior */
	private void exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior() {
		/* Default exit sequence for state PoliceInterruptBehavior */
		exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1();
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT;
		stateConfVectorPosition = 0;
		exitAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior();
	}
	
	/* Default exit sequence for state YellowOn */
	private void exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn() {
		/* Default exit sequence for state YellowOn */
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR;
		stateConfVectorPosition = 0;
		exitAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn();
	}
	
	/* Default exit sequence for state YellowOff */
	private void exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff() {
		/* Default exit sequence for state YellowOff */
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR;
		stateConfVectorPosition = 0;
		exitAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff();
	}
	
	/* Default exit sequence for state NormalBehavior */
	private void exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior() {
		/* Default exit sequence for state NormalBehavior */
		exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1();
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state red */
	private void exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red() {
		/* Default exit sequence for state red */
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR;
		stateConfVectorPosition = 0;
		exitAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red();
	}
	
	/* Default exit sequence for state green */
	private void exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green() {
		/* Default exit sequence for state green */
		exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic();
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR;
		stateConfVectorPosition = 0;
		exitAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green();
	}
	
	/* Default exit sequence for state exitTimerResetter */
	private void exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter() {
		/* Default exit sequence for state exitTimerResetter */
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN;
		stateConfVectorPosition = 0;
		exitAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter();
	}
	
	/* Default exit sequence for state yellow */
	private void exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow() {
		/* Default exit sequence for state yellow */
		stateVector[0] = State.MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR;
		stateConfVectorPosition = 0;
		exitAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow();
	}
	
	/* Default exit sequence for state ToggleModeUnpressed */
	private void exitSequence_main_region_TrafficLight_toggleButtonHandling_ToggleModeUnpressed() {
		/* Default exit sequence for state ToggleModeUnpressed */
		stateVector[1] = State.MAIN_REGION_TRAFFICLIGHT;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state PressedShort */
	private void exitSequence_main_region_TrafficLight_toggleButtonHandling_PressedShort() {
		/* Default exit sequence for state PressedShort */
		stateVector[1] = State.MAIN_REGION_TRAFFICLIGHT;
		stateConfVectorPosition = 1;
		exitAction_main_region_TrafficLight_toggleButtonHandling_PressedShort();
	}
	
	/* Default exit sequence for state PressedLong */
	private void exitSequence_main_region_TrafficLight_toggleButtonHandling_PressedLong() {
		/* Default exit sequence for state PressedLong */
		stateVector[1] = State.MAIN_REGION_TRAFFICLIGHT;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWON:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn();
			exitAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWOFF:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff();
			exitAction_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_RED:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN_EXITLOGIC_EXITTIMERRESETTER:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter();
			exitAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_YELLOW:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_TOGGLEMODEUNPRESSED:
			exitSequence_main_region_TrafficLight_toggleButtonHandling_ToggleModeUnpressed();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDSHORT:
			exitSequence_main_region_TrafficLight_toggleButtonHandling_PressedShort();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TOGGLEBUTTONHANDLING_PRESSEDLONG:
			exitSequence_main_region_TrafficLight_toggleButtonHandling_PressedLong();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWON:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_POLICEINTERRUPTBEHAVIOR_R1_YELLOWOFF:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_RED:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN_EXITLOGIC_EXITTIMERRESETTER:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter();
			exitAction_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green();
			break;
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_YELLOW:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region exitLogic */
	private void exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic() {
		/* Default exit sequence for region exitLogic */
		switch (stateVector[0]) {
		case MAIN_REGION_TRAFFICLIGHT_TRAFFICLIGHTSHANDLING_NORMALBEHAVIOR_R1_GREEN_EXITLOGIC_EXITTIMERRESETTER:
			exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_TrafficLight_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_TrafficLight_trafficLightsHandling__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_TrafficLight_toggleButtonHandling__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_TrafficLight_toggleButtonHandling_ToggleModeUnpressed_default();
	}
	
	private long main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_react(long transitioned_before) {
		/* The reactions of state PoliceInterruptBehavior. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (interrupt) {
				exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior();
				enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn_react(long transitioned_before) {
		/* The reactions of state YellowOn. */
		long transitioned_after = main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_react(transitioned_before);
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn();
				timeEvents[0] = false;
				enterSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff_react(long transitioned_before) {
		/* The reactions of state YellowOff. */
		long transitioned_after = main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_react(transitioned_before);
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOff();
				timeEvents[1] = false;
				enterSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_r1_YellowOn_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_TrafficLight_trafficLightsHandling_NormalBehavior_react(long transitioned_before) {
		/* The reactions of state NormalBehavior. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (interrupt) {
				exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior();
				enterSequence_main_region_TrafficLight_trafficLightsHandling_PoliceInterruptBehavior_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red_react(long transitioned_before) {
		/* The reactions of state red. */
		long transitioned_after = main_region_TrafficLight_trafficLightsHandling_NormalBehavior_react(transitioned_before);
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red();
				timeEvents[2] = false;
				enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_react(long transitioned_before) {
		/* The reactions of state green. */
		long transitioned_after = main_region_TrafficLight_trafficLightsHandling_NormalBehavior_react(transitioned_before);
		if (transitioned_after<0l) {
			if (timeEvents[3]) {
				exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green();
				timeEvents[3] = false;
				enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter_react(long transitioned_before) {
		/* The reactions of state exitTimerResetter. */
		long transitioned_after = main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_react(transitioned_before);
		if (transitioned_after<0l) {
			if (timeEvents[4]) {
				exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green();
				timeEvents[4] = false;
				enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow_default();
				transitioned_after = 0l;
			} else {
				if (((carDetected) && (getIsSmartMode()))) {
					exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter();
					enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_green_exitLogic_exitTimerResetter_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow_react(long transitioned_before) {
		/* The reactions of state yellow. */
		long transitioned_after = main_region_TrafficLight_trafficLightsHandling_NormalBehavior_react(transitioned_before);
		if (transitioned_after<0l) {
			if (timeEvents[5]) {
				exitSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_yellow();
				timeEvents[5] = false;
				enterSequence_main_region_TrafficLight_trafficLightsHandling_NormalBehavior_r1_red_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_TrafficLight_toggleButtonHandling_ToggleModeUnpressed_react(long transitioned_before) {
		/* The reactions of state ToggleModeUnpressed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (buttonPressed) {
				exitSequence_main_region_TrafficLight_toggleButtonHandling_ToggleModeUnpressed();
				enterSequence_main_region_TrafficLight_toggleButtonHandling_PressedShort_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_TrafficLight_toggleButtonHandling_PressedShort_react(long transitioned_before) {
		/* The reactions of state PressedShort. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (buttonReleased) {
				exitSequence_main_region_TrafficLight_toggleButtonHandling_PressedShort();
				setIsSmartMode(!(isSmartMode));
				raiseSetLED(getIsSmartMode());
				enterSequence_main_region_TrafficLight_toggleButtonHandling_ToggleModeUnpressed_default();
				transitioned_after = 1l;
			} else {
				if (timeEvents[6]) {
					exitSequence_main_region_TrafficLight_toggleButtonHandling_PressedShort();
					timeEvents[6] = false;
					enterSequence_main_region_TrafficLight_toggleButtonHandling_PressedLong_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_TrafficLight_toggleButtonHandling_PressedLong_react(long transitioned_before) {
		/* The reactions of state PressedLong. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (buttonReleased) {
				exitSequence_main_region_TrafficLight_toggleButtonHandling_PressedLong();
				raiseInterrupt();
				enterSequence_main_region_TrafficLight_toggleButtonHandling_ToggleModeUnpressed_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
