/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class Statechart13 implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_CONTROLLER,
		MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE,
		MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_RED,
		MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_YELLOW,
		MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN,
		MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_CHECK,
		MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_RECHECK,
		MAIN_REGION_CONTROLLER_R1_POLICE_MODE,
		MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_ON,
		MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_OFF,
		MAIN_REGION_CONTROLLER_R2_DUMB_MODE,
		MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_1,
		MAIN_REGION_CONTROLLER_R2_SMART_MODE,
		MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_2,
		MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_1,
		MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_2,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[9];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Statechart13() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Statechart13 */
		setSmartMode(false);
		setPoliceMode(false);
		setCarDetection(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Statechart13 */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Statechart13 */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		buttonPressed = false;
		buttonReleased = false;
		carDetected = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
		timeEvents[8] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_RED:
			transitioned = main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red_react(transitioned);
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_YELLOW:
			transitioned = main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow_react(transitioned);
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_CHECK:
			transitioned = main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check_react(transitioned);
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_RECHECK:
			transitioned = main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck_react(transitioned);
			break;
		case MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_ON:
			transitioned = main_region_Controller_r1_Police_Mode_r1_Yellow_on_react(transitioned);
			break;
		case MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_OFF:
			transitioned = main_region_Controller_r1_Police_Mode_r1_Yellow_off_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_CONTROLLER_R2_DUMB_MODE:
				main_region_Controller_r2_Dumb_Mode_react(transitioned);
				break;
			case MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_1:
				main_region_Controller_r2_Intermediate_1_react(transitioned);
				break;
			case MAIN_REGION_CONTROLLER_R2_SMART_MODE:
				main_region_Controller_r2_Smart_Mode_react(transitioned);
				break;
			case MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_2:
				main_region_Controller_r2_Intermediate_2_react(transitioned);
				break;
			case MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_1:
				main_region_Controller_r2_Police_Interupt_1_react(transitioned);
				break;
			case MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_2:
				main_region_Controller_r2_Police_Interupt_2_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_CONTROLLER:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_CONTROLLER.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_2.ordinal();
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_RECHECK.ordinal();
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_RED:
			return stateVector[0] == State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_RED;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_YELLOW:
			return stateVector[0] == State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_YELLOW;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_RECHECK.ordinal();
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_CHECK:
			return stateVector[0] == State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_CHECK;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_RECHECK:
			return stateVector[0] == State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_RECHECK;
		case MAIN_REGION_CONTROLLER_R1_POLICE_MODE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_CONTROLLER_R1_POLICE_MODE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_OFF.ordinal();
		case MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_ON:
			return stateVector[0] == State.MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_ON;
		case MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_OFF:
			return stateVector[0] == State.MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_OFF;
		case MAIN_REGION_CONTROLLER_R2_DUMB_MODE:
			return stateVector[1] == State.MAIN_REGION_CONTROLLER_R2_DUMB_MODE;
		case MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_1:
			return stateVector[1] == State.MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_1;
		case MAIN_REGION_CONTROLLER_R2_SMART_MODE:
			return stateVector[1] == State.MAIN_REGION_CONTROLLER_R2_SMART_MODE;
		case MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_2:
			return stateVector[1] == State.MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_2;
		case MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_1:
			return stateVector[1] == State.MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_1;
		case MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_2:
			return stateVector[1] == State.MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_2;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean setGreen;
	
	private boolean setGreenValue;
	
	
	protected void raiseSetGreen(boolean value) {
		setGreenValue = value;
		setGreen = true;
		setGreenObservable.next(value);
	}
	
	private Observable<Boolean> setGreenObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetGreen() {
		return setGreenObservable;
	}
	
	private boolean setYellow;
	
	private boolean setYellowValue;
	
	
	protected void raiseSetYellow(boolean value) {
		setYellowValue = value;
		setYellow = true;
		setYellowObservable.next(value);
	}
	
	private Observable<Boolean> setYellowObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetYellow() {
		return setYellowObservable;
	}
	
	private boolean setRed;
	
	private boolean setRedValue;
	
	
	protected void raiseSetRed(boolean value) {
		setRedValue = value;
		setRed = true;
		setRedObservable.next(value);
	}
	
	private Observable<Boolean> setRedObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetRed() {
		return setRedObservable;
	}
	
	private boolean setLED;
	
	private boolean setLEDValue;
	
	
	protected void raiseSetLED(boolean value) {
		setLEDValue = value;
		setLED = true;
		setLEDObservable.next(value);
	}
	
	private Observable<Boolean> setLEDObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getSetLED() {
		return setLEDObservable;
	}
	
	private boolean buttonPressed;
	
	
	public void raiseButtonPressed() {
		inEventQueue.add(() -> {
			buttonPressed = true;
		});
		runCycle();
	}
	
	private boolean buttonReleased;
	
	
	public void raiseButtonReleased() {
		inEventQueue.add(() -> {
			buttonReleased = true;
		});
		runCycle();
	}
	
	private boolean carDetected;
	
	
	public void raiseCarDetected() {
		inEventQueue.add(() -> {
			carDetected = true;
		});
		runCycle();
	}
	
	private boolean smartMode;
	
	public boolean getSmartMode() {
		return smartMode;
	}
	
	public void setSmartMode(boolean value) {
		this.smartMode = value;
	}
	
	private boolean policeMode;
	
	public boolean getPoliceMode() {
		return policeMode;
	}
	
	public void setPoliceMode(boolean value) {
		this.policeMode = value;
	}
	
	private boolean carDetection;
	
	public boolean getCarDetection() {
		return carDetection;
	}
	
	public void setCarDetection(boolean value) {
		this.carDetection = value;
	}
	
	/* Entry action for state 'Red'. */
	private void entryAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red() {
		/* Entry action for state 'Red'. */
		timerService.setTimer(this, 0, (2l * 1000l), false);
		raiseSetRed(true);
	}
	
	/* Entry action for state 'Yellow'. */
	private void entryAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow() {
		/* Entry action for state 'Yellow'. */
		timerService.setTimer(this, 1, (1l * 1000l), false);
		raiseSetYellow(true);
	}
	
	/* Entry action for state 'Green'. */
	private void entryAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green() {
		/* Entry action for state 'Green'. */
		timerService.setTimer(this, 2, (5l * 1000l), false);
		raiseSetGreen(true);
	}
	
	/* Entry action for state 'Sensor Check'. */
	private void entryAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check() {
		/* Entry action for state 'Sensor Check'. */
		timerService.setTimer(this, 3, (2l * 1000l), false);
	}
	
	/* Entry action for state 'Sensor Recheck'. */
	private void entryAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck() {
		/* Entry action for state 'Sensor Recheck'. */
		timerService.setTimer(this, 4, (2l * 1000l), false);
	}
	
	/* Entry action for state 'Yellow on'. */
	private void entryAction_main_region_Controller_r1_Police_Mode_r1_Yellow_on() {
		/* Entry action for state 'Yellow on'. */
		timerService.setTimer(this, 5, 500l, false);
	}
	
	/* Entry action for state 'Yellow off'. */
	private void entryAction_main_region_Controller_r1_Police_Mode_r1_Yellow_off() {
		/* Entry action for state 'Yellow off'. */
		timerService.setTimer(this, 6, 500l, false);
	}
	
	/* Entry action for state 'Dumb Mode'. */
	private void entryAction_main_region_Controller_r2_Dumb_Mode() {
		/* Entry action for state 'Dumb Mode'. */
		setSmartMode(false);
	}
	
	/* Entry action for state 'Intermediate 1'. */
	private void entryAction_main_region_Controller_r2_Intermediate_1() {
		/* Entry action for state 'Intermediate 1'. */
		timerService.setTimer(this, 7, (2l * 1000l), false);
	}
	
	/* Entry action for state 'Smart Mode'. */
	private void entryAction_main_region_Controller_r2_Smart_Mode() {
		/* Entry action for state 'Smart Mode'. */
		setSmartMode(true);
	}
	
	/* Entry action for state 'Intermediate 2'. */
	private void entryAction_main_region_Controller_r2_Intermediate_2() {
		/* Entry action for state 'Intermediate 2'. */
		timerService.setTimer(this, 8, (2l * 1000l), false);
	}
	
	/* Exit action for state 'Red'. */
	private void exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red() {
		/* Exit action for state 'Red'. */
		timerService.unsetTimer(this, 0);
		raiseSetRed(false);
	}
	
	/* Exit action for state 'Yellow'. */
	private void exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow() {
		/* Exit action for state 'Yellow'. */
		timerService.unsetTimer(this, 1);
		raiseSetYellow(false);
	}
	
	/* Exit action for state 'Green'. */
	private void exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green() {
		/* Exit action for state 'Green'. */
		timerService.unsetTimer(this, 2);
		raiseSetGreen(false);
	}
	
	/* Exit action for state 'Sensor Check'. */
	private void exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check() {
		/* Exit action for state 'Sensor Check'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Sensor Recheck'. */
	private void exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck() {
		/* Exit action for state 'Sensor Recheck'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Yellow on'. */
	private void exitAction_main_region_Controller_r1_Police_Mode_r1_Yellow_on() {
		/* Exit action for state 'Yellow on'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Yellow off'. */
	private void exitAction_main_region_Controller_r1_Police_Mode_r1_Yellow_off() {
		/* Exit action for state 'Yellow off'. */
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'Intermediate 1'. */
	private void exitAction_main_region_Controller_r2_Intermediate_1() {
		/* Exit action for state 'Intermediate 1'. */
		timerService.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'Intermediate 2'. */
	private void exitAction_main_region_Controller_r2_Intermediate_2() {
		/* Exit action for state 'Intermediate 2'. */
		timerService.unsetTimer(this, 8);
	}
	
	/* 'default' enter sequence for state Controller */
	private void enterSequence_main_region_Controller_default() {
		/* 'default' enter sequence for state Controller */
		enterSequence_main_region_Controller_r1_default();
		enterSequence_main_region_Controller_r2_default();
	}
	
	/* 'default' enter sequence for state Smart and Dumb Mode */
	private void enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_default() {
		/* 'default' enter sequence for state Smart and Dumb Mode */
		enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_default();
	}
	
	/* 'default' enter sequence for state Red */
	private void enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red_default() {
		/* 'default' enter sequence for state Red */
		entryAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red();
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_RED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Yellow */
	private void enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow_default() {
		/* 'default' enter sequence for state Yellow */
		entryAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow();
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_YELLOW;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Green */
	private void enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_default() {
		/* 'default' enter sequence for state Green */
		entryAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green();
		enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_default();
	}
	
	/* 'default' enter sequence for state Sensor Check */
	private void enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check_default() {
		/* 'default' enter sequence for state Sensor Check */
		entryAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check();
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_CHECK;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Sensor Recheck */
	private void enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck_default() {
		/* 'default' enter sequence for state Sensor Recheck */
		entryAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck();
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_RECHECK;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Police Mode */
	private void enterSequence_main_region_Controller_r1_Police_Mode_default() {
		/* 'default' enter sequence for state Police Mode */
		enterSequence_main_region_Controller_r1_Police_Mode_r1_default();
	}
	
	/* 'default' enter sequence for state Yellow on */
	private void enterSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_on_default() {
		/* 'default' enter sequence for state Yellow on */
		entryAction_main_region_Controller_r1_Police_Mode_r1_Yellow_on();
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_ON;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Yellow off */
	private void enterSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_off_default() {
		/* 'default' enter sequence for state Yellow off */
		entryAction_main_region_Controller_r1_Police_Mode_r1_Yellow_off();
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Dumb Mode */
	private void enterSequence_main_region_Controller_r2_Dumb_Mode_default() {
		/* 'default' enter sequence for state Dumb Mode */
		entryAction_main_region_Controller_r2_Dumb_Mode();
		stateVector[1] = State.MAIN_REGION_CONTROLLER_R2_DUMB_MODE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Intermediate 1 */
	private void enterSequence_main_region_Controller_r2_Intermediate_1_default() {
		/* 'default' enter sequence for state Intermediate 1 */
		entryAction_main_region_Controller_r2_Intermediate_1();
		stateVector[1] = State.MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_1;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Smart Mode */
	private void enterSequence_main_region_Controller_r2_Smart_Mode_default() {
		/* 'default' enter sequence for state Smart Mode */
		entryAction_main_region_Controller_r2_Smart_Mode();
		stateVector[1] = State.MAIN_REGION_CONTROLLER_R2_SMART_MODE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Intermediate 2 */
	private void enterSequence_main_region_Controller_r2_Intermediate_2_default() {
		/* 'default' enter sequence for state Intermediate 2 */
		entryAction_main_region_Controller_r2_Intermediate_2();
		stateVector[1] = State.MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_2;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Police Interupt 1 */
	private void enterSequence_main_region_Controller_r2_Police_Interupt_1_default() {
		/* 'default' enter sequence for state Police Interupt 1 */
		stateVector[1] = State.MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_1;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Police Interupt 2 */
	private void enterSequence_main_region_Controller_r2_Police_Interupt_2_default() {
		/* 'default' enter sequence for state Police Interupt 2 */
		stateVector[1] = State.MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_2;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Controller_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Controller_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Controller_r1_Smart_and_Dumb_Mode_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Controller_r1_Police_Mode_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Controller_r1_Police_Mode_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Controller_r2_default() {
		/* 'default' enter sequence for region r2 */
		react_main_region_Controller_r2__entry_Default();
	}
	
	/* Default exit sequence for state Smart and Dumb Mode */
	private void exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode() {
		/* Default exit sequence for state Smart and Dumb Mode */
		exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1();
		stateVector[0] = State.MAIN_REGION_CONTROLLER;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Red */
	private void exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red() {
		/* Default exit sequence for state Red */
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE;
		stateConfVectorPosition = 0;
		exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red();
	}
	
	/* Default exit sequence for state Yellow */
	private void exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow() {
		/* Default exit sequence for state Yellow */
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE;
		stateConfVectorPosition = 0;
		exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow();
	}
	
	/* Default exit sequence for state Green */
	private void exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green() {
		/* Default exit sequence for state Green */
		exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1();
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE;
		stateConfVectorPosition = 0;
		exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green();
	}
	
	/* Default exit sequence for state Sensor Check */
	private void exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check() {
		/* Default exit sequence for state Sensor Check */
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN;
		stateConfVectorPosition = 0;
		exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check();
	}
	
	/* Default exit sequence for state Sensor Recheck */
	private void exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck() {
		/* Default exit sequence for state Sensor Recheck */
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN;
		stateConfVectorPosition = 0;
		exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck();
	}
	
	/* Default exit sequence for state Police Mode */
	private void exitSequence_main_region_Controller_r1_Police_Mode() {
		/* Default exit sequence for state Police Mode */
		exitSequence_main_region_Controller_r1_Police_Mode_r1();
		stateVector[0] = State.MAIN_REGION_CONTROLLER;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Yellow on */
	private void exitSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_on() {
		/* Default exit sequence for state Yellow on */
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_POLICE_MODE;
		stateConfVectorPosition = 0;
		exitAction_main_region_Controller_r1_Police_Mode_r1_Yellow_on();
	}
	
	/* Default exit sequence for state Yellow off */
	private void exitSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_off() {
		/* Default exit sequence for state Yellow off */
		stateVector[0] = State.MAIN_REGION_CONTROLLER_R1_POLICE_MODE;
		stateConfVectorPosition = 0;
		exitAction_main_region_Controller_r1_Police_Mode_r1_Yellow_off();
	}
	
	/* Default exit sequence for state Dumb Mode */
	private void exitSequence_main_region_Controller_r2_Dumb_Mode() {
		/* Default exit sequence for state Dumb Mode */
		stateVector[1] = State.MAIN_REGION_CONTROLLER;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Intermediate 1 */
	private void exitSequence_main_region_Controller_r2_Intermediate_1() {
		/* Default exit sequence for state Intermediate 1 */
		stateVector[1] = State.MAIN_REGION_CONTROLLER;
		stateConfVectorPosition = 1;
		exitAction_main_region_Controller_r2_Intermediate_1();
	}
	
	/* Default exit sequence for state Smart Mode */
	private void exitSequence_main_region_Controller_r2_Smart_Mode() {
		/* Default exit sequence for state Smart Mode */
		stateVector[1] = State.MAIN_REGION_CONTROLLER;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Intermediate 2 */
	private void exitSequence_main_region_Controller_r2_Intermediate_2() {
		/* Default exit sequence for state Intermediate 2 */
		stateVector[1] = State.MAIN_REGION_CONTROLLER;
		stateConfVectorPosition = 1;
		exitAction_main_region_Controller_r2_Intermediate_2();
	}
	
	/* Default exit sequence for state Police Interupt 1 */
	private void exitSequence_main_region_Controller_r2_Police_Interupt_1() {
		/* Default exit sequence for state Police Interupt 1 */
		stateVector[1] = State.MAIN_REGION_CONTROLLER;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Police Interupt 2 */
	private void exitSequence_main_region_Controller_r2_Police_Interupt_2() {
		/* Default exit sequence for state Police Interupt 2 */
		stateVector[1] = State.MAIN_REGION_CONTROLLER;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode();
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_RED:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red();
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_YELLOW:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow();
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green();
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_CHECK:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check();
			exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green();
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_RECHECK:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck();
			exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green();
			break;
		case MAIN_REGION_CONTROLLER_R1_POLICE_MODE:
			exitSequence_main_region_Controller_r1_Police_Mode();
			break;
		case MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_ON:
			exitSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_on();
			break;
		case MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_OFF:
			exitSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_off();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_CONTROLLER_R2_DUMB_MODE:
			exitSequence_main_region_Controller_r2_Dumb_Mode();
			break;
		case MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_1:
			exitSequence_main_region_Controller_r2_Intermediate_1();
			break;
		case MAIN_REGION_CONTROLLER_R2_SMART_MODE:
			exitSequence_main_region_Controller_r2_Smart_Mode();
			break;
		case MAIN_REGION_CONTROLLER_R2_INTERMEDIATE_2:
			exitSequence_main_region_Controller_r2_Intermediate_2();
			break;
		case MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_1:
			exitSequence_main_region_Controller_r2_Police_Interupt_1();
			break;
		case MAIN_REGION_CONTROLLER_R2_POLICE_INTERUPT_2:
			exitSequence_main_region_Controller_r2_Police_Interupt_2();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_RED:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red();
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_YELLOW:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow();
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green();
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_CHECK:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check();
			exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green();
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_RECHECK:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck();
			exitAction_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_CHECK:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check();
			break;
		case MAIN_REGION_CONTROLLER_R1_SMART_AND_DUMB_MODE_R1_GREEN_R1_SENSOR_RECHECK:
			exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Controller_r1_Police_Mode_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_ON:
			exitSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_on();
			break;
		case MAIN_REGION_CONTROLLER_R1_POLICE_MODE_R1_YELLOW_OFF:
			exitSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_off();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Controller_r2__choice_0() {
		/* The reactions of state null. */
		if (getPoliceMode()==true) {
			setPoliceMode(false);
			enterSequence_main_region_Controller_r2_Police_Interupt_1_default();
		} else {
			if (getPoliceMode()==false) {
				setPoliceMode(true);
				enterSequence_main_region_Controller_r2_Police_Interupt_1_default();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Controller_r2__choice_1() {
		/* The reactions of state null. */
		if (getPoliceMode()==false) {
			setPoliceMode(true);
			enterSequence_main_region_Controller_r2_Police_Interupt_2_default();
		} else {
			if (getPoliceMode()==true) {
				setPoliceMode(false);
				enterSequence_main_region_Controller_r2_Police_Interupt_2_default();
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Controller_r1_Smart_and_Dumb_Mode_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Controller_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Controller_r1_Police_Mode_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_on_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Controller_r2__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Controller_r2_Dumb_Mode_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Controller_default();
	}
	
	private long main_region_Controller_r1_Smart_and_Dumb_Mode_react(long transitioned_before) {
		/* The reactions of state Smart and Dumb Mode. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getPoliceMode()==true) {
				exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode();
				raiseSetYellow(true);
				enterSequence_main_region_Controller_r1_Police_Mode_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red_react(long transitioned_before) {
		/* The reactions of state Red. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red();
				timeEvents[0] = false;
				enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_default();
				main_region_Controller_r1_Smart_and_Dumb_Mode_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Controller_r1_Smart_and_Dumb_Mode_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow_react(long transitioned_before) {
		/* The reactions of state Yellow. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow();
				timeEvents[1] = false;
				enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Red_default();
				main_region_Controller_r1_Smart_and_Dumb_Mode_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Controller_r1_Smart_and_Dumb_Mode_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_react(long transitioned_before) {
		/* The reactions of state Green. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green();
				timeEvents[2] = false;
				enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow_default();
				main_region_Controller_r1_Smart_and_Dumb_Mode_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Controller_r1_Smart_and_Dumb_Mode_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check_react(long transitioned_before) {
		/* The reactions of state Sensor Check. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[3]) {
				exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green();
				timeEvents[3] = false;
				enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow_default();
				main_region_Controller_r1_Smart_and_Dumb_Mode_react(0l);
				transitioned_after = 0l;
			} else {
				if ((getSmartMode() && carDetected)) {
					exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check();
					enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck_default();
					main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck_react(long transitioned_before) {
		/* The reactions of state Sensor Recheck. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[4]) {
				exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green();
				timeEvents[4] = false;
				enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Yellow_default();
				main_region_Controller_r1_Smart_and_Dumb_Mode_react(0l);
				transitioned_after = 0l;
			} else {
				if ((getSmartMode() && carDetected)) {
					exitSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Recheck();
					enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_r1_Sensor_Check_default();
					main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Controller_r1_Smart_and_Dumb_Mode_r1_Green_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r1_Police_Mode_r1_Yellow_on_react(long transitioned_before) {
		/* The reactions of state Yellow on. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[5]) {
				exitSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_on();
				raiseSetYellow(false);
				timeEvents[5] = false;
				enterSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_off_default();
				transitioned_after = 0l;
			} else {
				if (getPoliceMode()==false) {
					exitSequence_main_region_Controller_r1_Police_Mode();
					raiseSetYellow(false);
					enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r1_Police_Mode_r1_Yellow_off_react(long transitioned_before) {
		/* The reactions of state Yellow off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[6]) {
				exitSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_off();
				raiseSetYellow(true);
				timeEvents[6] = false;
				enterSequence_main_region_Controller_r1_Police_Mode_r1_Yellow_on_default();
				transitioned_after = 0l;
			} else {
				if (getPoliceMode()==false) {
					exitSequence_main_region_Controller_r1_Police_Mode();
					enterSequence_main_region_Controller_r1_Smart_and_Dumb_Mode_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r2_Dumb_Mode_react(long transitioned_before) {
		/* The reactions of state Dumb Mode. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (buttonPressed) {
				exitSequence_main_region_Controller_r2_Dumb_Mode();
				enterSequence_main_region_Controller_r2_Intermediate_1_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r2_Intermediate_1_react(long transitioned_before) {
		/* The reactions of state Intermediate 1. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (buttonReleased) {
				exitSequence_main_region_Controller_r2_Intermediate_1();
				raiseSetLED(true);
				enterSequence_main_region_Controller_r2_Smart_Mode_default();
				transitioned_after = 1l;
			} else {
				if (timeEvents[7]) {
					exitSequence_main_region_Controller_r2_Intermediate_1();
					timeEvents[7] = false;
					react_main_region_Controller_r2__choice_0();
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r2_Smart_Mode_react(long transitioned_before) {
		/* The reactions of state Smart Mode. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (buttonPressed) {
				exitSequence_main_region_Controller_r2_Smart_Mode();
				enterSequence_main_region_Controller_r2_Intermediate_2_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r2_Intermediate_2_react(long transitioned_before) {
		/* The reactions of state Intermediate 2. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (buttonReleased) {
				exitSequence_main_region_Controller_r2_Intermediate_2();
				raiseSetLED(false);
				enterSequence_main_region_Controller_r2_Dumb_Mode_default();
				transitioned_after = 1l;
			} else {
				if (timeEvents[8]) {
					exitSequence_main_region_Controller_r2_Intermediate_2();
					timeEvents[8] = false;
					react_main_region_Controller_r2__choice_1();
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r2_Police_Interupt_1_react(long transitioned_before) {
		/* The reactions of state Police Interupt 1. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (buttonReleased) {
				exitSequence_main_region_Controller_r2_Police_Interupt_1();
				enterSequence_main_region_Controller_r2_Dumb_Mode_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Controller_r2_Police_Interupt_2_react(long transitioned_before) {
		/* The reactions of state Police Interupt 2. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (buttonReleased) {
				exitSequence_main_region_Controller_r2_Police_Interupt_2();
				enterSequence_main_region_Controller_r2_Smart_Mode_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
