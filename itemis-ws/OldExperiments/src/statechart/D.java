/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class D implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_ORTHOGONAL,
		MAIN_REGION_ORTHOGONAL_R1_TEMP,
		MAIN_REGION_ORTHOGONAL_R1_ONE,
		MAIN_REGION_ORTHOGONAL_R1_INITIAL,
		MAIN_REGION_ORTHOGONAL_R1_ZERO,
		MAIN_REGION_ORTHOGONAL_R2_S,
		MAIN_REGION_ORTHOGONAL_R2_T,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public D() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart D */
		setX(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart D */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart D */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_ORTHOGONAL_R1_TEMP:
			transitioned = main_region_Orthogonal_r1_Temp_react(transitioned);
			break;
		case MAIN_REGION_ORTHOGONAL_R1_ONE:
			break;
		case MAIN_REGION_ORTHOGONAL_R1_INITIAL:
			transitioned = main_region_Orthogonal_r1_Initial_react(transitioned);
			break;
		case MAIN_REGION_ORTHOGONAL_R1_ZERO:
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_ORTHOGONAL_R2_S:
				main_region_Orthogonal_r2_S_react(transitioned);
				break;
			case MAIN_REGION_ORTHOGONAL_R2_T:
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_ORTHOGONAL:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_ORTHOGONAL.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_ORTHOGONAL_R2_T.ordinal();
		case MAIN_REGION_ORTHOGONAL_R1_TEMP:
			return stateVector[0] == State.MAIN_REGION_ORTHOGONAL_R1_TEMP;
		case MAIN_REGION_ORTHOGONAL_R1_ONE:
			return stateVector[0] == State.MAIN_REGION_ORTHOGONAL_R1_ONE;
		case MAIN_REGION_ORTHOGONAL_R1_INITIAL:
			return stateVector[0] == State.MAIN_REGION_ORTHOGONAL_R1_INITIAL;
		case MAIN_REGION_ORTHOGONAL_R1_ZERO:
			return stateVector[0] == State.MAIN_REGION_ORTHOGONAL_R1_ZERO;
		case MAIN_REGION_ORTHOGONAL_R2_S:
			return stateVector[1] == State.MAIN_REGION_ORTHOGONAL_R2_S;
		case MAIN_REGION_ORTHOGONAL_R2_T:
			return stateVector[1] == State.MAIN_REGION_ORTHOGONAL_R2_T;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private long x;
	
	public long getX() {
		return x;
	}
	
	public void setX(long value) {
		this.x = value;
	}
	
	/* Entry action for state 'Initial'. */
	private void entryAction_main_region_Orthogonal_r1_Initial() {
		/* Entry action for state 'Initial'. */
		timerService.setTimer(this, 0, (1l * 1000l), false);
	}
	
	/* Entry action for state 'S'. */
	private void entryAction_main_region_Orthogonal_r2_S() {
		/* Entry action for state 'S'. */
		timerService.setTimer(this, 1, (5l * 1000l), false);
	}
	
	/* Exit action for state 'Initial'. */
	private void exitAction_main_region_Orthogonal_r1_Initial() {
		/* Exit action for state 'Initial'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'S'. */
	private void exitAction_main_region_Orthogonal_r2_S() {
		/* Exit action for state 'S'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Orthogonal */
	private void enterSequence_main_region_Orthogonal_default() {
		/* 'default' enter sequence for state Orthogonal */
		enterSequence_main_region_Orthogonal_r1_default();
		enterSequence_main_region_Orthogonal_r2_default();
	}
	
	/* 'default' enter sequence for state Temp */
	private void enterSequence_main_region_Orthogonal_r1_Temp_default() {
		/* 'default' enter sequence for state Temp */
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL_R1_TEMP;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state One */
	private void enterSequence_main_region_Orthogonal_r1_One_default() {
		/* 'default' enter sequence for state One */
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL_R1_ONE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Initial */
	private void enterSequence_main_region_Orthogonal_r1_Initial_default() {
		/* 'default' enter sequence for state Initial */
		entryAction_main_region_Orthogonal_r1_Initial();
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL_R1_INITIAL;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Zero */
	private void enterSequence_main_region_Orthogonal_r1_Zero_default() {
		/* 'default' enter sequence for state Zero */
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL_R1_ZERO;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state S */
	private void enterSequence_main_region_Orthogonal_r2_S_default() {
		/* 'default' enter sequence for state S */
		entryAction_main_region_Orthogonal_r2_S();
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_R2_S;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state T */
	private void enterSequence_main_region_Orthogonal_r2_T_default() {
		/* 'default' enter sequence for state T */
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL_R2_T;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Orthogonal_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Orthogonal_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Orthogonal_r2_default() {
		/* 'default' enter sequence for region r2 */
		react_main_region_Orthogonal_r2__entry_Default();
	}
	
	/* Default exit sequence for state Temp */
	private void exitSequence_main_region_Orthogonal_r1_Temp() {
		/* Default exit sequence for state Temp */
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state One */
	private void exitSequence_main_region_Orthogonal_r1_One() {
		/* Default exit sequence for state One */
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Initial */
	private void exitSequence_main_region_Orthogonal_r1_Initial() {
		/* Default exit sequence for state Initial */
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL;
		stateConfVectorPosition = 0;
		exitAction_main_region_Orthogonal_r1_Initial();
	}
	
	/* Default exit sequence for state Zero */
	private void exitSequence_main_region_Orthogonal_r1_Zero() {
		/* Default exit sequence for state Zero */
		stateVector[0] = State.MAIN_REGION_ORTHOGONAL;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state S */
	private void exitSequence_main_region_Orthogonal_r2_S() {
		/* Default exit sequence for state S */
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL;
		stateConfVectorPosition = 1;
		exitAction_main_region_Orthogonal_r2_S();
	}
	
	/* Default exit sequence for state T */
	private void exitSequence_main_region_Orthogonal_r2_T() {
		/* Default exit sequence for state T */
		stateVector[1] = State.MAIN_REGION_ORTHOGONAL;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_ORTHOGONAL_R1_TEMP:
			exitSequence_main_region_Orthogonal_r1_Temp();
			break;
		case MAIN_REGION_ORTHOGONAL_R1_ONE:
			exitSequence_main_region_Orthogonal_r1_One();
			break;
		case MAIN_REGION_ORTHOGONAL_R1_INITIAL:
			exitSequence_main_region_Orthogonal_r1_Initial();
			break;
		case MAIN_REGION_ORTHOGONAL_R1_ZERO:
			exitSequence_main_region_Orthogonal_r1_Zero();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_ORTHOGONAL_R2_S:
			exitSequence_main_region_Orthogonal_r2_S();
			break;
		case MAIN_REGION_ORTHOGONAL_R2_T:
			exitSequence_main_region_Orthogonal_r2_T();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Orthogonal_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Orthogonal_r1_Initial_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Orthogonal_r2__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Orthogonal_r2_S_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Orthogonal_default();
	}
	
	private long main_region_Orthogonal_r1_Temp_react(long transitioned_before) {
		/* The reactions of state Temp. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getX()==0l) {
				exitSequence_main_region_Orthogonal_r1_Temp();
				enterSequence_main_region_Orthogonal_r1_Zero_default();
				transitioned_after = 0l;
			} else {
				if (getX()==1l) {
					exitSequence_main_region_Orthogonal_r1_Temp();
					enterSequence_main_region_Orthogonal_r1_One_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Orthogonal_r1_Initial_react(long transitioned_before) {
		/* The reactions of state Initial. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_Orthogonal_r1_Initial();
				setX(getX() + 1l);
				timeEvents[0] = false;
				enterSequence_main_region_Orthogonal_r1_Temp_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Orthogonal_r2_S_react(long transitioned_before) {
		/* The reactions of state S. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Orthogonal_r2_S();
				timeEvents[1] = false;
				enterSequence_main_region_Orthogonal_r2_T_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
