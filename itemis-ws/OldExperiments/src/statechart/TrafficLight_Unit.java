/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class TrafficLight_Unit implements ITimed, IEventDriven {
	public static class Device {
		private boolean crossingButton_triggered;
		
		public boolean getCrossingButton_triggered() {
			return crossingButton_triggered;
		}
		
		public void setCrossingButton_triggered(boolean value) {
			this.crossingButton_triggered = value;
		}
		
		private boolean isOn;
		
		public boolean getIsOn() {
			return isOn;
		}
		
		public void setIsOn(boolean value) {
			this.isOn = value;
		}
		
	}
	
	public static class Light {
		private TrafficLight_Unit parent;
		
		public Light(TrafficLight_Unit parent) {
			this.parent = parent;
		}
		private boolean red;
		
		
		protected void raiseRed() {
			red = true;
			redObservable.next(null);
			parent.raiseLocal_Light_red();
		}
		
		private Observable<Void> redObservable = new Observable<Void>();
		
		public Observable<Void> getRed() {
			return redObservable;
		}
		
		private boolean yellow;
		
		
		protected void raiseYellow() {
			yellow = true;
			yellowObservable.next(null);
			parent.raiseLocal_Light_yellow();
		}
		
		private Observable<Void> yellowObservable = new Observable<Void>();
		
		public Observable<Void> getYellow() {
			return yellowObservable;
		}
		
		private boolean green;
		
		
		protected void raiseGreen() {
			green = true;
			greenObservable.next(null);
			parent.raiseLocal_Light_green();
		}
		
		private Observable<Void> greenObservable = new Observable<Void>();
		
		public Observable<Void> getGreen() {
			return greenObservable;
		}
		
		private String color;
		
		public String getColor() {
			return color;
		}
		
		public void setColor(String value) {
			this.color = value;
		}
		
		private String pedestrian;
		
		public String getPedestrian() {
			return pedestrian;
		}
		
		public void setPedestrian(String value) {
			this.pedestrian = value;
		}
		
	}
	
	public static class Timer {
		private TrafficLight_Unit parent;
		
		public Timer(TrafficLight_Unit parent) {
			this.parent = parent;
		}
		private boolean reset;
		
		
		protected void raiseReset() {
			reset = true;
			resetObservable.next(null);
			parent.raiseLocal_Timer_reset();
		}
		
		private Observable<Void> resetObservable = new Observable<Void>();
		
		public Observable<Void> getReset() {
			return resetObservable;
		}
		
		private long counter;
		
		public long getCounter() {
			return counter;
		}
		
		public void setCounter(long value) {
			this.counter = value;
		}
		
		private long green_period;
		
		public long getGreen_period() {
			return green_period;
		}
		
		public void setGreen_period(long value) {
			this.green_period = value;
		}
		
		private long red_period;
		
		public long getRed_period() {
			return red_period;
		}
		
		public void setRed_period(long value) {
			this.red_period = value;
		}
		
	}
	
	protected Device device;
	
	protected Light light;
	
	protected Timer timer;
	
	public enum State {
		_TRAFFICLIGHT_UNIT__OFF,
		_TRAFFICLIGHT_UNIT__ON,
		_TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_GREEN,
		_TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_RED,
		_TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_YELLOW,
		_TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_STOPHAND,
		_TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_BLINKINGWALKINGMAN,
		_TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_WALKINGMAN,
		_TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING_,
		_TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___GREEN_PERIOD_,
		_TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___RED_PERIOD_,
		_TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___YELLOW_PERIOD_,
		_TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[3];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[4];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean local_Light_yellow;
	private boolean local_Light_green;
	private boolean local_Light_red;
	private boolean local_Timer_reset;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public TrafficLight_Unit() {
		device = new Device();
		light = new Light(this);
		timer = new Timer(this);
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		/* Default init sequence for statechart TrafficLight_Unit */
		device.setCrossingButton_triggered(false);
		device.setIsOn(false);
		light.setColor("");
		light.setPedestrian("");
		timer.setCounter(10l);
		timer.setGreen_period(15l);
		timer.setRed_period(5l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart TrafficLight_Unit */
		enterSequence__TrafficLight_Unit__default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart TrafficLight_Unit */
		exitSequence__TrafficLight_Unit_();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		on = false;
		off = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
	}
	
	private void clearInternalEvents() {
		local_Light_yellow = false;
		local_Light_green = false;
		local_Light_red = false;
		local_Timer_reset = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case _TRAFFICLIGHT_UNIT__OFF:
			transitioned = _TrafficLight_Unit__Off_react(transitioned);
			break;
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_GREEN:
			transitioned = _TrafficLight_Unit__On_TrafficLight_Color_Green_react(transitioned);
			break;
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_RED:
			transitioned = _TrafficLight_Unit__On_TrafficLight_Color_Red_react(transitioned);
			break;
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_YELLOW:
			transitioned = _TrafficLight_Unit__On_TrafficLight_Color_Yellow_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_STOPHAND:
				transitioned = _TrafficLight_Unit__On_PedestrianLight_Color_StopHand_react(transitioned);
				break;
			case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_BLINKINGWALKINGMAN:
				transitioned = _TrafficLight_Unit__On_PedestrianLight_Color_BlinkingWalkingMan_react(transitioned);
				break;
			case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_WALKINGMAN:
				transitioned = _TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___GREEN_PERIOD_:
				_TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period__react(transitioned);
				break;
			case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___RED_PERIOD_:
				_TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period__react(transitioned);
				break;
			case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___YELLOW_PERIOD_:
				_TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period__react(transitioned);
				break;
			case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_:
				_TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___final__react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			clearInternalEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return true;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case _TRAFFICLIGHT_UNIT__OFF:
			return stateVector[0] == State._TRAFFICLIGHT_UNIT__OFF;
		case _TRAFFICLIGHT_UNIT__ON:
			return stateVector[0].ordinal() >= State.
					_TRAFFICLIGHT_UNIT__ON.ordinal()&& stateVector[0].ordinal() <= State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_.ordinal();
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_GREEN:
			return stateVector[0] == State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_GREEN;
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_RED:
			return stateVector[0] == State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_RED;
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_YELLOW:
			return stateVector[0] == State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_YELLOW;
		case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_STOPHAND:
			return stateVector[1] == State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_STOPHAND;
		case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_BLINKINGWALKINGMAN:
			return stateVector[1] == State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_BLINKINGWALKINGMAN;
		case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_WALKINGMAN:
			return stateVector[1] == State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_WALKINGMAN;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING_:
			return stateVector[2].ordinal() >= State.
					_TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING_.ordinal()&& stateVector[2].ordinal() <= State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_.ordinal();
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___GREEN_PERIOD_:
			return stateVector[2] == State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___GREEN_PERIOD_;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___RED_PERIOD_:
			return stateVector[2] == State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___RED_PERIOD_;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___YELLOW_PERIOD_:
			return stateVector[2] == State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___YELLOW_PERIOD_;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_:
			return stateVector[2] == State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Device device() {
		return device;
	}
	
	public Light light() {
		return light;
	}
	
	public Timer timer() {
		return timer;
	}
	
	
	protected void raiseLocal_Light_yellow() {
		internalEventQueue.add(() -> {
			local_Light_yellow = true;
		});
	}
	
	protected void raiseLocal_Light_green() {
		internalEventQueue.add(() -> {
			local_Light_green = true;
		});
	}
	
	protected void raiseLocal_Light_red() {
		internalEventQueue.add(() -> {
			local_Light_red = true;
		});
	}
	
	protected void raiseLocal_Timer_reset() {
		internalEventQueue.add(() -> {
			local_Timer_reset = true;
		});
	}
	
	private boolean on;
	
	
	public void raiseOn() {
		inEventQueue.add(() -> {
			on = true;
		});
		runCycle();
	}
	
	private boolean off;
	
	
	public void raiseOff() {
		inEventQueue.add(() -> {
			off = true;
		});
		runCycle();
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction__TrafficLight_Unit__Off() {
		/* Entry action for state 'Off'. */
		device.setIsOn(false);
	}
	
	/* Entry action for state 'Green'. */
	private void entryAction__TrafficLight_Unit__On_TrafficLight_Color_Green() {
		/* Entry action for state 'Green'. */
		timer.raiseReset();
		light.setColor("Green");
	}
	
	/* Entry action for state 'Red'. */
	private void entryAction__TrafficLight_Unit__On_TrafficLight_Color_Red() {
		/* Entry action for state 'Red'. */
		timer.raiseReset();
		light.setColor("Red");
	}
	
	/* Entry action for state 'Yellow'. */
	private void entryAction__TrafficLight_Unit__On_TrafficLight_Color_Yellow() {
		/* Entry action for state 'Yellow'. */
		light.setColor("Yellow");
	}
	
	/* Entry action for state 'StopHand'. */
	private void entryAction__TrafficLight_Unit__On_PedestrianLight_Color_StopHand() {
		/* Entry action for state 'StopHand'. */
		light.setPedestrian("Stop Hand");
	}
	
	/* Entry action for state 'BlinkingWalkingMan'. */
	private void entryAction__TrafficLight_Unit__On_PedestrianLight_Color_BlinkingWalkingMan() {
		/* Entry action for state 'BlinkingWalkingMan'. */
		light.setPedestrian("Blinking Man");
	}
	
	/* Entry action for state 'WalkingMan'. */
	private void entryAction__TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan() {
		/* Entry action for state 'WalkingMan'. */
		timerService.setTimer(this, 0, ((timer.getRed_period() / 2l) * 1000l), false);
		light.setPedestrian("Walking Man");
	}
	
	/* Entry action for state '<green_period>'. */
	private void entryAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period_() {
		/* Entry action for state '<green_period>'. */
		timerService.setTimer(this, 1, (1l * 1000l), true);
	}
	
	/* Entry action for state '<red_period>'. */
	private void entryAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period_() {
		/* Entry action for state '<red_period>'. */
		timerService.setTimer(this, 2, (1l * 1000l), true);
	}
	
	/* Entry action for state '<yellow_period>'. */
	private void entryAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period_() {
		/* Entry action for state '<yellow_period>'. */
		timerService.setTimer(this, 3, (1l * 1000l), true);
		light.raiseYellow();
	}
	
	/* Exit action for state 'Off'. */
	private void exitAction__TrafficLight_Unit__Off() {
		/* Exit action for state 'Off'. */
		device.setIsOn(true);
	}
	
	/* Exit action for state 'WalkingMan'. */
	private void exitAction__TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan() {
		/* Exit action for state 'WalkingMan'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state '<green_period>'. */
	private void exitAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period_() {
		/* Exit action for state '<green_period>'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state '<red_period>'. */
	private void exitAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period_() {
		/* Exit action for state '<red_period>'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state '<yellow_period>'. */
	private void exitAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period_() {
		/* Exit action for state '<yellow_period>'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence__TrafficLight_Unit__Off_default() {
		/* 'default' enter sequence for state Off */
		entryAction__TrafficLight_Unit__Off();
		stateVector[0] = State._TRAFFICLIGHT_UNIT__OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence__TrafficLight_Unit__On_default() {
		/* 'default' enter sequence for state On */
		enterSequence__TrafficLight_Unit__On_TrafficLight_Color_default();
		enterSequence__TrafficLight_Unit__On_PedestrianLight_Color_default();
		enterSequence__TrafficLight_Unit__On_Timer_default();
	}
	
	/* 'default' enter sequence for state Green */
	private void enterSequence__TrafficLight_Unit__On_TrafficLight_Color_Green_default() {
		/* 'default' enter sequence for state Green */
		entryAction__TrafficLight_Unit__On_TrafficLight_Color_Green();
		stateVector[0] = State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_GREEN;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Red */
	private void enterSequence__TrafficLight_Unit__On_TrafficLight_Color_Red_default() {
		/* 'default' enter sequence for state Red */
		entryAction__TrafficLight_Unit__On_TrafficLight_Color_Red();
		stateVector[0] = State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_RED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Yellow */
	private void enterSequence__TrafficLight_Unit__On_TrafficLight_Color_Yellow_default() {
		/* 'default' enter sequence for state Yellow */
		entryAction__TrafficLight_Unit__On_TrafficLight_Color_Yellow();
		stateVector[0] = State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_YELLOW;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state StopHand */
	private void enterSequence__TrafficLight_Unit__On_PedestrianLight_Color_StopHand_default() {
		/* 'default' enter sequence for state StopHand */
		entryAction__TrafficLight_Unit__On_PedestrianLight_Color_StopHand();
		stateVector[1] = State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_STOPHAND;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state BlinkingWalkingMan */
	private void enterSequence__TrafficLight_Unit__On_PedestrianLight_Color_BlinkingWalkingMan_default() {
		/* 'default' enter sequence for state BlinkingWalkingMan */
		entryAction__TrafficLight_Unit__On_PedestrianLight_Color_BlinkingWalkingMan();
		stateVector[1] = State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_BLINKINGWALKINGMAN;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state WalkingMan */
	private void enterSequence__TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan_default() {
		/* 'default' enter sequence for state WalkingMan */
		entryAction__TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan();
		stateVector[1] = State._TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_WALKINGMAN;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state <timer_running> */
	private void enterSequence__TrafficLight_Unit__On_Timer__timer_running__default() {
		/* 'default' enter sequence for state <timer_running> */
		enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown__default();
	}
	
	/* 'default' enter sequence for state <green_period> */
	private void enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period__default() {
		/* 'default' enter sequence for state <green_period> */
		entryAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period_();
		stateVector[2] = State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___GREEN_PERIOD_;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state <red_period> */
	private void enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period__default() {
		/* 'default' enter sequence for state <red_period> */
		entryAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period_();
		stateVector[2] = State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___RED_PERIOD_;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state <yellow_period> */
	private void enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period__default() {
		/* 'default' enter sequence for state <yellow_period> */
		entryAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period_();
		stateVector[2] = State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___YELLOW_PERIOD_;
		stateConfVectorPosition = 2;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___final__default() {
		/* Default enter sequence for final state */
		stateVector[2] = State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for region <TrafficLight_Unit> */
	private void enterSequence__TrafficLight_Unit__default() {
		/* 'default' enter sequence for region <TrafficLight_Unit> */
		react__TrafficLight_Unit___entry_Default();
	}
	
	/* 'default' enter sequence for region TrafficLight_Color */
	private void enterSequence__TrafficLight_Unit__On_TrafficLight_Color_default() {
		/* 'default' enter sequence for region TrafficLight_Color */
		react__TrafficLight_Unit__On_TrafficLight_Color__entry_Default();
	}
	
	/* 'default' enter sequence for region PedestrianLight_Color */
	private void enterSequence__TrafficLight_Unit__On_PedestrianLight_Color_default() {
		/* 'default' enter sequence for region PedestrianLight_Color */
		react__TrafficLight_Unit__On_PedestrianLight_Color__entry_Default();
	}
	
	/* 'default' enter sequence for region Timer */
	private void enterSequence__TrafficLight_Unit__On_Timer_default() {
		/* 'default' enter sequence for region Timer */
		react__TrafficLight_Unit__On_Timer__entry_Default();
	}
	
	/* 'default' enter sequence for region <Timer_Countdown> */
	private void enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown__default() {
		/* 'default' enter sequence for region <Timer_Countdown> */
		react__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence__TrafficLight_Unit__Off() {
		/* Default exit sequence for state Off */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction__TrafficLight_Unit__Off();
	}
	
	/* Default exit sequence for state On */
	private void exitSequence__TrafficLight_Unit__On() {
		/* Default exit sequence for state On */
		exitSequence__TrafficLight_Unit__On_TrafficLight_Color();
		exitSequence__TrafficLight_Unit__On_PedestrianLight_Color();
		exitSequence__TrafficLight_Unit__On_Timer();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state Green */
	private void exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Green() {
		/* Default exit sequence for state Green */
		stateVector[0] = State._TRAFFICLIGHT_UNIT__ON;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Red */
	private void exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Red() {
		/* Default exit sequence for state Red */
		stateVector[0] = State._TRAFFICLIGHT_UNIT__ON;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Yellow */
	private void exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Yellow() {
		/* Default exit sequence for state Yellow */
		stateVector[0] = State._TRAFFICLIGHT_UNIT__ON;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state StopHand */
	private void exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_StopHand() {
		/* Default exit sequence for state StopHand */
		stateVector[1] = State._TRAFFICLIGHT_UNIT__ON;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state BlinkingWalkingMan */
	private void exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_BlinkingWalkingMan() {
		/* Default exit sequence for state BlinkingWalkingMan */
		stateVector[1] = State._TRAFFICLIGHT_UNIT__ON;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state WalkingMan */
	private void exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan() {
		/* Default exit sequence for state WalkingMan */
		stateVector[1] = State._TRAFFICLIGHT_UNIT__ON;
		stateConfVectorPosition = 1;
		exitAction__TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan();
	}
	
	/* Default exit sequence for state <timer_running> */
	private void exitSequence__TrafficLight_Unit__On_Timer__timer_running_() {
		/* Default exit sequence for state <timer_running> */
		exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown_();
		stateVector[2] = State._TRAFFICLIGHT_UNIT__ON;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state <green_period> */
	private void exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period_() {
		/* Default exit sequence for state <green_period> */
		stateVector[2] = State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING_;
		stateConfVectorPosition = 2;
		exitAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period_();
	}
	
	/* Default exit sequence for state <red_period> */
	private void exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period_() {
		/* Default exit sequence for state <red_period> */
		exitAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period_();
	}
	
	/* Default exit sequence for state <yellow_period> */
	private void exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period_() {
		/* Default exit sequence for state <yellow_period> */
		exitAction__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period_();
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___final_() {
		/* Default exit sequence for final state. */
		stateVector[2] = State._TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING_;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for region <TrafficLight_Unit> */
	private void exitSequence__TrafficLight_Unit_() {
		/* Default exit sequence for region <TrafficLight_Unit> */
		switch (stateVector[0]) {
		case _TRAFFICLIGHT_UNIT__OFF:
			exitSequence__TrafficLight_Unit__Off();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_GREEN:
			exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Green();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_RED:
			exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Red();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_YELLOW:
			exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Yellow();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_STOPHAND:
			exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_StopHand();
			break;
		case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_BLINKINGWALKINGMAN:
			exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_BlinkingWalkingMan();
			break;
		case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_WALKINGMAN:
			exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan();
			break;
		default:
			break;
		}
		switch (stateVector[2]) {
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running_();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___GREEN_PERIOD_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period_();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___RED_PERIOD_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period_();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___YELLOW_PERIOD_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period_();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region TrafficLight_Color */
	private void exitSequence__TrafficLight_Unit__On_TrafficLight_Color() {
		/* Default exit sequence for region TrafficLight_Color */
		switch (stateVector[0]) {
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_GREEN:
			exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Green();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_RED:
			exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Red();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_YELLOW:
			exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Yellow();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region PedestrianLight_Color */
	private void exitSequence__TrafficLight_Unit__On_PedestrianLight_Color() {
		/* Default exit sequence for region PedestrianLight_Color */
		switch (stateVector[1]) {
		case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_STOPHAND:
			exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_StopHand();
			break;
		case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_BLINKINGWALKINGMAN:
			exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_BlinkingWalkingMan();
			break;
		case _TRAFFICLIGHT_UNIT__ON_PEDESTRIANLIGHT_COLOR_WALKINGMAN:
			exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Timer */
	private void exitSequence__TrafficLight_Unit__On_Timer() {
		/* Default exit sequence for region Timer */
		switch (stateVector[2]) {
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running_();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___GREEN_PERIOD_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period_();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___RED_PERIOD_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period_();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___YELLOW_PERIOD_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period_();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region <Timer_Countdown> */
	private void exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown_() {
		/* Default exit sequence for region <Timer_Countdown> */
		switch (stateVector[2]) {
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___GREEN_PERIOD_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period_();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___RED_PERIOD_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period_();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___YELLOW_PERIOD_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period_();
			break;
		case _TRAFFICLIGHT_UNIT__ON_TIMER__TIMER_RUNNING___TIMER_COUNTDOWN___FINAL_:
			exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___final_();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___choice_0() {
		/* The reactions of state null. */
		if (isStateActive(State._TRAFFICLIGHT_UNIT__ON_TRAFFICLIGHT_COLOR_GREEN)) {
			timer.setCounter(timer.green_period);
			enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period__default();
		} else {
			timer.setCounter(timer.red_period);
			enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period__default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react__TrafficLight_Unit___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__TrafficLight_Unit__Off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__TrafficLight_Unit__On_TrafficLight_Color__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__TrafficLight_Unit__On_TrafficLight_Color_Green_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__TrafficLight_Unit__On_PedestrianLight_Color__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__TrafficLight_Unit__On_PedestrianLight_Color_StopHand_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___entry_Default() {
		/* Default react sequence for initial entry  */
		react__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react__TrafficLight_Unit__On_Timer__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__TrafficLight_Unit__On_Timer__timer_running__default();
	}
	
	private long _TrafficLight_Unit__Off_react(long transitioned_before) {
		/* The reactions of state Off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (on) {
				exitSequence__TrafficLight_Unit__Off();
				enterSequence__TrafficLight_Unit__On_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_react(long transitioned_before) {
		/* The reactions of state On. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (off) {
				exitSequence__TrafficLight_Unit__On();
				enterSequence__TrafficLight_Unit__Off_default();
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_TrafficLight_Color_Green_react(long transitioned_before) {
		/* The reactions of state Green. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (local_Light_yellow) {
				exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Green();
				enterSequence__TrafficLight_Unit__On_TrafficLight_Color_Yellow_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_TrafficLight_Color_Red_react(long transitioned_before) {
		/* The reactions of state Red. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (local_Light_green) {
				exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Red();
				enterSequence__TrafficLight_Unit__On_TrafficLight_Color_Green_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_TrafficLight_Color_Yellow_react(long transitioned_before) {
		/* The reactions of state Yellow. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (local_Light_red) {
				exitSequence__TrafficLight_Unit__On_TrafficLight_Color_Yellow();
				enterSequence__TrafficLight_Unit__On_TrafficLight_Color_Red_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_PedestrianLight_Color_StopHand_react(long transitioned_before) {
		/* The reactions of state StopHand. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (local_Light_red) {
				exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_StopHand();
				enterSequence__TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_PedestrianLight_Color_BlinkingWalkingMan_react(long transitioned_before) {
		/* The reactions of state BlinkingWalkingMan. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (local_Light_green) {
				exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_BlinkingWalkingMan();
				enterSequence__TrafficLight_Unit__On_PedestrianLight_Color_StopHand_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan_react(long transitioned_before) {
		/* The reactions of state WalkingMan. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[0]) {
				exitSequence__TrafficLight_Unit__On_PedestrianLight_Color_WalkingMan();
				timeEvents[0] = false;
				enterSequence__TrafficLight_Unit__On_PedestrianLight_Color_BlinkingWalkingMan_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_Timer__timer_running__react(long transitioned_before) {
		/* The reactions of state <timer_running>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (local_Timer_reset) {
				exitSequence__TrafficLight_Unit__On_Timer__timer_running_();
				enterSequence__TrafficLight_Unit__On_Timer__timer_running__default();
				_TrafficLight_Unit__On_react(0l);
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = _TrafficLight_Unit__On_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period__react(long transitioned_before) {
		/* The reactions of state <green_period>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (timer.getCounter()<=(timer.getGreen_period() / 3l)) {
				exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period_();
				enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period__default();
				_TrafficLight_Unit__On_Timer__timer_running__react(2l);
				transitioned_after = 2l;
			} else {
				if (device.getCrossingButton_triggered()) {
					exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___green_period_();
					enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period__default();
					_TrafficLight_Unit__On_Timer__timer_running__react(2l);
					transitioned_after = 2l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (timeEvents[1]) {
				timer.counter--;
			}
			transitioned_after = _TrafficLight_Unit__On_Timer__timer_running__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period__react(long transitioned_before) {
		/* The reactions of state <red_period>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (timer.getCounter()<=0l) {
				exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___red_period_();
				light.raiseGreen();
				enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___final__default();
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (timeEvents[2]) {
				timer.counter--;
			}
			transitioned_after = _TrafficLight_Unit__On_Timer__timer_running__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period__react(long transitioned_before) {
		/* The reactions of state <yellow_period>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (timer.getCounter()<=0l) {
				exitSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___yellow_period_();
				light.raiseRed();
				enterSequence__TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___final__default();
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (timeEvents[3]) {
				timer.counter--;
			}
			transitioned_after = _TrafficLight_Unit__On_Timer__timer_running__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _TrafficLight_Unit__On_Timer__timer_running___Timer_Countdown___final__react(long transitioned_before) {
		/* The reactions of state null. */
		return _TrafficLight_Unit__On_Timer__timer_running__react(transitioned_before);
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
