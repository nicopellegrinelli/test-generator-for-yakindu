/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Test_converter_entry_exit_actions_expected implements ITimed, IEventDriven {
	public static class User {
		private Test_converter_entry_exit_actions_expected parent;
		
		public User(Test_converter_entry_exit_actions_expected parent) {
			this.parent = parent;
		}
		private boolean on_button;
		
		
		public void raiseOn_button() {
			parent.inEventQueue.add(() -> {
				on_button = true;
			});
			parent.runCycle();
		}
		
		private boolean off_button;
		
		
		public void raiseOff_button() {
			parent.inEventQueue.add(() -> {
				off_button = true;
			});
			parent.runCycle();
		}
		
		private long brightness;
		
		public long getBrightness() {
			return brightness;
		}
		
		public void setBrightness(long value) {
			this.brightness = value;
		}
		
	}
	
	public static class Sensor {
		private Test_converter_entry_exit_actions_expected parent;
		
		public Sensor(Test_converter_entry_exit_actions_expected parent) {
			this.parent = parent;
		}
		private boolean motion;
		
		
		public void raiseMotion() {
			parent.inEventQueue.add(() -> {
				motion = true;
			});
			parent.runCycle();
		}
		
	}
	
	protected User user;
	
	protected Sensor sensor;
	
	public enum State {
		MAIN_REGION_MOTIONSENSING,
		MAIN_REGION_MOTIONSENSING_R1_OFF,
		MAIN_REGION_MOTIONSENSING_R1_ON,
		MAIN_REGION_MANUAL,
		MAIN_REGION_HELLO,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Test_converter_entry_exit_actions_expected() {
		user = new User(this);
		sensor = new Sensor(this);
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart test_converter_entry_exit_actions_expected */
		user.setBrightness(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart test_converter_entry_exit_actions_expected */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart test_converter_entry_exit_actions_expected */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		user.on_button = false;
		user.off_button = false;
		sensor.motion = false;
		timeEvents[0] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_MOTIONSENSING_R1_OFF:
			main_region_MotionSensing_r1_Off_react(-1l);
			break;
		case MAIN_REGION_MOTIONSENSING_R1_ON:
			main_region_MotionSensing_r1_On_react(-1l);
			break;
		case MAIN_REGION_MANUAL:
			main_region_Manual_react(-1l);
			break;
		case MAIN_REGION_HELLO:
			main_region_Hello_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_MOTIONSENSING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_MOTIONSENSING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_MOTIONSENSING_R1_ON.ordinal();
		case MAIN_REGION_MOTIONSENSING_R1_OFF:
			return stateVector[0] == State.MAIN_REGION_MOTIONSENSING_R1_OFF;
		case MAIN_REGION_MOTIONSENSING_R1_ON:
			return stateVector[0] == State.MAIN_REGION_MOTIONSENSING_R1_ON;
		case MAIN_REGION_MANUAL:
			return stateVector[0] == State.MAIN_REGION_MANUAL;
		case MAIN_REGION_HELLO:
			return stateVector[0] == State.MAIN_REGION_HELLO;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public User user() {
		return user;
	}
	
	public Sensor sensor() {
		return sensor;
	}
	
	
	/* Entry action for state 'On'. */
	private void entryAction_main_region_MotionSensing_r1_On() {
		/* Entry action for state 'On'. */
		timerService.setTimer(this, 0, (30000000000l / 1000000l), false);
	}
	
	/* Exit action for state 'On'. */
	private void exitAction_main_region_MotionSensing_r1_On() {
		/* Exit action for state 'On'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state MotionSensing */
	private void enterSequence_main_region_MotionSensing_default() {
		/* 'default' enter sequence for state MotionSensing */
		enterSequence_main_region_MotionSensing_r1_default();
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_region_MotionSensing_r1_Off_default() {
		/* 'default' enter sequence for state Off */
		stateVector[0] = State.MAIN_REGION_MOTIONSENSING_R1_OFF;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_main_region_MotionSensing_r1_On_default() {
		/* 'default' enter sequence for state On */
		entryAction_main_region_MotionSensing_r1_On();
		stateVector[0] = State.MAIN_REGION_MOTIONSENSING_R1_ON;
	}
	
	/* 'default' enter sequence for state Manual */
	private void enterSequence_main_region_Manual_default() {
		/* 'default' enter sequence for state Manual */
		stateVector[0] = State.MAIN_REGION_MANUAL;
	}
	
	/* 'default' enter sequence for state Hello */
	private void enterSequence_main_region_Hello_default() {
		/* 'default' enter sequence for state Hello */
		stateVector[0] = State.MAIN_REGION_HELLO;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_MotionSensing_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_MotionSensing_r1__entry_Default();
	}
	
	/* Default exit sequence for state MotionSensing */
	private void exitSequence_main_region_MotionSensing() {
		/* Default exit sequence for state MotionSensing */
		exitSequence_main_region_MotionSensing_r1();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_region_MotionSensing_r1_Off() {
		/* Default exit sequence for state Off */
		stateVector[0] = State.MAIN_REGION_MOTIONSENSING;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_main_region_MotionSensing_r1_On() {
		/* Default exit sequence for state On */
		stateVector[0] = State.MAIN_REGION_MOTIONSENSING;
		exitAction_main_region_MotionSensing_r1_On();
	}
	
	/* Default exit sequence for state Manual */
	private void exitSequence_main_region_Manual() {
		/* Default exit sequence for state Manual */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Hello */
	private void exitSequence_main_region_Hello() {
		/* Default exit sequence for state Hello */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_MOTIONSENSING:
			exitSequence_main_region_MotionSensing();
			break;
		case MAIN_REGION_MOTIONSENSING_R1_OFF:
			exitSequence_main_region_MotionSensing_r1_Off();
			break;
		case MAIN_REGION_MOTIONSENSING_R1_ON:
			exitSequence_main_region_MotionSensing_r1_On();
			break;
		case MAIN_REGION_MANUAL:
			exitSequence_main_region_Manual();
			break;
		case MAIN_REGION_HELLO:
			exitSequence_main_region_Hello();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_MotionSensing_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_MOTIONSENSING_R1_OFF:
			exitSequence_main_region_MotionSensing_r1_Off();
			break;
		case MAIN_REGION_MOTIONSENSING_R1_ON:
			exitSequence_main_region_MotionSensing_r1_On();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_MotionSensing_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_MotionSensing_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_MotionSensing_r1_Off_default();
	}
	
	private long main_region_MotionSensing_react(long transitioned_before) {
		/* The reactions of state MotionSensing. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (user.on_button) {
				exitSequence_main_region_MotionSensing();
				user.setBrightness(user.getBrightness() + 1l);
				enterSequence_main_region_Manual_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_MotionSensing_r1_Off_react(long transitioned_before) {
		/* The reactions of state Off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (sensor.motion) {
				exitSequence_main_region_MotionSensing_r1_Off();
				user.setBrightness(1l);
				user.setBrightness(300l);
				enterSequence_main_region_MotionSensing_r1_On_default();
				main_region_MotionSensing_react(0l);
				transitioned_after = 0l;
			} else {
				if (user.on_button) {
					exitSequence_main_region_MotionSensing_r1_Off();
					user.setBrightness(1l);
					user.setBrightness(300l);
					enterSequence_main_region_MotionSensing_r1_On_default();
					main_region_MotionSensing_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_MotionSensing_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_MotionSensing_r1_On_react(long transitioned_before) {
		/* The reactions of state On. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_MotionSensing_r1_On();
				user.setBrightness(0l);
				timeEvents[0] = false;
				enterSequence_main_region_MotionSensing_r1_Off_default();
				main_region_MotionSensing_react(0l);
				transitioned_after = 0l;
			} else {
				if (sensor.motion) {
					exitSequence_main_region_MotionSensing_r1_On();
					user.setBrightness(1l);
					enterSequence_main_region_MotionSensing_r1_On_default();
					main_region_MotionSensing_react(0l);
					transitioned_after = 0l;
				} else {
					if (user.on_button) {
						exitSequence_main_region_MotionSensing_r1_On();
						user.setBrightness(0l);
						enterSequence_main_region_MotionSensing_r1_Off_default();
						main_region_MotionSensing_react(0l);
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_MotionSensing_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Manual_react(long transitioned_before) {
		/* The reactions of state Manual. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((user.on_button) && (user.getBrightness()<10l))) {
				exitSequence_main_region_Manual();
				user.setBrightness(user.getBrightness() + 1l);
				enterSequence_main_region_Manual_default();
				transitioned_after = 0l;
			} else {
				if (user.off_button) {
					exitSequence_main_region_Manual();
					enterSequence_main_region_MotionSensing_default();
					transitioned_after = 0l;
				} else {
					if (((user.on_button) && (user.getBrightness()>=10l))) {
						exitSequence_main_region_Manual();
						enterSequence_main_region_Hello_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Hello_react(long transitioned_before) {
		/* The reactions of state Hello. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (user.off_button) {
				exitSequence_main_region_Hello();
				user.setBrightness(user.getBrightness() + 1l);
				user.setBrightness(0l);
				enterSequence_main_region_Manual_default();
				transitioned_after = 0l;
			} else {
				if (user.on_button) {
					exitSequence_main_region_Hello();
					user.setBrightness(0l);
					user.setBrightness(user.getBrightness() + 1l);
					enterSequence_main_region_Manual_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
