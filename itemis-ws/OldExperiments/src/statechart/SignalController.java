/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class SignalController implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_WAIT_FOR_START,
		MAIN_REGION_INIT,
		MAIN_REGION_INIT_INIT_PROCESS_TURNING,
		MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_TURN,
		MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED,
		MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_TURN,
		MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_COMPLETED,
		MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_TURN,
		MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED,
		MAIN_REGION_OPERATING,
		MAIN_REGION_OPERATING_PROCESSING_UNLOCKED,
		MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE,
		MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_IDLE,
		MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING,
		MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_EXTEND,
		MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP,
		MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE,
		MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING,
		MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_MAIN,
		MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_DISTANT,
		MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_OFF_DISTANT,
		MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_DELAY,
		MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_SHUNT,
		MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND,
		MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_IDLE,
		MAIN_REGION_OPERATING_PROCESSING_PENDING,
		MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_MAIN,
		MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_DISTANT,
		MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT,
		MAIN_REGION_FAILED,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[3];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[5];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	private boolean stateConfVectorChanged;
	
	protected boolean getStateConfVectorChanged() {
		return stateConfVectorChanged;
	}
	
	protected void setStateConfVectorChanged(boolean value) {
		this.stateConfVectorChanged = value;
	}
	public SignalController() {
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart SignalController */
		setSymbol(sTOP);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart SignalController */
		enterSequence_main_region_default();
		do { 
			stateConfVectorChanged = false;
			microStep();
			clearInEvents();
		} while (getStateConfVectorChanged());
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart SignalController */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		start = false;
		clear = false;
		failed = false;
		enable = false;
		extend = false;
		disable = false;
		completedMain = false;
		completedDistant = false;
		completedShunt = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_WAIT_FOR_START:
			transitioned = main_region_Wait_for_Start_react(transitioned);
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_TURN:
			transitioned = main_region_Init_Init_process_Turning_main_Turn_react(transitioned);
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED:
			transitioned = main_region_Init_Init_process_Turning_main_Completed_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_UNLOCKED:
			transitioned = main_region_Operating_Processing_Unlocked_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_IDLE:
			transitioned = main_region_Operating_Processing_Shunting_State_Processing_Idle_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_EXTEND:
			transitioned = main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Extend_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP:
			transitioned = main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Stop_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_MAIN:
			transitioned = main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_DISTANT:
			transitioned = main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_OFF_DISTANT:
			transitioned = main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Off_Distant_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_DELAY:
			transitioned = main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_SHUNT:
			transitioned = main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND:
			transitioned = main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Extend_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_IDLE:
			transitioned = main_region_Operating_Processing_Tour_State_Processing_Idle_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_MAIN:
			transitioned = main_region_Operating_Processing_Pending_Pending_Go_Main_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_DISTANT:
			transitioned = main_region_Operating_Processing_Pending_Pending_Go_Distant_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT:
			transitioned = main_region_Operating_Processing_Pending_Pending_Go_Shunt_react(transitioned);
			break;
		case MAIN_REGION_FAILED:
			transitioned = main_region_Failed_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_TURN:
				transitioned = main_region_Init_Init_process_Turning_distant_Turn_react(transitioned);
				break;
			case MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_COMPLETED:
				transitioned = main_region_Init_Init_process_Turning_distant_Completed_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_TURN:
				main_region_Init_Init_process_Turning_shunt_Turn_react(transitioned);
				break;
			case MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED:
				main_region_Init_Init_process_Turning_shunt_Completed_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			do { 
				stateConfVectorChanged = false;
				microStep();
			} while (getStateConfVectorChanged());
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_WAIT_FOR_START:
			return stateVector[0] == State.MAIN_REGION_WAIT_FOR_START;
		case MAIN_REGION_INIT:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_INIT.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED.ordinal();
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_INIT_INIT_PROCESS_TURNING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED.ordinal();
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_TURN:
			return stateVector[0] == State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_TURN;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED:
			return stateVector[0] == State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_TURN:
			return stateVector[1] == State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_TURN;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_COMPLETED:
			return stateVector[1] == State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_COMPLETED;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_TURN:
			return stateVector[2] == State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_TURN;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED:
			return stateVector[2] == State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED;
		case MAIN_REGION_OPERATING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT.ordinal();
		case MAIN_REGION_OPERATING_PROCESSING_UNLOCKED:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_UNLOCKED;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP.ordinal();
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_IDLE:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_IDLE;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP.ordinal();
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_EXTEND:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_EXTEND;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_IDLE.ordinal();
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND.ordinal();
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_MAIN:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_MAIN;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_DISTANT:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_DISTANT;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_OFF_DISTANT:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_OFF_DISTANT;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_DELAY:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_DELAY;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_SHUNT:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_SHUNT;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_IDLE:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_IDLE;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING_PROCESSING_PENDING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT.ordinal();
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_MAIN:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_MAIN;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_DISTANT:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_DISTANT;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT;
		case MAIN_REGION_FAILED:
			return stateVector[0] == State.MAIN_REGION_FAILED;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	public interface OperationCallback {
	
		public void inc();
		
		public void dec();
		
		public boolean hasMainSignal();
		
		public boolean isMainAndShunt();
		
		public boolean isLightSignal();
		
		public boolean isTour();
		
		public void fail();
		
		public void pending();
		
		public void lock(boolean do_it);
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean start;
	
	
	public void raiseStart() {
		inEventQueue.add(() -> {
			start = true;
		});
		runCycle();
	}
	
	private boolean clear;
	
	
	public void raiseClear() {
		inEventQueue.add(() -> {
			clear = true;
		});
		runCycle();
	}
	
	private boolean failed;
	
	
	public void raiseFailed() {
		inEventQueue.add(() -> {
			failed = true;
		});
		runCycle();
	}
	
	private boolean enable;
	
	
	public void raiseEnable() {
		inEventQueue.add(() -> {
			enable = true;
		});
		runCycle();
	}
	
	private boolean extend;
	
	
	public void raiseExtend() {
		inEventQueue.add(() -> {
			extend = true;
		});
		runCycle();
	}
	
	private boolean disable;
	
	
	public void raiseDisable() {
		inEventQueue.add(() -> {
			disable = true;
		});
		runCycle();
	}
	
	private boolean turnMain;
	
	private long turnMainValue;
	
	
	protected void raiseTurnMain(long value) {
		turnMainValue = value;
		turnMain = true;
		turnMainObservable.next(value);
	}
	
	private Observable<Long> turnMainObservable = new Observable<Long>();
	
	public Observable<Long> getTurnMain() {
		return turnMainObservable;
	}
	
	private boolean turnDistant;
	
	private long turnDistantValue;
	
	
	protected void raiseTurnDistant(long value) {
		turnDistantValue = value;
		turnDistant = true;
		turnDistantObservable.next(value);
	}
	
	private Observable<Long> turnDistantObservable = new Observable<Long>();
	
	public Observable<Long> getTurnDistant() {
		return turnDistantObservable;
	}
	
	private boolean turnShunt;
	
	private long turnShuntValue;
	
	
	protected void raiseTurnShunt(long value) {
		turnShuntValue = value;
		turnShunt = true;
		turnShuntObservable.next(value);
	}
	
	private Observable<Long> turnShuntObservable = new Observable<Long>();
	
	public Observable<Long> getTurnShunt() {
		return turnShuntObservable;
	}
	
	private boolean completedMain;
	
	
	public void raiseCompletedMain() {
		inEventQueue.add(() -> {
			completedMain = true;
		});
		runCycle();
	}
	
	private boolean completedDistant;
	
	
	public void raiseCompletedDistant() {
		inEventQueue.add(() -> {
			completedDistant = true;
		});
		runCycle();
	}
	
	private boolean completedShunt;
	
	
	public void raiseCompletedShunt() {
		inEventQueue.add(() -> {
			completedShunt = true;
		});
		runCycle();
	}
	
	private boolean started;
	
	
	protected void raiseStarted() {
		started = true;
		startedObservable.next(null);
	}
	
	private Observable<Void> startedObservable = new Observable<Void>();
	
	public Observable<Void> getStarted() {
		return startedObservable;
	}
	
	private boolean cleared;
	
	
	protected void raiseCleared() {
		cleared = true;
		clearedObservable.next(null);
	}
	
	private Observable<Void> clearedObservable = new Observable<Void>();
	
	public Observable<Void> getCleared() {
		return clearedObservable;
	}
	
	public static final long timeout = 5000l;
	
	public long getTimeout() {
		return timeout;
	}
	
	public static final long delay = 350l;
	
	public long getDelay() {
		return delay;
	}
	
	private long symbol;
	
	public long getSymbol() {
		return symbol;
	}
	
	public void setSymbol(long value) {
		this.symbol = value;
	}
	
	public static final long oFF = -(1l);
	
	public long getOFF() {
		return oFF;
	}
	
	public static final long sTOP = 0l;
	
	public long getSTOP() {
		return sTOP;
	}
	
	public static final long gO = 1l;
	
	public long getGO() {
		return gO;
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_main_region_Init() {
		/* Entry action for state 'Init'. */
		timerService.setTimer(this, 0, getTimeout(), false);
		operationCallback.inc();
	}
	
	/* Entry action for state 'Turning'. */
	private void entryAction_main_region_Init_Init_process_Turning() {
		/* Entry action for state 'Turning'. */
		operationCallback.pending();
	}
	
	/* Entry action for state 'Turn'. */
	private void entryAction_main_region_Init_Init_process_Turning_main_Turn() {
		/* Entry action for state 'Turn'. */
		raiseTurnMain(getSTOP());
	}
	
	/* Entry action for state 'Turn'. */
	private void entryAction_main_region_Init_Init_process_Turning_distant_Turn() {
		/* Entry action for state 'Turn'. */
		if (!(operationCallback.hasMainSignal())) {
			raiseTurnDistant(getSTOP());
		}
		if (operationCallback.hasMainSignal()) {
			raiseTurnDistant(getOFF());
		}
	}
	
	/* Entry action for state 'Turn'. */
	private void entryAction_main_region_Init_Init_process_Turning_shunt_Turn() {
		/* Entry action for state 'Turn'. */
		if (!(operationCallback.isMainAndShunt())) {
			raiseTurnShunt(getSTOP());
		}
		if (operationCallback.isMainAndShunt()) {
			raiseCompletedShunt();
		}
	}
	
	/* Entry action for state 'Operating'. */
	private void entryAction_main_region_Operating() {
		/* Entry action for state 'Operating'. */
		raiseStarted();
	}
	
	/* Entry action for state 'Unlocked'. */
	private void entryAction_main_region_Operating_Processing_Unlocked() {
		/* Entry action for state 'Unlocked'. */
		operationCallback.lock(false);
	}
	
	/* Entry action for state 'Shunting State'. */
	private void entryAction_main_region_Operating_Processing_Shunting_State() {
		/* Entry action for state 'Shunting State'. */
		operationCallback.lock(true);
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting() {
		/* Entry action for state 'Waiting'. */
		timerService.setTimer(this, 1, getTimeout(), false);
		operationCallback.inc();
	}
	
	/* Entry action for state 'Extend'. */
	private void entryAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Extend() {
		/* Entry action for state 'Extend'. */
		raiseTurnShunt(getSymbol());
	}
	
	/* Entry action for state 'Stop'. */
	private void entryAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Stop() {
		/* Entry action for state 'Stop'. */
		raiseTurnShunt(getSymbol());
	}
	
	/* Entry action for state 'Tour State'. */
	private void entryAction_main_region_Operating_Processing_Tour_State() {
		/* Entry action for state 'Tour State'. */
		operationCallback.lock(true);
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting() {
		/* Entry action for state 'Waiting'. */
		timerService.setTimer(this, 2, getTimeout(), false);
		operationCallback.inc();
	}
	
	/* Entry action for state 'Stop Main'. */
	private void entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main() {
		/* Entry action for state 'Stop Main'. */
		raiseTurnMain(getSymbol());
	}
	
	/* Entry action for state 'Stop Distant'. */
	private void entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant() {
		/* Entry action for state 'Stop Distant'. */
		raiseTurnDistant(getSTOP());
	}
	
	/* Entry action for state 'Off Distant'. */
	private void entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Off_Distant() {
		/* Entry action for state 'Off Distant'. */
		raiseTurnDistant(getOFF());
	}
	
	/* Entry action for state 'Delay'. */
	private void entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay() {
		/* Entry action for state 'Delay'. */
		timerService.setTimer(this, 3, getDelay(), false);
	}
	
	/* Entry action for state 'Stop Shunt'. */
	private void entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt() {
		/* Entry action for state 'Stop Shunt'. */
		raiseTurnShunt(getSymbol());
	}
	
	/* Entry action for state 'Extend'. */
	private void entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Extend() {
		/* Entry action for state 'Extend'. */
		raiseTurnDistant(getSymbol());
	}
	
	/* Entry action for state 'Pending'. */
	private void entryAction_main_region_Operating_Processing_Pending() {
		/* Entry action for state 'Pending'. */
		timerService.setTimer(this, 4, getTimeout(), false);
		operationCallback.inc();
		operationCallback.pending();
	}
	
	/* Entry action for state 'Go Main'. */
	private void entryAction_main_region_Operating_Processing_Pending_Pending_Go_Main() {
		/* Entry action for state 'Go Main'. */
		raiseTurnMain(getSymbol());
	}
	
	/* Entry action for state 'Go Distant'. */
	private void entryAction_main_region_Operating_Processing_Pending_Pending_Go_Distant() {
		/* Entry action for state 'Go Distant'. */
		raiseTurnDistant(getSymbol());
	}
	
	/* Entry action for state 'Go Shunt'. */
	private void entryAction_main_region_Operating_Processing_Pending_Pending_Go_Shunt() {
		/* Entry action for state 'Go Shunt'. */
		raiseTurnShunt(getSymbol());
	}
	
	/* Entry action for state 'Failed'. */
	private void entryAction_main_region_Failed() {
		/* Entry action for state 'Failed'. */
		operationCallback.fail();
	}
	
	/* Exit action for state 'Init'. */
	private void exitAction_main_region_Init() {
		/* Exit action for state 'Init'. */
		timerService.unsetTimer(this, 0);
		operationCallback.dec();
	}
	
	/* Exit action for state 'Waiting'. */
	private void exitAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting() {
		/* Exit action for state 'Waiting'. */
		timerService.unsetTimer(this, 1);
		operationCallback.dec();
	}
	
	/* Exit action for state 'Waiting'. */
	private void exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting() {
		/* Exit action for state 'Waiting'. */
		timerService.unsetTimer(this, 2);
		operationCallback.dec();
	}
	
	/* Exit action for state 'Delay'. */
	private void exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay() {
		/* Exit action for state 'Delay'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Pending'. */
	private void exitAction_main_region_Operating_Processing_Pending() {
		/* Exit action for state 'Pending'. */
		timerService.unsetTimer(this, 4);
		operationCallback.dec();
	}
	
	/* Exit action for state 'Failed'. */
	private void exitAction_main_region_Failed() {
		/* Exit action for state 'Failed'. */
		raiseCleared();
	}
	
	/* 'default' enter sequence for state Wait for Start */
	private void enterSequence_main_region_Wait_for_Start_default() {
		/* 'default' enter sequence for state Wait for Start */
		stateVector[0] = State.MAIN_REGION_WAIT_FOR_START;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Init_default() {
		/* 'default' enter sequence for state Init */
		entryAction_main_region_Init();
		enterSequence_main_region_Init_Init_process_default();
	}
	
	/* 'default' enter sequence for state Turn */
	private void enterSequence_main_region_Init_Init_process_Turning_main_Turn_default() {
		/* 'default' enter sequence for state Turn */
		entryAction_main_region_Init_Init_process_Turning_main_Turn();
		stateVector[0] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_TURN;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Completed */
	private void enterSequence_main_region_Init_Init_process_Turning_main_Completed_default() {
		/* 'default' enter sequence for state Completed */
		stateVector[0] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Turn */
	private void enterSequence_main_region_Init_Init_process_Turning_distant_Turn_default() {
		/* 'default' enter sequence for state Turn */
		entryAction_main_region_Init_Init_process_Turning_distant_Turn();
		stateVector[1] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_TURN;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Completed */
	private void enterSequence_main_region_Init_Init_process_Turning_distant_Completed_default() {
		/* 'default' enter sequence for state Completed */
		stateVector[1] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_COMPLETED;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Turn */
	private void enterSequence_main_region_Init_Init_process_Turning_shunt_Turn_default() {
		/* 'default' enter sequence for state Turn */
		entryAction_main_region_Init_Init_process_Turning_shunt_Turn();
		stateVector[2] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_TURN;
		stateConfVectorPosition = 2;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Completed */
	private void enterSequence_main_region_Init_Init_process_Turning_shunt_Completed_default() {
		/* 'default' enter sequence for state Completed */
		stateVector[2] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED;
		stateConfVectorPosition = 2;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Operating */
	private void enterSequence_main_region_Operating_default() {
		/* 'default' enter sequence for state Operating */
		entryAction_main_region_Operating();
		enterSequence_main_region_Operating_Processing_default();
	}
	
	/* 'default' enter sequence for state Unlocked */
	private void enterSequence_main_region_Operating_Processing_Unlocked_default() {
		/* 'default' enter sequence for state Unlocked */
		entryAction_main_region_Operating_Processing_Unlocked();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_UNLOCKED;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_main_region_Operating_Processing_Shunting_State_Processing_Idle_default() {
		/* 'default' enter sequence for state Idle */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_IDLE;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Extend */
	private void enterSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Extend_default() {
		/* 'default' enter sequence for state Extend */
		entryAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Extend();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_EXTEND;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Stop */
	private void enterSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Stop_default() {
		/* 'default' enter sequence for state Stop */
		entryAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Stop();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'SignalController.main_region.Operating.Processing.Tour_State.Processing.Waiting' enter sequence for state Waiting */
	private void enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_SignalController_main_region_Operating_Processing_Tour_State_Processing_Waiting() {
		/* 'SignalController.main_region.Operating.Processing.Tour_State.Processing.Waiting' enter sequence for state Waiting */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Stop Main */
	private void enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main_default() {
		/* 'default' enter sequence for state Stop Main */
		entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_MAIN;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Stop Distant */
	private void enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant_default() {
		/* 'default' enter sequence for state Stop Distant */
		entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_DISTANT;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Off Distant */
	private void enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Off_Distant_default() {
		/* 'default' enter sequence for state Off Distant */
		entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Off_Distant();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_OFF_DISTANT;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Delay */
	private void enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay_default() {
		/* 'default' enter sequence for state Delay */
		entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_DELAY;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Stop Shunt */
	private void enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt_default() {
		/* 'default' enter sequence for state Stop Shunt */
		entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_SHUNT;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Extend */
	private void enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Extend_default() {
		/* 'default' enter sequence for state Extend */
		entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Extend();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_main_region_Operating_Processing_Tour_State_Processing_Idle_default() {
		/* 'default' enter sequence for state Idle */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_IDLE;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'SignalController.main_region.Operating.Processing.Pending' enter sequence for state Pending */
	private void enterSequence_main_region_Operating_Processing_Pending_SignalController_main_region_Operating_Processing_Pending() {
		/* 'SignalController.main_region.Operating.Processing.Pending' enter sequence for state Pending */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_PENDING;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Go Main */
	private void enterSequence_main_region_Operating_Processing_Pending_Pending_Go_Main_default() {
		/* 'default' enter sequence for state Go Main */
		entryAction_main_region_Operating_Processing_Pending_Pending_Go_Main();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_MAIN;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Go Distant */
	private void enterSequence_main_region_Operating_Processing_Pending_Pending_Go_Distant_default() {
		/* 'default' enter sequence for state Go Distant */
		entryAction_main_region_Operating_Processing_Pending_Pending_Go_Distant();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_DISTANT;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Go Shunt */
	private void enterSequence_main_region_Operating_Processing_Pending_Pending_Go_Shunt_default() {
		/* 'default' enter sequence for state Go Shunt */
		entryAction_main_region_Operating_Processing_Pending_Pending_Go_Shunt();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Failed */
	private void enterSequence_main_region_Failed_default() {
		/* 'default' enter sequence for state Failed */
		entryAction_main_region_Failed();
		stateVector[0] = State.MAIN_REGION_FAILED;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Init process */
	private void enterSequence_main_region_Init_Init_process_default() {
		/* 'default' enter sequence for region Init process */
		react_main_region_Init_Init_process__entry_Default();
	}
	
	/* 'default' enter sequence for region Processing */
	private void enterSequence_main_region_Operating_Processing_default() {
		/* 'default' enter sequence for region Processing */
		react_main_region_Operating_Processing__entry_Default();
	}
	
	/* Default exit sequence for state Wait for Start */
	private void exitSequence_main_region_Wait_for_Start() {
		/* Default exit sequence for state Wait for Start */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Init() {
		/* Default exit sequence for state Init */
		exitSequence_main_region_Init_Init_process();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		exitAction_main_region_Init();
	}
	
	/* Default exit sequence for state Turning */
	private void exitSequence_main_region_Init_Init_process_Turning() {
		/* Default exit sequence for state Turning */
		exitSequence_main_region_Init_Init_process_Turning_main();
		exitSequence_main_region_Init_Init_process_Turning_distant();
		exitSequence_main_region_Init_Init_process_Turning_shunt();
		stateVector[0] = State.MAIN_REGION_INIT;
		stateVector[1] = State.MAIN_REGION_INIT;
		stateVector[2] = State.MAIN_REGION_INIT;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state Turn */
	private void exitSequence_main_region_Init_Init_process_Turning_main_Turn() {
		/* Default exit sequence for state Turn */
		stateVector[0] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Completed */
	private void exitSequence_main_region_Init_Init_process_Turning_main_Completed() {
		/* Default exit sequence for state Completed */
		stateVector[0] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Turn */
	private void exitSequence_main_region_Init_Init_process_Turning_distant_Turn() {
		/* Default exit sequence for state Turn */
		stateVector[1] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Completed */
	private void exitSequence_main_region_Init_Init_process_Turning_distant_Completed() {
		/* Default exit sequence for state Completed */
		stateVector[1] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Turn */
	private void exitSequence_main_region_Init_Init_process_Turning_shunt_Turn() {
		/* Default exit sequence for state Turn */
		stateVector[2] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state Completed */
	private void exitSequence_main_region_Init_Init_process_Turning_shunt_Completed() {
		/* Default exit sequence for state Completed */
		stateVector[2] = State.MAIN_REGION_INIT_INIT_PROCESS_TURNING;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state Operating */
	private void exitSequence_main_region_Operating() {
		/* Default exit sequence for state Operating */
		exitSequence_main_region_Operating_Processing();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Unlocked */
	private void exitSequence_main_region_Operating_Processing_Unlocked() {
		/* Default exit sequence for state Unlocked */
		stateVector[0] = State.MAIN_REGION_OPERATING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Shunting State */
	private void exitSequence_main_region_Operating_Processing_Shunting_State() {
		/* Default exit sequence for state Shunting State */
		exitSequence_main_region_Operating_Processing_Shunting_State_Processing();
		stateVector[0] = State.MAIN_REGION_OPERATING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Idle() {
		/* Default exit sequence for state Idle */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting() {
		/* Default exit sequence for state Waiting */
		exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE;
		stateConfVectorPosition = 0;
		exitAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
	}
	
	/* Default exit sequence for state Extend */
	private void exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Extend() {
		/* Default exit sequence for state Extend */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Stop */
	private void exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Stop() {
		/* Default exit sequence for state Stop */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Tour State */
	private void exitSequence_main_region_Operating_Processing_Tour_State() {
		/* Default exit sequence for state Tour State */
		exitSequence_main_region_Operating_Processing_Tour_State_Processing();
		stateVector[0] = State.MAIN_REGION_OPERATING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting() {
		/* Default exit sequence for state Waiting */
		exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE;
		stateConfVectorPosition = 0;
		exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
	}
	
	/* Default exit sequence for state Stop Main */
	private void exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main() {
		/* Default exit sequence for state Stop Main */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Stop Distant */
	private void exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant() {
		/* Default exit sequence for state Stop Distant */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Off Distant */
	private void exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Off_Distant() {
		/* Default exit sequence for state Off Distant */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Delay */
	private void exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay() {
		/* Default exit sequence for state Delay */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING;
		stateConfVectorPosition = 0;
		exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay();
	}
	
	/* Default exit sequence for state Stop Shunt */
	private void exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt() {
		/* Default exit sequence for state Stop Shunt */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Extend */
	private void exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Extend() {
		/* Default exit sequence for state Extend */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_main_region_Operating_Processing_Tour_State_Processing_Idle() {
		/* Default exit sequence for state Idle */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Pending */
	private void exitSequence_main_region_Operating_Processing_Pending() {
		/* Default exit sequence for state Pending */
		exitSequence_main_region_Operating_Processing_Pending_Pending();
		stateVector[0] = State.MAIN_REGION_OPERATING;
		stateConfVectorPosition = 0;
		exitAction_main_region_Operating_Processing_Pending();
	}
	
	/* Default exit sequence for state Go Main */
	private void exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Main() {
		/* Default exit sequence for state Go Main */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_PENDING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Go Distant */
	private void exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Distant() {
		/* Default exit sequence for state Go Distant */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_PENDING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Go Shunt */
	private void exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Shunt() {
		/* Default exit sequence for state Go Shunt */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_PENDING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Failed */
	private void exitSequence_main_region_Failed() {
		/* Default exit sequence for state Failed */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_main_region_Failed();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_WAIT_FOR_START:
			exitSequence_main_region_Wait_for_Start();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_TURN:
			exitSequence_main_region_Init_Init_process_Turning_main_Turn();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED:
			exitSequence_main_region_Init_Init_process_Turning_main_Completed();
			break;
		case MAIN_REGION_OPERATING:
			exitSequence_main_region_Operating();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_UNLOCKED:
			exitSequence_main_region_Operating_Processing_Unlocked();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE:
			exitSequence_main_region_Operating_Processing_Shunting_State();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_IDLE:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Idle();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_EXTEND:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Extend();
			exitAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Stop();
			exitAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE:
			exitSequence_main_region_Operating_Processing_Tour_State();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_MAIN:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_DISTANT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_OFF_DISTANT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Off_Distant();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_DELAY:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_SHUNT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Extend();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_IDLE:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Idle();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING:
			exitSequence_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_MAIN:
			exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Main();
			exitAction_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_DISTANT:
			exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Distant();
			exitAction_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT:
			exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Shunt();
			exitAction_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_FAILED:
			exitSequence_main_region_Failed();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_TURN:
			exitSequence_main_region_Init_Init_process_Turning_distant_Turn();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_COMPLETED:
			exitSequence_main_region_Init_Init_process_Turning_distant_Completed();
			break;
		default:
			break;
		}
		switch (stateVector[2]) {
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_TURN:
			exitSequence_main_region_Init_Init_process_Turning_shunt_Turn();
			exitAction_main_region_Init();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED:
			exitSequence_main_region_Init_Init_process_Turning_shunt_Completed();
			exitAction_main_region_Init();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Init process */
	private void exitSequence_main_region_Init_Init_process() {
		/* Default exit sequence for region Init process */
		switch (stateVector[0]) {
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_TURN:
			exitSequence_main_region_Init_Init_process_Turning_main_Turn();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED:
			exitSequence_main_region_Init_Init_process_Turning_main_Completed();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_TURN:
			exitSequence_main_region_Init_Init_process_Turning_distant_Turn();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_COMPLETED:
			exitSequence_main_region_Init_Init_process_Turning_distant_Completed();
			break;
		default:
			break;
		}
		switch (stateVector[2]) {
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_TURN:
			exitSequence_main_region_Init_Init_process_Turning_shunt_Turn();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED:
			exitSequence_main_region_Init_Init_process_Turning_shunt_Completed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main_region_Init_Init_process_Turning_main() {
		/* Default exit sequence for region main */
		switch (stateVector[0]) {
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_TURN:
			exitSequence_main_region_Init_Init_process_Turning_main_Turn();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED:
			exitSequence_main_region_Init_Init_process_Turning_main_Completed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region distant */
	private void exitSequence_main_region_Init_Init_process_Turning_distant() {
		/* Default exit sequence for region distant */
		switch (stateVector[1]) {
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_TURN:
			exitSequence_main_region_Init_Init_process_Turning_distant_Turn();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_COMPLETED:
			exitSequence_main_region_Init_Init_process_Turning_distant_Completed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region shunt */
	private void exitSequence_main_region_Init_Init_process_Turning_shunt() {
		/* Default exit sequence for region shunt */
		switch (stateVector[2]) {
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_TURN:
			exitSequence_main_region_Init_Init_process_Turning_shunt_Turn();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED:
			exitSequence_main_region_Init_Init_process_Turning_shunt_Completed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Processing */
	private void exitSequence_main_region_Operating_Processing() {
		/* Default exit sequence for region Processing */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_PROCESSING_UNLOCKED:
			exitSequence_main_region_Operating_Processing_Unlocked();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE:
			exitSequence_main_region_Operating_Processing_Shunting_State();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_IDLE:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Idle();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_EXTEND:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Extend();
			exitAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Stop();
			exitAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE:
			exitSequence_main_region_Operating_Processing_Tour_State();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_MAIN:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_DISTANT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_OFF_DISTANT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Off_Distant();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_DELAY:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_SHUNT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Extend();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_IDLE:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Idle();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING:
			exitSequence_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_MAIN:
			exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Main();
			exitAction_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_DISTANT:
			exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Distant();
			exitAction_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT:
			exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Shunt();
			exitAction_main_region_Operating_Processing_Pending();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Processing */
	private void exitSequence_main_region_Operating_Processing_Shunting_State_Processing() {
		/* Default exit sequence for region Processing */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_IDLE:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Idle();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_EXTEND:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Extend();
			exitAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Stop();
			exitAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Shunt waiting */
	private void exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting() {
		/* Default exit sequence for region Shunt waiting */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_EXTEND:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Extend();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_SHUNTING_STATE_PROCESSING_WAITING_SHUNT_WAITING_STOP:
			exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Stop();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Processing */
	private void exitSequence_main_region_Operating_Processing_Tour_State_Processing() {
		/* Default exit sequence for region Processing */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_MAIN:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_DISTANT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_OFF_DISTANT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Off_Distant();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_DELAY:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_SHUNT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Extend();
			exitAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_IDLE:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Idle();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Tour waiting */
	private void exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting() {
		/* Default exit sequence for region Tour waiting */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_MAIN:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_DISTANT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_OFF_DISTANT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Off_Distant();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_DELAY:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_STOP_SHUNT:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_TOUR_STATE_PROCESSING_WAITING_TOUR_WAITING_EXTEND:
			exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Extend();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Pending */
	private void exitSequence_main_region_Operating_Processing_Pending_Pending() {
		/* Default exit sequence for region Pending */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_MAIN:
			exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Main();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_DISTANT:
			exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Distant();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_PENDING_GO_SHUNT:
			exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Shunt();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting__choice_0() {
		/* The reactions of state null. */
		if (operationCallback.isMainAndShunt()) {
			enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main_default();
		} else {
			enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting__choice_1() {
		/* The reactions of state null. */
		if ((operationCallback.hasMainSignal() && operationCallback.isLightSignal())) {
			enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay_default();
		} else {
			exitSequence_main_region_Operating_Processing_Tour_State();
			operationCallback.dec();
			enterSequence_main_region_Operating_Processing_Unlocked_default();
			main_region_Operating_react(0l);
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Operating_Processing_Pending_Pending__choice_0() {
		/* The reactions of state null. */
		if ((operationCallback.isMainAndShunt() && operationCallback.isTour())) {
			enterSequence_main_region_Operating_Processing_Pending_Pending_Go_Main_default();
		} else {
			enterSequence_main_region_Operating_Processing_Pending_Pending_Go_Shunt_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Operating_Processing_Pending_Pending__choice_1() {
		/* The reactions of state null. */
		if (operationCallback.isTour()) {
			enterSequence_main_region_Operating_Processing_Pending_Pending_Go_Main_default();
		} else {
			exitSequence_main_region_Operating_Processing_Pending();
			entryAction_main_region_Operating_Processing_Shunting_State();
			enterSequence_main_region_Operating_Processing_Shunting_State_Processing_Idle_default();
			main_region_Operating_react(0l);
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Wait_for_Start_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Init_Init_process__entry_Default() {
		/* Default react sequence for initial entry  */
		react_main_region_Init_Init_process__sync0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Operating_Processing__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Operating_Processing_Unlocked_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Init_Init_process__sync0() {
		/* The reactions of state null. */
		entryAction_main_region_Init_Init_process_Turning();
		enterSequence_main_region_Init_Init_process_Turning_main_Turn_default();
		enterSequence_main_region_Init_Init_process_Turning_distant_Turn_default();
		enterSequence_main_region_Init_Init_process_Turning_shunt_Turn_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Init_Init_process__sync1() {
		/* The reactions of state null. */
		exitSequence_main_region_Init();
		enterSequence_main_region_Operating_default();
	}
	
	private long main_region_Wait_for_Start_react(long transitioned_before) {
		/* The reactions of state Wait for Start. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (start) {
				exitSequence_main_region_Wait_for_Start();
				enterSequence_main_region_Init_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Init_react(long transitioned_before) {
		/* The reactions of state Init. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (failed) {
				exitSequence_main_region_Init();
				enterSequence_main_region_Failed_default();
				transitioned_after = 2l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Init();
					timeEvents[0] = false;
					enterSequence_main_region_Failed_default();
					transitioned_after = 2l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Init_Init_process_Turning_react(long transitioned_before) {
		/* The reactions of state Turning. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Init_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Init_Init_process_Turning_main_Turn_react(long transitioned_before) {
		/* The reactions of state Turn. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completedMain) {
				exitSequence_main_region_Init_Init_process_Turning_main_Turn();
				enterSequence_main_region_Init_Init_process_Turning_main_Completed_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Init_Init_process_Turning_main_Completed_react(long transitioned_before) {
		/* The reactions of state Completed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if ((isStateActive(State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_COMPLETED) && isStateActive(State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED))) {
				exitSequence_main_region_Init_Init_process_Turning();
				react_main_region_Init_Init_process__sync1();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Init_Init_process_Turning_distant_Turn_react(long transitioned_before) {
		/* The reactions of state Turn. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (completedDistant) {
				exitSequence_main_region_Init_Init_process_Turning_distant_Turn();
				enterSequence_main_region_Init_Init_process_Turning_distant_Completed_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Init_Init_process_Turning_distant_Completed_react(long transitioned_before) {
		/* The reactions of state Completed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if ((isStateActive(State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED) && isStateActive(State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_SHUNT_COMPLETED))) {
				exitSequence_main_region_Init_Init_process_Turning();
				react_main_region_Init_Init_process__sync1();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Init_Init_process_Turning_shunt_Turn_react(long transitioned_before) {
		/* The reactions of state Turn. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (completedShunt) {
				exitSequence_main_region_Init_Init_process_Turning_shunt_Turn();
				enterSequence_main_region_Init_Init_process_Turning_shunt_Completed_default();
				main_region_Init_Init_process_Turning_react(0l);
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Init_Init_process_Turning_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Init_Init_process_Turning_shunt_Completed_react(long transitioned_before) {
		/* The reactions of state Completed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if ((isStateActive(State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_MAIN_COMPLETED) && isStateActive(State.MAIN_REGION_INIT_INIT_PROCESS_TURNING_DISTANT_COMPLETED))) {
				exitSequence_main_region_Init_Init_process_Turning();
				react_main_region_Init_Init_process__sync1();
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Init_Init_process_Turning_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_react(long transitioned_before) {
		/* The reactions of state Operating. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (failed) {
				exitSequence_main_region_Operating();
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			} else {
				if (start) {
					exitSequence_main_region_Operating();
					enterSequence_main_region_Init_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Unlocked_react(long transitioned_before) {
		/* The reactions of state Unlocked. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((enable) && (getSymbol()==getGO()))) {
				exitSequence_main_region_Operating_Processing_Unlocked();
				enterSequence_main_region_Operating_Processing_Pending_SignalController_main_region_Operating_Processing_Pending();
				entryAction_main_region_Operating_Processing_Pending();
				react_main_region_Operating_Processing_Pending_Pending__choice_0();
				main_region_Operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Shunting_State_react(long transitioned_before) {
		/* The reactions of state Shunting State. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Operating_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Shunting_State_Processing_Idle_react(long transitioned_before) {
		/* The reactions of state Idle. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (disable) {
				exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Idle();
				setSymbol(sTOP);
				entryAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
				enterSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Stop_default();
				main_region_Operating_Processing_Shunting_State_react(0l);
				transitioned_after = 0l;
			} else {
				if (extend) {
					exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Idle();
					entryAction_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
					enterSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Extend_default();
					main_region_Operating_Processing_Shunting_State_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Shunting_State_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Shunting_State_Processing_Waiting_react(long transitioned_before) {
		/* The reactions of state Waiting. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Operating();
				timeEvents[1] = false;
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Shunting_State_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Extend_react(long transitioned_before) {
		/* The reactions of state Extend. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completedShunt) {
				exitSequence_main_region_Operating_Processing_Shunting_State_Processing_Waiting();
				enterSequence_main_region_Operating_Processing_Shunting_State_Processing_Idle_default();
				main_region_Operating_Processing_Shunting_State_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Shunting_State_Processing_Waiting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Shunting_State_Processing_Waiting_Shunt_waiting_Stop_react(long transitioned_before) {
		/* The reactions of state Stop. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completedShunt) {
				exitSequence_main_region_Operating_Processing_Shunting_State();
				enterSequence_main_region_Operating_Processing_Unlocked_default();
				main_region_Operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Shunting_State_Processing_Waiting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Tour_State_react(long transitioned_before) {
		/* The reactions of state Tour State. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Operating_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Tour_State_Processing_Waiting_react(long transitioned_before) {
		/* The reactions of state Waiting. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_main_region_Operating();
				timeEvents[2] = false;
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Tour_State_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main_react(long transitioned_before) {
		/* The reactions of state Stop Main. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completedMain) {
				exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main();
				enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant_default();
				main_region_Operating_Processing_Tour_State_Processing_Waiting_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Tour_State_Processing_Waiting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant_react(long transitioned_before) {
		/* The reactions of state Stop Distant. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completedDistant) {
				exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Distant();
				react_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting__choice_1();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Tour_State_Processing_Waiting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Off_Distant_react(long transitioned_before) {
		/* The reactions of state Off Distant. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completedDistant) {
				exitSequence_main_region_Operating_Processing_Tour_State();
				enterSequence_main_region_Operating_Processing_Unlocked_default();
				main_region_Operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Tour_State_Processing_Waiting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay_react(long transitioned_before) {
		/* The reactions of state Delay. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[3]) {
				exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Delay();
				timeEvents[3] = false;
				enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Off_Distant_default();
				main_region_Operating_Processing_Tour_State_Processing_Waiting_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Tour_State_Processing_Waiting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt_react(long transitioned_before) {
		/* The reactions of state Stop Shunt. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completedShunt) {
				exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Shunt();
				enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Stop_Main_default();
				main_region_Operating_Processing_Tour_State_Processing_Waiting_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Tour_State_Processing_Waiting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Extend_react(long transitioned_before) {
		/* The reactions of state Extend. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completedDistant) {
				exitSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting();
				enterSequence_main_region_Operating_Processing_Tour_State_Processing_Idle_default();
				main_region_Operating_Processing_Tour_State_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Tour_State_Processing_Waiting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Tour_State_Processing_Idle_react(long transitioned_before) {
		/* The reactions of state Idle. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (disable) {
				exitSequence_main_region_Operating_Processing_Tour_State_Processing_Idle();
				setSymbol(sTOP);
				enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_SignalController_main_region_Operating_Processing_Tour_State_Processing_Waiting();
				entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
				react_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting__choice_0();
				main_region_Operating_Processing_Tour_State_react(0l);
				transitioned_after = 0l;
			} else {
				if (extend) {
					exitSequence_main_region_Operating_Processing_Tour_State_Processing_Idle();
					entryAction_main_region_Operating_Processing_Tour_State_Processing_Waiting();
					enterSequence_main_region_Operating_Processing_Tour_State_Processing_Waiting_Tour_waiting_Extend_default();
					main_region_Operating_Processing_Tour_State_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Tour_State_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Pending_react(long transitioned_before) {
		/* The reactions of state Pending. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[4]) {
				exitSequence_main_region_Operating();
				timeEvents[4] = false;
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Pending_Pending_Go_Main_react(long transitioned_before) {
		/* The reactions of state Go Main. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completedMain) {
				exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Main();
				enterSequence_main_region_Operating_Processing_Pending_Pending_Go_Distant_default();
				main_region_Operating_Processing_Pending_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Pending_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Pending_Pending_Go_Distant_react(long transitioned_before) {
		/* The reactions of state Go Distant. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completedDistant) {
				exitSequence_main_region_Operating_Processing_Pending();
				entryAction_main_region_Operating_Processing_Tour_State();
				enterSequence_main_region_Operating_Processing_Tour_State_Processing_Idle_default();
				main_region_Operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Pending_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Pending_Pending_Go_Shunt_react(long transitioned_before) {
		/* The reactions of state Go Shunt. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completedShunt) {
				exitSequence_main_region_Operating_Processing_Pending_Pending_Go_Shunt();
				react_main_region_Operating_Processing_Pending_Pending__choice_1();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Pending_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Failed_react(long transitioned_before) {
		/* The reactions of state Failed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (clear) {
				exitSequence_main_region_Failed();
				enterSequence_main_region_Wait_for_Start_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
