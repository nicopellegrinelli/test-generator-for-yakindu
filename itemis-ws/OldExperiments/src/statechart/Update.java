/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Update implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_PING,
		MAIN_REGION_RESET,
		MAIN_REGION_FLASH_REQUEST,
		MAIN_REGION_FLASH_COMPLETE_PAGE,
		MAIN_REGION_FLASH_REST,
		MAIN_REGION_FLASH_CHECK,
		MAIN_REGION_WAIT_BOOTLOADER,
		MAIN_REGION_FAILED,
		MAIN_REGION_BOOTED,
		MAIN_REGION_WAIT_FOR_CONNECT,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[8];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Update() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Update */
		setCount(0l);
		setError(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Update */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Update */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		connected = false;
		complete = false;
		failed = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_PING:
			main_region_Ping_react(-1l);
			break;
		case MAIN_REGION_RESET:
			main_region_Reset_react(-1l);
			break;
		case MAIN_REGION_FLASH_REQUEST:
			main_region_Flash_Request_react(-1l);
			break;
		case MAIN_REGION_FLASH_COMPLETE_PAGE:
			main_region_Flash_Complete_Page_react(-1l);
			break;
		case MAIN_REGION_FLASH_REST:
			main_region_Flash_Rest_react(-1l);
			break;
		case MAIN_REGION_FLASH_CHECK:
			main_region_Flash_Check_react(-1l);
			break;
		case MAIN_REGION_WAIT_BOOTLOADER:
			main_region_Wait_Bootloader_react(-1l);
			break;
		case MAIN_REGION_FAILED:
			break;
		case MAIN_REGION_BOOTED:
			break;
		case MAIN_REGION_WAIT_FOR_CONNECT:
			main_region_Wait_for_Connect_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_PING:
			return stateVector[0] == State.MAIN_REGION_PING;
		case MAIN_REGION_RESET:
			return stateVector[0] == State.MAIN_REGION_RESET;
		case MAIN_REGION_FLASH_REQUEST:
			return stateVector[0] == State.MAIN_REGION_FLASH_REQUEST;
		case MAIN_REGION_FLASH_COMPLETE_PAGE:
			return stateVector[0] == State.MAIN_REGION_FLASH_COMPLETE_PAGE;
		case MAIN_REGION_FLASH_REST:
			return stateVector[0] == State.MAIN_REGION_FLASH_REST;
		case MAIN_REGION_FLASH_CHECK:
			return stateVector[0] == State.MAIN_REGION_FLASH_CHECK;
		case MAIN_REGION_WAIT_BOOTLOADER:
			return stateVector[0] == State.MAIN_REGION_WAIT_BOOTLOADER;
		case MAIN_REGION_FAILED:
			return stateVector[0] == State.MAIN_REGION_FAILED;
		case MAIN_REGION_BOOTED:
			return stateVector[0] == State.MAIN_REGION_BOOTED;
		case MAIN_REGION_WAIT_FOR_CONNECT:
			return stateVector[0] == State.MAIN_REGION_WAIT_FOR_CONNECT;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	public interface OperationCallback {
	
		public void init(long count);
		
		public void ping();
		
		public void boot();
		
		public void flashRequest();
		
		public void flashCompletePage();
		
		public void flashRestPage();
		
		public void flashCheck();
		
		public void quit();
		
		public void fail(long code);
		
		public boolean hasController();
		
		public boolean hasPages();
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean connected;
	
	
	public void raiseConnected() {
		inEventQueue.add(() -> {
			connected = true;
		});
		runCycle();
	}
	
	private boolean complete;
	
	
	public void raiseComplete() {
		inEventQueue.add(() -> {
			complete = true;
		});
		runCycle();
	}
	
	private boolean failed;
	
	
	public void raiseFailed() {
		inEventQueue.add(() -> {
			failed = true;
		});
		runCycle();
	}
	
	public static final long timeout = 250l;
	
	public long getTimeout() {
		return timeout;
	}
	
	public static final long delay_boot = 3000l;
	
	public long getDelay_boot() {
		return delay_boot;
	}
	
	public static final long delay_reset = 1200l;
	
	public long getDelay_reset() {
		return delay_reset;
	}
	
	public static final long delay_flash_request = 200l;
	
	public long getDelay_flash_request() {
		return delay_flash_request;
	}
	
	public static final long delay_flash_page = 60l;
	
	public long getDelay_flash_page() {
		return delay_flash_page;
	}
	
	private long count;
	
	public long getCount() {
		return count;
	}
	
	protected void setCount(long value) {
		this.count = value;
	}
	
	private long error;
	
	public long getError() {
		return error;
	}
	
	protected void setError(long value) {
		this.error = value;
	}
	
	public static final long retry = 10l;
	
	public long getRetry() {
		return retry;
	}
	
	/* Entry action for state 'Ping'. */
	private void entryAction_main_region_Ping() {
		/* Entry action for state 'Ping'. */
		timerService.setTimer(this, 0, getTimeout(), false);
		operationCallback.ping();
	}
	
	/* Entry action for state 'Reset'. */
	private void entryAction_main_region_Reset() {
		/* Entry action for state 'Reset'. */
		timerService.setTimer(this, 1, getDelay_boot(), false);
		operationCallback.init(1l);
		operationCallback.boot();
	}
	
	/* Entry action for state 'Flash Request'. */
	private void entryAction_main_region_Flash_Request() {
		/* Entry action for state 'Flash Request'. */
		timerService.setTimer(this, 2, getDelay_flash_request(), false);
		operationCallback.init(1l);
		operationCallback.flashRequest();
	}
	
	/* Entry action for state 'Flash Complete Page'. */
	private void entryAction_main_region_Flash_Complete_Page() {
		/* Entry action for state 'Flash Complete Page'. */
		timerService.setTimer(this, 3, getDelay_flash_page(), false);
		operationCallback.flashCompletePage();
	}
	
	/* Entry action for state 'Flash Rest'. */
	private void entryAction_main_region_Flash_Rest() {
		/* Entry action for state 'Flash Rest'. */
		timerService.setTimer(this, 4, getDelay_flash_page(), false);
		operationCallback.flashRestPage();
	}
	
	/* Entry action for state 'Flash Check'. */
	private void entryAction_main_region_Flash_Check() {
		/* Entry action for state 'Flash Check'. */
		timerService.setTimer(this, 5, getDelay_boot(), false);
		operationCallback.init(3l);
		operationCallback.flashCheck();
	}
	
	/* Entry action for state 'Wait Bootloader'. */
	private void entryAction_main_region_Wait_Bootloader() {
		/* Entry action for state 'Wait Bootloader'. */
		timerService.setTimer(this, 6, getDelay_reset(), false);
		setCount(0l);
	}
	
	/* Entry action for state 'Failed'. */
	private void entryAction_main_region_Failed() {
		/* Entry action for state 'Failed'. */
		operationCallback.fail(getError());
	}
	
	/* Entry action for state 'Booted'. */
	private void entryAction_main_region_Booted() {
		/* Entry action for state 'Booted'. */
		operationCallback.quit();
	}
	
	/* Entry action for state 'Wait for Connect'. */
	private void entryAction_main_region_Wait_for_Connect() {
		/* Entry action for state 'Wait for Connect'. */
		timerService.setTimer(this, 7, getTimeout(), false);
	}
	
	/* Exit action for state 'Ping'. */
	private void exitAction_main_region_Ping() {
		/* Exit action for state 'Ping'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Reset'. */
	private void exitAction_main_region_Reset() {
		/* Exit action for state 'Reset'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Flash Request'. */
	private void exitAction_main_region_Flash_Request() {
		/* Exit action for state 'Flash Request'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Flash Complete Page'. */
	private void exitAction_main_region_Flash_Complete_Page() {
		/* Exit action for state 'Flash Complete Page'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Flash Rest'. */
	private void exitAction_main_region_Flash_Rest() {
		/* Exit action for state 'Flash Rest'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Flash Check'. */
	private void exitAction_main_region_Flash_Check() {
		/* Exit action for state 'Flash Check'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Wait Bootloader'. */
	private void exitAction_main_region_Wait_Bootloader() {
		/* Exit action for state 'Wait Bootloader'. */
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'Wait for Connect'. */
	private void exitAction_main_region_Wait_for_Connect() {
		/* Exit action for state 'Wait for Connect'. */
		timerService.unsetTimer(this, 7);
	}
	
	/* 'default' enter sequence for state Ping */
	private void enterSequence_main_region_Ping_default() {
		/* 'default' enter sequence for state Ping */
		entryAction_main_region_Ping();
		stateVector[0] = State.MAIN_REGION_PING;
	}
	
	/* 'default' enter sequence for state Reset */
	private void enterSequence_main_region_Reset_default() {
		/* 'default' enter sequence for state Reset */
		entryAction_main_region_Reset();
		stateVector[0] = State.MAIN_REGION_RESET;
	}
	
	/* 'default' enter sequence for state Flash Request */
	private void enterSequence_main_region_Flash_Request_default() {
		/* 'default' enter sequence for state Flash Request */
		entryAction_main_region_Flash_Request();
		stateVector[0] = State.MAIN_REGION_FLASH_REQUEST;
	}
	
	/* 'default' enter sequence for state Flash Complete Page */
	private void enterSequence_main_region_Flash_Complete_Page_default() {
		/* 'default' enter sequence for state Flash Complete Page */
		entryAction_main_region_Flash_Complete_Page();
		stateVector[0] = State.MAIN_REGION_FLASH_COMPLETE_PAGE;
	}
	
	/* 'default' enter sequence for state Flash Rest */
	private void enterSequence_main_region_Flash_Rest_default() {
		/* 'default' enter sequence for state Flash Rest */
		entryAction_main_region_Flash_Rest();
		stateVector[0] = State.MAIN_REGION_FLASH_REST;
	}
	
	/* 'default' enter sequence for state Flash Check */
	private void enterSequence_main_region_Flash_Check_default() {
		/* 'default' enter sequence for state Flash Check */
		entryAction_main_region_Flash_Check();
		stateVector[0] = State.MAIN_REGION_FLASH_CHECK;
	}
	
	/* 'default' enter sequence for state Wait Bootloader */
	private void enterSequence_main_region_Wait_Bootloader_default() {
		/* 'default' enter sequence for state Wait Bootloader */
		entryAction_main_region_Wait_Bootloader();
		stateVector[0] = State.MAIN_REGION_WAIT_BOOTLOADER;
	}
	
	/* 'default' enter sequence for state Failed */
	private void enterSequence_main_region_Failed_default() {
		/* 'default' enter sequence for state Failed */
		entryAction_main_region_Failed();
		stateVector[0] = State.MAIN_REGION_FAILED;
	}
	
	/* 'default' enter sequence for state Booted */
	private void enterSequence_main_region_Booted_default() {
		/* 'default' enter sequence for state Booted */
		entryAction_main_region_Booted();
		stateVector[0] = State.MAIN_REGION_BOOTED;
	}
	
	/* 'default' enter sequence for state Wait for Connect */
	private void enterSequence_main_region_Wait_for_Connect_default() {
		/* 'default' enter sequence for state Wait for Connect */
		entryAction_main_region_Wait_for_Connect();
		stateVector[0] = State.MAIN_REGION_WAIT_FOR_CONNECT;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Ping */
	private void exitSequence_main_region_Ping() {
		/* Default exit sequence for state Ping */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Ping();
	}
	
	/* Default exit sequence for state Reset */
	private void exitSequence_main_region_Reset() {
		/* Default exit sequence for state Reset */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Reset();
	}
	
	/* Default exit sequence for state Flash Request */
	private void exitSequence_main_region_Flash_Request() {
		/* Default exit sequence for state Flash Request */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Flash_Request();
	}
	
	/* Default exit sequence for state Flash Complete Page */
	private void exitSequence_main_region_Flash_Complete_Page() {
		/* Default exit sequence for state Flash Complete Page */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Flash_Complete_Page();
	}
	
	/* Default exit sequence for state Flash Rest */
	private void exitSequence_main_region_Flash_Rest() {
		/* Default exit sequence for state Flash Rest */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Flash_Rest();
	}
	
	/* Default exit sequence for state Flash Check */
	private void exitSequence_main_region_Flash_Check() {
		/* Default exit sequence for state Flash Check */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Flash_Check();
	}
	
	/* Default exit sequence for state Wait Bootloader */
	private void exitSequence_main_region_Wait_Bootloader() {
		/* Default exit sequence for state Wait Bootloader */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Wait_Bootloader();
	}
	
	/* Default exit sequence for state Failed */
	private void exitSequence_main_region_Failed() {
		/* Default exit sequence for state Failed */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Booted */
	private void exitSequence_main_region_Booted() {
		/* Default exit sequence for state Booted */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Wait for Connect */
	private void exitSequence_main_region_Wait_for_Connect() {
		/* Default exit sequence for state Wait for Connect */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Wait_for_Connect();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_PING:
			exitSequence_main_region_Ping();
			break;
		case MAIN_REGION_RESET:
			exitSequence_main_region_Reset();
			break;
		case MAIN_REGION_FLASH_REQUEST:
			exitSequence_main_region_Flash_Request();
			break;
		case MAIN_REGION_FLASH_COMPLETE_PAGE:
			exitSequence_main_region_Flash_Complete_Page();
			break;
		case MAIN_REGION_FLASH_REST:
			exitSequence_main_region_Flash_Rest();
			break;
		case MAIN_REGION_FLASH_CHECK:
			exitSequence_main_region_Flash_Check();
			break;
		case MAIN_REGION_WAIT_BOOTLOADER:
			exitSequence_main_region_Wait_Bootloader();
			break;
		case MAIN_REGION_FAILED:
			exitSequence_main_region_Failed();
			break;
		case MAIN_REGION_BOOTED:
			exitSequence_main_region_Booted();
			break;
		case MAIN_REGION_WAIT_FOR_CONNECT:
			exitSequence_main_region_Wait_for_Connect();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		/* The reactions of state null. */
		if (getCount()<getRetry()) {
			count++;
			enterSequence_main_region_Flash_Request_default();
		} else {
			setError(6l);
			enterSequence_main_region_Failed_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_1() {
		/* The reactions of state null. */
		if (operationCallback.hasPages()) {
			enterSequence_main_region_Flash_Complete_Page_default();
		} else {
			enterSequence_main_region_Flash_Rest_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_2() {
		/* The reactions of state null. */
		if (operationCallback.hasController()) {
			enterSequence_main_region_Reset_default();
		} else {
			setError(1l);
			enterSequence_main_region_Failed_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Wait_for_Connect_default();
	}
	
	private long main_region_Ping_react(long transitioned_before) {
		/* The reactions of state Ping. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_Ping();
				timeEvents[0] = false;
				react_main_region__choice_2();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Reset_react(long transitioned_before) {
		/* The reactions of state Reset. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Reset();
				setError(2l);
				timeEvents[1] = false;
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			} else {
				if (complete) {
					exitSequence_main_region_Reset();
					enterSequence_main_region_Wait_Bootloader_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Flash_Request_react(long transitioned_before) {
		/* The reactions of state Flash Request. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_main_region_Flash_Request();
				timeEvents[2] = false;
				react_main_region__choice_0();
				transitioned_after = 0l;
			} else {
				if (complete) {
					exitSequence_main_region_Flash_Request();
					react_main_region__choice_1();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Flash_Complete_Page_react(long transitioned_before) {
		/* The reactions of state Flash Complete Page. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[3]) {
				exitSequence_main_region_Flash_Complete_Page();
				timeEvents[3] = false;
				react_main_region__choice_1();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Flash_Rest_react(long transitioned_before) {
		/* The reactions of state Flash Rest. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[4]) {
				exitSequence_main_region_Flash_Rest();
				timeEvents[4] = false;
				enterSequence_main_region_Flash_Check_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Flash_Check_react(long transitioned_before) {
		/* The reactions of state Flash Check. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (failed) {
				exitSequence_main_region_Flash_Check();
				setError(3l);
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[5]) {
					exitSequence_main_region_Flash_Check();
					setError(4l);
					timeEvents[5] = false;
					enterSequence_main_region_Failed_default();
					transitioned_after = 0l;
				} else {
					if (complete) {
						exitSequence_main_region_Flash_Check();
						enterSequence_main_region_Booted_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Wait_Bootloader_react(long transitioned_before) {
		/* The reactions of state Wait Bootloader. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[6]) {
				exitSequence_main_region_Wait_Bootloader();
				timeEvents[6] = false;
				enterSequence_main_region_Flash_Request_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Wait_for_Connect_react(long transitioned_before) {
		/* The reactions of state Wait for Connect. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (connected) {
				exitSequence_main_region_Wait_for_Connect();
				enterSequence_main_region_Ping_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[7]) {
					exitSequence_main_region_Wait_for_Connect();
					setError(7l);
					timeEvents[7] = false;
					enterSequence_main_region_Failed_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
