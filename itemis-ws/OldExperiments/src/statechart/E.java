/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class E implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_ORTHOGONALSTATE,
		MAIN_REGION_ORTHOGONALSTATE_R1_STATEA,
		MAIN_REGION_ORTHOGONALSTATE_R2_STATEB,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean z;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public E() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		/* Default init sequence for statechart E */
		setV(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart E */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart E */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		timeEvents[0] = false;
	}
	
	private void clearInternalEvents() {
		z = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_ORTHOGONALSTATE_R1_STATEA:
			transitioned = main_region_OrthogonalState_r1_StateA_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_ORTHOGONALSTATE_R2_STATEB:
				main_region_OrthogonalState_r2_StateB_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			clearInternalEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return true;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_ORTHOGONALSTATE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_ORTHOGONALSTATE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_ORTHOGONALSTATE_R2_STATEB.ordinal();
		case MAIN_REGION_ORTHOGONALSTATE_R1_STATEA:
			return stateVector[0] == State.MAIN_REGION_ORTHOGONALSTATE_R1_STATEA;
		case MAIN_REGION_ORTHOGONALSTATE_R2_STATEB:
			return stateVector[1] == State.MAIN_REGION_ORTHOGONALSTATE_R2_STATEB;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	protected void raiseZ() {
		internalEventQueue.add(() -> {
			z = true;
		});
	}
	
	private boolean x;
	
	
	protected void raiseX() {
		x = true;
		xObservable.next(null);
	}
	
	private Observable<Void> xObservable = new Observable<Void>();
	
	public Observable<Void> getX() {
		return xObservable;
	}
	
	private boolean y;
	
	
	protected void raiseY() {
		y = true;
		yObservable.next(null);
	}
	
	private Observable<Void> yObservable = new Observable<Void>();
	
	public Observable<Void> getY() {
		return yObservable;
	}
	
	private long v;
	
	public long getV() {
		return v;
	}
	
	public void setV(long value) {
		this.v = value;
	}
	
	/* Entry action for state 'StateB'. */
	private void entryAction_main_region_OrthogonalState_r2_StateB() {
		/* Entry action for state 'StateB'. */
		timerService.setTimer(this, 0, (1l * 1000l), false);
	}
	
	/* Exit action for state 'StateB'. */
	private void exitAction_main_region_OrthogonalState_r2_StateB() {
		/* Exit action for state 'StateB'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state OrthogonalState */
	private void enterSequence_main_region_OrthogonalState_default() {
		/* 'default' enter sequence for state OrthogonalState */
		enterSequence_main_region_OrthogonalState_r1_default();
		enterSequence_main_region_OrthogonalState_r2_default();
	}
	
	/* 'default' enter sequence for state StateA */
	private void enterSequence_main_region_OrthogonalState_r1_StateA_default() {
		/* 'default' enter sequence for state StateA */
		stateVector[0] = State.MAIN_REGION_ORTHOGONALSTATE_R1_STATEA;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state StateB */
	private void enterSequence_main_region_OrthogonalState_r2_StateB_default() {
		/* 'default' enter sequence for state StateB */
		entryAction_main_region_OrthogonalState_r2_StateB();
		stateVector[1] = State.MAIN_REGION_ORTHOGONALSTATE_R2_STATEB;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_OrthogonalState_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_OrthogonalState_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_OrthogonalState_r2_default() {
		/* 'default' enter sequence for region r2 */
		react_main_region_OrthogonalState_r2__entry_Default();
	}
	
	/* Default exit sequence for state StateA */
	private void exitSequence_main_region_OrthogonalState_r1_StateA() {
		/* Default exit sequence for state StateA */
		stateVector[0] = State.MAIN_REGION_ORTHOGONALSTATE;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state StateB */
	private void exitSequence_main_region_OrthogonalState_r2_StateB() {
		/* Default exit sequence for state StateB */
		stateVector[1] = State.MAIN_REGION_ORTHOGONALSTATE;
		stateConfVectorPosition = 1;
		exitAction_main_region_OrthogonalState_r2_StateB();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_ORTHOGONALSTATE_R1_STATEA:
			exitSequence_main_region_OrthogonalState_r1_StateA();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_ORTHOGONALSTATE_R2_STATEB:
			exitSequence_main_region_OrthogonalState_r2_StateB();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_OrthogonalState_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_OrthogonalState_r1_StateA_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_OrthogonalState_r2__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_OrthogonalState_r2_StateB_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_OrthogonalState_default();
	}
	
	private long main_region_OrthogonalState_r1_StateA_react(long transitioned_before) {
		/* The reactions of state StateA. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getV()==0l) {
				exitSequence_main_region_OrthogonalState_r1_StateA();
				raiseX();
				raiseZ();
				enterSequence_main_region_OrthogonalState_r1_StateA_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_OrthogonalState_r2_StateB_react(long transitioned_before) {
		/* The reactions of state StateB. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[0]) {
				exitSequence_main_region_OrthogonalState_r2_StateB();
				raiseY();
				timeEvents[0] = false;
				enterSequence_main_region_OrthogonalState_r2_StateB_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
