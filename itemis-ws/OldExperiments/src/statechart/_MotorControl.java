/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class _MotorControl implements IEventDriven {
	public enum State {
		MOTORCONTROL_MOTORCONTROL,
		MOTORCONTROL_MOTORCONTROL_R1_BREAKING,
		MOTORCONTROL_MOTORCONTROL_R1_ACCELERATING,
		MOTORCONTROL_MOTORCONTROL_R1_CRUISING,
		MOTORCONTROL_MOTORCONTROL_R2_DEFAULT,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public _MotorControl() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart _MotorControl */
		setTargetSpeed(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart _MotorControl */
		enterSequence_MotorControl_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart _MotorControl */
		exitSequence_MotorControl();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		setTargetSpeed = false;
		setActualSpeed = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MOTORCONTROL_MOTORCONTROL_R1_BREAKING:
			transitioned = motorControl_MotorControl_r1_breaking_react(transitioned);
			break;
		case MOTORCONTROL_MOTORCONTROL_R1_ACCELERATING:
			transitioned = motorControl_MotorControl_r1_accelerating_react(transitioned);
			break;
		case MOTORCONTROL_MOTORCONTROL_R1_CRUISING:
			transitioned = motorControl_MotorControl_r1_cruising_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MOTORCONTROL_MOTORCONTROL_R2_DEFAULT:
				motorControl_MotorControl_r2_Default_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MOTORCONTROL_MOTORCONTROL:
			return stateVector[0].ordinal() >= State.
					MOTORCONTROL_MOTORCONTROL.ordinal()&& stateVector[0].ordinal() <= State.MOTORCONTROL_MOTORCONTROL_R2_DEFAULT.ordinal();
		case MOTORCONTROL_MOTORCONTROL_R1_BREAKING:
			return stateVector[0] == State.MOTORCONTROL_MOTORCONTROL_R1_BREAKING;
		case MOTORCONTROL_MOTORCONTROL_R1_ACCELERATING:
			return stateVector[0] == State.MOTORCONTROL_MOTORCONTROL_R1_ACCELERATING;
		case MOTORCONTROL_MOTORCONTROL_R1_CRUISING:
			return stateVector[0] == State.MOTORCONTROL_MOTORCONTROL_R1_CRUISING;
		case MOTORCONTROL_MOTORCONTROL_R2_DEFAULT:
			return stateVector[1] == State.MOTORCONTROL_MOTORCONTROL_R2_DEFAULT;
		default:
			return false;
		}
	}
	
	
	private boolean setTargetSpeed;
	
	private double setTargetSpeedValue;
	
	
	public void raiseSetTargetSpeed(final double value) {
		inEventQueue.add(() -> {
			setTargetSpeedValue = value;
			setTargetSpeed = true;
		});
		runCycle();
	}
	protected double getSetTargetSpeedValue() {
		if (! setTargetSpeed ) 
			throw new IllegalStateException("Illegal event value access. Event SetTargetSpeed is not raised!");
		return setTargetSpeedValue;
	}
	
	private boolean setActualSpeed;
	
	private double setActualSpeedValue;
	
	
	public void raiseSetActualSpeed(final double value) {
		inEventQueue.add(() -> {
			setActualSpeedValue = value;
			setActualSpeed = true;
		});
		runCycle();
	}
	protected double getSetActualSpeedValue() {
		if (! setActualSpeed ) 
			throw new IllegalStateException("Illegal event value access. Event SetActualSpeed is not raised!");
		return setActualSpeedValue;
	}
	
	private boolean setAcceleration;
	
	private double setAccelerationValue;
	
	
	protected void raiseSetAcceleration(double value) {
		setAccelerationValue = value;
		setAcceleration = true;
		setAccelerationObservable.next(value);
	}
	
	private Observable<Double> setAccelerationObservable = new Observable<Double>();
	
	public Observable<Double> getSetAcceleration() {
		return setAccelerationObservable;
	}
	
	private double targetSpeed;
	
	public double getTargetSpeed() {
		return targetSpeed;
	}
	
	public void setTargetSpeed(double value) {
		this.targetSpeed = value;
	}
	
	/* Entry action for state 'breaking'. */
	private void entryAction_MotorControl_MotorControl_r1_breaking() {
		/* Entry action for state 'breaking'. */
		raiseSetAcceleration(-(10l));
	}
	
	/* Entry action for state 'accelerating'. */
	private void entryAction_MotorControl_MotorControl_r1_accelerating() {
		/* Entry action for state 'accelerating'. */
		raiseSetAcceleration(10l);
	}
	
	/* Entry action for state 'cruising'. */
	private void entryAction_MotorControl_MotorControl_r1_cruising() {
		/* Entry action for state 'cruising'. */
		raiseSetAcceleration(0l);
	}
	
	/* 'default' enter sequence for state MotorControl */
	private void enterSequence_MotorControl_MotorControl_default() {
		/* 'default' enter sequence for state MotorControl */
		enterSequence_MotorControl_MotorControl_r1_default();
		enterSequence_MotorControl_MotorControl_r2_default();
	}
	
	/* 'default' enter sequence for state breaking */
	private void enterSequence_MotorControl_MotorControl_r1_breaking_default() {
		/* 'default' enter sequence for state breaking */
		entryAction_MotorControl_MotorControl_r1_breaking();
		stateVector[0] = State.MOTORCONTROL_MOTORCONTROL_R1_BREAKING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state accelerating */
	private void enterSequence_MotorControl_MotorControl_r1_accelerating_default() {
		/* 'default' enter sequence for state accelerating */
		entryAction_MotorControl_MotorControl_r1_accelerating();
		stateVector[0] = State.MOTORCONTROL_MOTORCONTROL_R1_ACCELERATING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state cruising */
	private void enterSequence_MotorControl_MotorControl_r1_cruising_default() {
		/* 'default' enter sequence for state cruising */
		entryAction_MotorControl_MotorControl_r1_cruising();
		stateVector[0] = State.MOTORCONTROL_MOTORCONTROL_R1_CRUISING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Default */
	private void enterSequence_MotorControl_MotorControl_r2_Default_default() {
		/* 'default' enter sequence for state Default */
		stateVector[1] = State.MOTORCONTROL_MOTORCONTROL_R2_DEFAULT;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region MotorControl */
	private void enterSequence_MotorControl_default() {
		/* 'default' enter sequence for region MotorControl */
		react_MotorControl__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_MotorControl_MotorControl_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_MotorControl_MotorControl_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_MotorControl_MotorControl_r2_default() {
		/* 'default' enter sequence for region r2 */
		react_MotorControl_MotorControl_r2__entry_Default();
	}
	
	/* Default exit sequence for state breaking */
	private void exitSequence_MotorControl_MotorControl_r1_breaking() {
		/* Default exit sequence for state breaking */
		stateVector[0] = State.MOTORCONTROL_MOTORCONTROL;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state accelerating */
	private void exitSequence_MotorControl_MotorControl_r1_accelerating() {
		/* Default exit sequence for state accelerating */
		stateVector[0] = State.MOTORCONTROL_MOTORCONTROL;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state cruising */
	private void exitSequence_MotorControl_MotorControl_r1_cruising() {
		/* Default exit sequence for state cruising */
		stateVector[0] = State.MOTORCONTROL_MOTORCONTROL;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Default */
	private void exitSequence_MotorControl_MotorControl_r2_Default() {
		/* Default exit sequence for state Default */
		stateVector[1] = State.MOTORCONTROL_MOTORCONTROL;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for region MotorControl */
	private void exitSequence_MotorControl() {
		/* Default exit sequence for region MotorControl */
		switch (stateVector[0]) {
		case MOTORCONTROL_MOTORCONTROL_R1_BREAKING:
			exitSequence_MotorControl_MotorControl_r1_breaking();
			break;
		case MOTORCONTROL_MOTORCONTROL_R1_ACCELERATING:
			exitSequence_MotorControl_MotorControl_r1_accelerating();
			break;
		case MOTORCONTROL_MOTORCONTROL_R1_CRUISING:
			exitSequence_MotorControl_MotorControl_r1_cruising();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MOTORCONTROL_MOTORCONTROL_R2_DEFAULT:
			exitSequence_MotorControl_MotorControl_r2_Default();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_MotorControl__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_MotorControl_MotorControl_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_MotorControl_MotorControl_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_MotorControl_MotorControl_r1_cruising_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_MotorControl_MotorControl_r2__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_MotorControl_MotorControl_r2_Default_default();
	}
	
	private long motorControl_MotorControl_r1_breaking_react(long transitioned_before) {
		/* The reactions of state breaking. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((setActualSpeed) && (getSetActualSpeedValue()<=getTargetSpeed()))) {
				exitSequence_MotorControl_MotorControl_r1_breaking();
				enterSequence_MotorControl_MotorControl_r1_cruising_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long motorControl_MotorControl_r1_accelerating_react(long transitioned_before) {
		/* The reactions of state accelerating. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((setActualSpeed) && (getSetActualSpeedValue()>=getTargetSpeed()))) {
				exitSequence_MotorControl_MotorControl_r1_accelerating();
				enterSequence_MotorControl_MotorControl_r1_cruising_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long motorControl_MotorControl_r1_cruising_react(long transitioned_before) {
		/* The reactions of state cruising. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((setActualSpeed) && (getSetActualSpeedValue()<=(getTargetSpeed() - 0.5)))) {
				exitSequence_MotorControl_MotorControl_r1_cruising();
				enterSequence_MotorControl_MotorControl_r1_accelerating_default();
				transitioned_after = 0l;
			} else {
				if (((setActualSpeed) && (getSetActualSpeedValue()>=(getTargetSpeed() + 0.5)))) {
					exitSequence_MotorControl_MotorControl_r1_cruising();
					enterSequence_MotorControl_MotorControl_r1_breaking_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long motorControl_MotorControl_r2_Default_react(long transitioned_before) {
		/* The reactions of state Default. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (setTargetSpeed) {
				exitSequence_MotorControl_MotorControl_r2_Default();
				setTargetSpeed(getSetTargetSpeedValue());
				enterSequence_MotorControl_MotorControl_r2_Default_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
