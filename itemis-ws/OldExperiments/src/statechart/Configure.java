/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Configure implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_WAIT_FOR_CONNECT,
		MAIN_REGION_CONFIGURE,
		MAIN_REGION_WAIT_FOR_BOOT,
		MAIN_REGION_FAILED,
		MAIN_REGION_BOOTED,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private long written;
	
	protected long getWritten() {
		return written;
	}
	
	protected void setWritten(long value) {
		this.written = value;
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Configure() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Configure */
		setIdx(0l);
		setMax(0l);
		setWritten(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Configure */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Configure */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		connected = false;
		completed = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_WAIT_FOR_CONNECT:
			main_region_Wait_for_Connect_react(-1l);
			break;
		case MAIN_REGION_CONFIGURE:
			main_region_Configure_react(-1l);
			break;
		case MAIN_REGION_WAIT_FOR_BOOT:
			main_region_Wait_for_Boot_react(-1l);
			break;
		case MAIN_REGION_FAILED:
			break;
		case MAIN_REGION_BOOTED:
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_WAIT_FOR_CONNECT:
			return stateVector[0] == State.MAIN_REGION_WAIT_FOR_CONNECT;
		case MAIN_REGION_CONFIGURE:
			return stateVector[0] == State.MAIN_REGION_CONFIGURE;
		case MAIN_REGION_WAIT_FOR_BOOT:
			return stateVector[0] == State.MAIN_REGION_WAIT_FOR_BOOT;
		case MAIN_REGION_FAILED:
			return stateVector[0] == State.MAIN_REGION_FAILED;
		case MAIN_REGION_BOOTED:
			return stateVector[0] == State.MAIN_REGION_BOOTED;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	public interface OperationCallback {
	
		public long configure(long idx);
		
		public boolean hasMore(long idx);
		
		public void booting();
		
		public void quit();
		
		public void fail();
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean connected;
	
	
	public void raiseConnected() {
		inEventQueue.add(() -> {
			connected = true;
		});
		runCycle();
	}
	
	private boolean completed;
	
	
	public void raiseCompleted() {
		inEventQueue.add(() -> {
			completed = true;
		});
		runCycle();
	}
	
	public static final long timeout = 1000l;
	
	public long getTimeout() {
		return timeout;
	}
	
	public static final long writetime = 50l;
	
	public long getWritetime() {
		return writetime;
	}
	
	public static final long flashtime = 200l;
	
	public long getFlashtime() {
		return flashtime;
	}
	
	public static final long resettime = 3500l;
	
	public long getResettime() {
		return resettime;
	}
	
	private long idx;
	
	public long getIdx() {
		return idx;
	}
	
	protected void setIdx(long value) {
		this.idx = value;
	}
	
	private long max;
	
	public long getMax() {
		return max;
	}
	
	protected void setMax(long value) {
		this.max = value;
	}
	
	/* Entry action for state 'Wait for Connect'. */
	private void entryAction_main_region_Wait_for_Connect() {
		/* Entry action for state 'Wait for Connect'. */
		timerService.setTimer(this, 0, getTimeout(), false);
		setIdx(0l);
		setMax(0l);
	}
	
	/* Entry action for state 'Configure'. */
	private void entryAction_main_region_Configure() {
		/* Entry action for state 'Configure'. */
		timerService.setTimer(this, 1, getWritetime(), false);
		setWritten(operationCallback.configure(idx));
		setMax(written>max ? written : max);
	}
	
	/* Entry action for state 'Wait for Boot'. */
	private void entryAction_main_region_Wait_for_Boot() {
		/* Entry action for state 'Wait for Boot'. */
		timerService.setTimer(this, 2, ((getFlashtime() * getMax()) + getResettime()), false);
		operationCallback.booting();
	}
	
	/* Entry action for state 'Failed'. */
	private void entryAction_main_region_Failed() {
		/* Entry action for state 'Failed'. */
		operationCallback.fail();
	}
	
	/* Entry action for state 'Booted'. */
	private void entryAction_main_region_Booted() {
		/* Entry action for state 'Booted'. */
		operationCallback.quit();
	}
	
	/* Exit action for state 'Wait for Connect'. */
	private void exitAction_main_region_Wait_for_Connect() {
		/* Exit action for state 'Wait for Connect'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Configure'. */
	private void exitAction_main_region_Configure() {
		/* Exit action for state 'Configure'. */
		timerService.unsetTimer(this, 1);
		idx++;
	}
	
	/* Exit action for state 'Wait for Boot'. */
	private void exitAction_main_region_Wait_for_Boot() {
		/* Exit action for state 'Wait for Boot'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* 'default' enter sequence for state Wait for Connect */
	private void enterSequence_main_region_Wait_for_Connect_default() {
		/* 'default' enter sequence for state Wait for Connect */
		entryAction_main_region_Wait_for_Connect();
		stateVector[0] = State.MAIN_REGION_WAIT_FOR_CONNECT;
	}
	
	/* 'default' enter sequence for state Configure */
	private void enterSequence_main_region_Configure_default() {
		/* 'default' enter sequence for state Configure */
		entryAction_main_region_Configure();
		stateVector[0] = State.MAIN_REGION_CONFIGURE;
	}
	
	/* 'default' enter sequence for state Wait for Boot */
	private void enterSequence_main_region_Wait_for_Boot_default() {
		/* 'default' enter sequence for state Wait for Boot */
		entryAction_main_region_Wait_for_Boot();
		stateVector[0] = State.MAIN_REGION_WAIT_FOR_BOOT;
	}
	
	/* 'default' enter sequence for state Failed */
	private void enterSequence_main_region_Failed_default() {
		/* 'default' enter sequence for state Failed */
		entryAction_main_region_Failed();
		stateVector[0] = State.MAIN_REGION_FAILED;
	}
	
	/* 'default' enter sequence for state Booted */
	private void enterSequence_main_region_Booted_default() {
		/* 'default' enter sequence for state Booted */
		entryAction_main_region_Booted();
		stateVector[0] = State.MAIN_REGION_BOOTED;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Wait for Connect */
	private void exitSequence_main_region_Wait_for_Connect() {
		/* Default exit sequence for state Wait for Connect */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Wait_for_Connect();
	}
	
	/* Default exit sequence for state Configure */
	private void exitSequence_main_region_Configure() {
		/* Default exit sequence for state Configure */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Configure();
	}
	
	/* Default exit sequence for state Wait for Boot */
	private void exitSequence_main_region_Wait_for_Boot() {
		/* Default exit sequence for state Wait for Boot */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Wait_for_Boot();
	}
	
	/* Default exit sequence for state Failed */
	private void exitSequence_main_region_Failed() {
		/* Default exit sequence for state Failed */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Booted */
	private void exitSequence_main_region_Booted() {
		/* Default exit sequence for state Booted */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_WAIT_FOR_CONNECT:
			exitSequence_main_region_Wait_for_Connect();
			break;
		case MAIN_REGION_CONFIGURE:
			exitSequence_main_region_Configure();
			break;
		case MAIN_REGION_WAIT_FOR_BOOT:
			exitSequence_main_region_Wait_for_Boot();
			break;
		case MAIN_REGION_FAILED:
			exitSequence_main_region_Failed();
			break;
		case MAIN_REGION_BOOTED:
			exitSequence_main_region_Booted();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		/* The reactions of state null. */
		if (operationCallback.hasMore(getIdx())) {
			enterSequence_main_region_Configure_default();
		} else {
			enterSequence_main_region_Wait_for_Boot_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Wait_for_Connect_default();
	}
	
	private long main_region_Wait_for_Connect_react(long transitioned_before) {
		/* The reactions of state Wait for Connect. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (connected) {
				exitSequence_main_region_Wait_for_Connect();
				react_main_region__choice_0();
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Wait_for_Connect();
					timeEvents[0] = false;
					enterSequence_main_region_Failed_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Configure_react(long transitioned_before) {
		/* The reactions of state Configure. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Configure();
				timeEvents[1] = false;
				react_main_region__choice_0();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Wait_for_Boot_react(long transitioned_before) {
		/* The reactions of state Wait for Boot. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_main_region_Wait_for_Boot();
				timeEvents[2] = false;
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			} else {
				if (completed) {
					exitSequence_main_region_Wait_for_Boot();
					enterSequence_main_region_Booted_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
