/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class Statechart7 implements ITimed, IEventDriven {
	public static class Motor {
		private boolean oN;
		
		
		protected void raiseON() {
			oN = true;
			oNObservable.next(null);
		}
		
		private Observable<Void> oNObservable = new Observable<Void>();
		
		public Observable<Void> getON() {
			return oNObservable;
		}
		
		private boolean oFF;
		
		
		protected void raiseOFF() {
			oFF = true;
			oFFObservable.next(null);
		}
		
		private Observable<Void> oFFObservable = new Observable<Void>();
		
		public Observable<Void> getOFF() {
			return oFFObservable;
		}
		
	}
	
	public static class Valve {
		private boolean oPEN;
		
		
		protected void raiseOPEN() {
			oPEN = true;
			oPENObservable.next(null);
		}
		
		private Observable<Void> oPENObservable = new Observable<Void>();
		
		public Observable<Void> getOPEN() {
			return oPENObservable;
		}
		
		private boolean cLOSE;
		
		
		protected void raiseCLOSE() {
			cLOSE = true;
			cLOSEObservable.next(null);
		}
		
		private Observable<Void> cLOSEObservable = new Observable<Void>();
		
		public Observable<Void> getCLOSE() {
			return cLOSEObservable;
		}
		
	}
	
	public static class ButtonMotor {
		private Statechart7 parent;
		
		public ButtonMotor(Statechart7 parent) {
			this.parent = parent;
		}
		private boolean oN;
		
		
		public void raiseON() {
			parent.inEventQueue.add(() -> {
				oN = true;
			});
			parent.runCycle();
		}
		
		private boolean oFF;
		
		
		public void raiseOFF() {
			parent.inEventQueue.add(() -> {
				oFF = true;
			});
			parent.runCycle();
		}
		
	}
	
	public static class ButtonValve {
		private Statechart7 parent;
		
		public ButtonValve(Statechart7 parent) {
			this.parent = parent;
		}
		private boolean oN;
		
		
		public void raiseON() {
			parent.inEventQueue.add(() -> {
				oN = true;
			});
			parent.runCycle();
		}
		
		private boolean oFF;
		
		
		public void raiseOFF() {
			parent.inEventQueue.add(() -> {
				oFF = true;
			});
			parent.runCycle();
		}
		
	}
	
	public static class ButtonCancel {
		private Statechart7 parent;
		
		public ButtonCancel(Statechart7 parent) {
			this.parent = parent;
		}
		private boolean oN;
		
		
		public void raiseON() {
			parent.inEventQueue.add(() -> {
				oN = true;
			});
			parent.runCycle();
		}
		
		private boolean oFF;
		
		
		public void raiseOFF() {
			parent.inEventQueue.add(() -> {
				oFF = true;
			});
			parent.runCycle();
		}
		
	}
	
	protected Motor motor;
	
	protected Valve valve;
	
	protected ButtonMotor buttonMotor;
	
	protected ButtonValve buttonValve;
	
	protected ButtonCancel buttonCancel;
	
	public enum State {
		MAIN_REGION_DECISIONACTIVATE,
		MAIN_REGION_STATEMOTORON,
		MAIN_REGION_DECISIONVALVE,
		MAIN_REGION_DECISIONMOTOR,
		MAIN_REGION_DECISIONTIMEOPEN,
		MAIN_REGION_STATEVALVEON1,
		MAIN_REGION_STATEVALVEON2,
		MAIN_REGION_STATEVALVEON3,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[7];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Statechart7() {
		motor = new Motor();
		valve = new Valve();
		buttonMotor = new ButtonMotor(this);
		buttonValve = new ButtonValve(this);
		buttonCancel = new ButtonCancel(this);
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Statechart7 */
		setActivate(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Statechart7 */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Statechart7 */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		buttonMotor.oN = false;
		buttonMotor.oFF = false;
		buttonValve.oN = false;
		buttonValve.oFF = false;
		buttonCancel.oN = false;
		buttonCancel.oFF = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_DECISIONACTIVATE:
			main_region_DecisionActivate_react(-1l);
			break;
		case MAIN_REGION_STATEMOTORON:
			main_region_StateMotorOn_react(-1l);
			break;
		case MAIN_REGION_DECISIONVALVE:
			main_region_DecisionValve_react(-1l);
			break;
		case MAIN_REGION_DECISIONMOTOR:
			main_region_DecisionMotor_react(-1l);
			break;
		case MAIN_REGION_DECISIONTIMEOPEN:
			main_region_DecisionTimeOpen_react(-1l);
			break;
		case MAIN_REGION_STATEVALVEON1:
			main_region_StateValveOn1_react(-1l);
			break;
		case MAIN_REGION_STATEVALVEON2:
			main_region_StateValveOn2_react(-1l);
			break;
		case MAIN_REGION_STATEVALVEON3:
			main_region_StateValveOn3_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_DECISIONACTIVATE:
			return stateVector[0] == State.MAIN_REGION_DECISIONACTIVATE;
		case MAIN_REGION_STATEMOTORON:
			return stateVector[0] == State.MAIN_REGION_STATEMOTORON;
		case MAIN_REGION_DECISIONVALVE:
			return stateVector[0] == State.MAIN_REGION_DECISIONVALVE;
		case MAIN_REGION_DECISIONMOTOR:
			return stateVector[0] == State.MAIN_REGION_DECISIONMOTOR;
		case MAIN_REGION_DECISIONTIMEOPEN:
			return stateVector[0] == State.MAIN_REGION_DECISIONTIMEOPEN;
		case MAIN_REGION_STATEVALVEON1:
			return stateVector[0] == State.MAIN_REGION_STATEVALVEON1;
		case MAIN_REGION_STATEVALVEON2:
			return stateVector[0] == State.MAIN_REGION_STATEVALVEON2;
		case MAIN_REGION_STATEVALVEON3:
			return stateVector[0] == State.MAIN_REGION_STATEVALVEON3;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Motor motor() {
		return motor;
	}
	
	public Valve valve() {
		return valve;
	}
	
	public ButtonMotor buttonMotor() {
		return buttonMotor;
	}
	
	public ButtonValve buttonValve() {
		return buttonValve;
	}
	
	public ButtonCancel buttonCancel() {
		return buttonCancel;
	}
	
	
	private long activate;
	
	public long getActivate() {
		return activate;
	}
	
	public void setActivate(long value) {
		this.activate = value;
	}
	
	/* Entry action for state 'DecisionActivate'. */
	private void entryAction_main_region_DecisionActivate() {
		/* Entry action for state 'DecisionActivate'. */
		motor.raiseOFF();
		valve.raiseCLOSE();
	}
	
	/* Entry action for state 'StateMotorOn'. */
	private void entryAction_main_region_StateMotorOn() {
		/* Entry action for state 'StateMotorOn'. */
		timerService.setTimer(this, 0, 200l, false);
		motor.raiseON();
	}
	
	/* Entry action for state 'DecisionValve'. */
	private void entryAction_main_region_DecisionValve() {
		/* Entry action for state 'DecisionValve'. */
		timerService.setTimer(this, 1, (3l * 1000l), false);
	}
	
	/* Entry action for state 'DecisionMotor'. */
	private void entryAction_main_region_DecisionMotor() {
		/* Entry action for state 'DecisionMotor'. */
		timerService.setTimer(this, 2, (3l * 1000l), false);
	}
	
	/* Entry action for state 'DecisionTimeOpen'. */
	private void entryAction_main_region_DecisionTimeOpen() {
		/* Entry action for state 'DecisionTimeOpen'. */
		timerService.setTimer(this, 3, 0l, false);
		activate++;
	}
	
	/* Entry action for state 'StateValveOn1'. */
	private void entryAction_main_region_StateValveOn1() {
		/* Entry action for state 'StateValveOn1'. */
		timerService.setTimer(this, 4, (20l * 1000l), false);
		valve.raiseOPEN();
	}
	
	/* Entry action for state 'StateValveOn2'. */
	private void entryAction_main_region_StateValveOn2() {
		/* Entry action for state 'StateValveOn2'. */
		timerService.setTimer(this, 5, (32l * 1000l), false);
		valve.raiseOPEN();
	}
	
	/* Entry action for state 'StateValveOn3'. */
	private void entryAction_main_region_StateValveOn3() {
		/* Entry action for state 'StateValveOn3'. */
		timerService.setTimer(this, 6, (40l * 1000l), false);
		valve.raiseOPEN();
	}
	
	/* Exit action for state 'StateMotorOn'. */
	private void exitAction_main_region_StateMotorOn() {
		/* Exit action for state 'StateMotorOn'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'DecisionValve'. */
	private void exitAction_main_region_DecisionValve() {
		/* Exit action for state 'DecisionValve'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'DecisionMotor'. */
	private void exitAction_main_region_DecisionMotor() {
		/* Exit action for state 'DecisionMotor'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'DecisionTimeOpen'. */
	private void exitAction_main_region_DecisionTimeOpen() {
		/* Exit action for state 'DecisionTimeOpen'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'StateValveOn1'. */
	private void exitAction_main_region_StateValveOn1() {
		/* Exit action for state 'StateValveOn1'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'StateValveOn2'. */
	private void exitAction_main_region_StateValveOn2() {
		/* Exit action for state 'StateValveOn2'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'StateValveOn3'. */
	private void exitAction_main_region_StateValveOn3() {
		/* Exit action for state 'StateValveOn3'. */
		timerService.unsetTimer(this, 6);
	}
	
	/* 'default' enter sequence for state DecisionActivate */
	private void enterSequence_main_region_DecisionActivate_default() {
		/* 'default' enter sequence for state DecisionActivate */
		entryAction_main_region_DecisionActivate();
		stateVector[0] = State.MAIN_REGION_DECISIONACTIVATE;
	}
	
	/* 'default' enter sequence for state StateMotorOn */
	private void enterSequence_main_region_StateMotorOn_default() {
		/* 'default' enter sequence for state StateMotorOn */
		entryAction_main_region_StateMotorOn();
		stateVector[0] = State.MAIN_REGION_STATEMOTORON;
	}
	
	/* 'default' enter sequence for state DecisionValve */
	private void enterSequence_main_region_DecisionValve_default() {
		/* 'default' enter sequence for state DecisionValve */
		entryAction_main_region_DecisionValve();
		stateVector[0] = State.MAIN_REGION_DECISIONVALVE;
	}
	
	/* 'default' enter sequence for state DecisionMotor */
	private void enterSequence_main_region_DecisionMotor_default() {
		/* 'default' enter sequence for state DecisionMotor */
		entryAction_main_region_DecisionMotor();
		stateVector[0] = State.MAIN_REGION_DECISIONMOTOR;
	}
	
	/* 'default' enter sequence for state DecisionTimeOpen */
	private void enterSequence_main_region_DecisionTimeOpen_default() {
		/* 'default' enter sequence for state DecisionTimeOpen */
		entryAction_main_region_DecisionTimeOpen();
		stateVector[0] = State.MAIN_REGION_DECISIONTIMEOPEN;
	}
	
	/* 'default' enter sequence for state StateValveOn1 */
	private void enterSequence_main_region_StateValveOn1_default() {
		/* 'default' enter sequence for state StateValveOn1 */
		entryAction_main_region_StateValveOn1();
		stateVector[0] = State.MAIN_REGION_STATEVALVEON1;
	}
	
	/* 'default' enter sequence for state StateValveOn2 */
	private void enterSequence_main_region_StateValveOn2_default() {
		/* 'default' enter sequence for state StateValveOn2 */
		entryAction_main_region_StateValveOn2();
		stateVector[0] = State.MAIN_REGION_STATEVALVEON2;
	}
	
	/* 'default' enter sequence for state StateValveOn3 */
	private void enterSequence_main_region_StateValveOn3_default() {
		/* 'default' enter sequence for state StateValveOn3 */
		entryAction_main_region_StateValveOn3();
		stateVector[0] = State.MAIN_REGION_STATEVALVEON3;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state DecisionActivate */
	private void exitSequence_main_region_DecisionActivate() {
		/* Default exit sequence for state DecisionActivate */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateMotorOn */
	private void exitSequence_main_region_StateMotorOn() {
		/* Default exit sequence for state StateMotorOn */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_StateMotorOn();
	}
	
	/* Default exit sequence for state DecisionValve */
	private void exitSequence_main_region_DecisionValve() {
		/* Default exit sequence for state DecisionValve */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_DecisionValve();
	}
	
	/* Default exit sequence for state DecisionMotor */
	private void exitSequence_main_region_DecisionMotor() {
		/* Default exit sequence for state DecisionMotor */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_DecisionMotor();
	}
	
	/* Default exit sequence for state DecisionTimeOpen */
	private void exitSequence_main_region_DecisionTimeOpen() {
		/* Default exit sequence for state DecisionTimeOpen */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_DecisionTimeOpen();
	}
	
	/* Default exit sequence for state StateValveOn1 */
	private void exitSequence_main_region_StateValveOn1() {
		/* Default exit sequence for state StateValveOn1 */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_StateValveOn1();
	}
	
	/* Default exit sequence for state StateValveOn2 */
	private void exitSequence_main_region_StateValveOn2() {
		/* Default exit sequence for state StateValveOn2 */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_StateValveOn2();
	}
	
	/* Default exit sequence for state StateValveOn3 */
	private void exitSequence_main_region_StateValveOn3() {
		/* Default exit sequence for state StateValveOn3 */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_StateValveOn3();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_DECISIONACTIVATE:
			exitSequence_main_region_DecisionActivate();
			break;
		case MAIN_REGION_STATEMOTORON:
			exitSequence_main_region_StateMotorOn();
			break;
		case MAIN_REGION_DECISIONVALVE:
			exitSequence_main_region_DecisionValve();
			break;
		case MAIN_REGION_DECISIONMOTOR:
			exitSequence_main_region_DecisionMotor();
			break;
		case MAIN_REGION_DECISIONTIMEOPEN:
			exitSequence_main_region_DecisionTimeOpen();
			break;
		case MAIN_REGION_STATEVALVEON1:
			exitSequence_main_region_StateValveOn1();
			break;
		case MAIN_REGION_STATEVALVEON2:
			exitSequence_main_region_StateValveOn2();
			break;
		case MAIN_REGION_STATEVALVEON3:
			exitSequence_main_region_StateValveOn3();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_DecisionActivate_default();
	}
	
	private long main_region_DecisionActivate_react(long transitioned_before) {
		/* The reactions of state DecisionActivate. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (buttonMotor.oN) {
				exitSequence_main_region_DecisionActivate();
				enterSequence_main_region_DecisionMotor_default();
				transitioned_after = 0l;
			} else {
				if (buttonValve.oN) {
					exitSequence_main_region_DecisionActivate();
					enterSequence_main_region_DecisionValve_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_StateMotorOn_react(long transitioned_before) {
		/* The reactions of state StateMotorOn. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_StateMotorOn();
				timeEvents[0] = false;
				enterSequence_main_region_DecisionActivate_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_DecisionValve_react(long transitioned_before) {
		/* The reactions of state DecisionValve. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (buttonCancel.oN) {
				exitSequence_main_region_DecisionValve();
				enterSequence_main_region_DecisionActivate_default();
				transitioned_after = 0l;
			} else {
				if (buttonCancel.oFF) {
					exitSequence_main_region_DecisionValve();
					enterSequence_main_region_DecisionValve_default();
					transitioned_after = 0l;
				} else {
					if (timeEvents[1]) {
						exitSequence_main_region_DecisionValve();
						timeEvents[1] = false;
						enterSequence_main_region_DecisionTimeOpen_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_DecisionMotor_react(long transitioned_before) {
		/* The reactions of state DecisionMotor. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_main_region_DecisionMotor();
				timeEvents[2] = false;
				enterSequence_main_region_StateMotorOn_default();
				transitioned_after = 0l;
			} else {
				if (buttonCancel.oFF) {
					exitSequence_main_region_DecisionMotor();
					enterSequence_main_region_DecisionMotor_default();
					transitioned_after = 0l;
				} else {
					if (buttonCancel.oN) {
						exitSequence_main_region_DecisionMotor();
						enterSequence_main_region_DecisionActivate_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_DecisionTimeOpen_react(long transitioned_before) {
		/* The reactions of state DecisionTimeOpen. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((timeEvents[3]) && (getActivate()==1l))) {
				exitSequence_main_region_DecisionTimeOpen();
				timeEvents[3] = false;
				enterSequence_main_region_StateValveOn1_default();
				transitioned_after = 0l;
			} else {
				if (getActivate()==2l) {
					exitSequence_main_region_DecisionTimeOpen();
					enterSequence_main_region_StateValveOn2_default();
					transitioned_after = 0l;
				} else {
					if (getActivate()==3l) {
						exitSequence_main_region_DecisionTimeOpen();
						enterSequence_main_region_StateValveOn3_default();
						transitioned_after = 0l;
					} else {
						if (((getActivate()!=1l || getActivate()!=2l) || getActivate()!=3l)) {
							exitSequence_main_region_DecisionTimeOpen();
							enterSequence_main_region_DecisionActivate_default();
							transitioned_after = 0l;
						}
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_StateValveOn1_react(long transitioned_before) {
		/* The reactions of state StateValveOn1. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[4]) {
				exitSequence_main_region_StateValveOn1();
				timeEvents[4] = false;
				enterSequence_main_region_DecisionActivate_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_StateValveOn2_react(long transitioned_before) {
		/* The reactions of state StateValveOn2. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[5]) {
				exitSequence_main_region_StateValveOn2();
				timeEvents[5] = false;
				enterSequence_main_region_DecisionActivate_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_StateValveOn3_react(long transitioned_before) {
		/* The reactions of state StateValveOn3. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[6]) {
				exitSequence_main_region_StateValveOn3();
				timeEvents[6] = false;
				enterSequence_main_region_DecisionActivate_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
