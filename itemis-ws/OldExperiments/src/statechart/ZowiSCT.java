/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;

public class ZowiSCT implements ITimed, ICycleBased {
	public static class Zowi {
		public interface OperationCallback {
		
			public void init();
			
			public void home();
			
			public void walk(long steps, long t, long dir);
			
			public void turn();
			
			public double getDistance();
			
			public double getNoise();
			
			public void putMouth(long mouth);
			
			public void sing(long songName);
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	private static class TimeEventsEvBuf {
		private boolean zowiSCT_main_region_Awake_walkAndAvoidObstacles_WaitForTurn_time_event_0;
		private boolean zowiSCT_main_region_Awake_walkAndAvoidObstacles_WaitForWalking_time_event_0;
		private boolean zowiSCT_main_region_IsSomeOneHere_Changing_mood_Suprised_time_event_0;
		private boolean zowiSCT_main_region_IsSomeOneHere_Changing_mood_Sad_time_event_0;
		private boolean zowiSCT_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack_time_event_0;
		private boolean zowiSCT_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward_time_event_0;
	}
	private static class ZowiSCTEvBuf {
		private TimeEventsEvBuf timeEvents = new TimeEventsEvBuf();
	}
	protected Zowi zowi;
	
	public enum State {
		MAIN_REGION_WELCOMEZOWI,
		MAIN_REGION_AWAKE,
		MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WALKSTRAIGHT,
		MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORTURN,
		MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_TURNLEFT,
		MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORWALKING,
		MAIN_REGION_ISSOMEONEHERE,
		MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SUPRISED,
		MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SAD,
		MAIN_REGION_OBSTACLEDETECTED,
		MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKBACK,
		MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKFORWARD,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[1];
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[6];
	
	public static final long s_S_superHappy = 12l;
	
	protected long getS_S_superHappy() {
		return s_S_superHappy;
	}
	
	
	public static final long s_heart = 13l;
	
	protected long getS_heart() {
		return s_heart;
	}
	
	
	public static final long s_bigSurprise = 14l;
	
	protected long getS_bigSurprise() {
		return s_bigSurprise;
	}
	
	
	public static final long s_sadClosed = 24l;
	
	protected long getS_sadClosed() {
		return s_sadClosed;
	}
	
	
	public static final long s_FORWARD = 1l;
	
	protected long getS_FORWARD() {
		return s_FORWARD;
	}
	
	
	public static final long s_BACKWARD = -(1l);
	
	protected long getS_BACKWARD() {
		return s_BACKWARD;
	}
	
	
	public static final double distance = 20.0f;
	
	protected double getDistance() {
		return distance;
	}
	
	
	public static final long noise = 700l;
	
	protected long getNoise() {
		return noise;
	}
	
	
	private long roundCounter;
	
	protected long getRoundCounter() {
		return roundCounter;
	}
	
	protected void setRoundCounter(long value) {
		this.roundCounter = value;
	}
	
	
	public static final long maxRounds = 3l;
	
	protected long getMaxRounds() {
		return maxRounds;
	}
	
	
	private ZowiSCTEvBuf current = new ZowiSCTEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public ZowiSCT() {
		zowi = new Zowi();
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 1; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart ZowiSCT */
		setRoundCounter(0l);
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.zowi.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Zowi must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		microStep();
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.zowi.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Zowi must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart ZowiSCT */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart ZowiSCT */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		current.timeEvents.zowiSCT_main_region_Awake_walkAndAvoidObstacles_WaitForTurn_time_event_0 = timeEvents[0];
		timeEvents[0] = false;
		current.timeEvents.zowiSCT_main_region_Awake_walkAndAvoidObstacles_WaitForWalking_time_event_0 = timeEvents[1];
		timeEvents[1] = false;
		current.timeEvents.zowiSCT_main_region_IsSomeOneHere_Changing_mood_Suprised_time_event_0 = timeEvents[2];
		timeEvents[2] = false;
		current.timeEvents.zowiSCT_main_region_IsSomeOneHere_Changing_mood_Sad_time_event_0 = timeEvents[3];
		timeEvents[3] = false;
		current.timeEvents.zowiSCT_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack_time_event_0 = timeEvents[4];
		timeEvents[4] = false;
		current.timeEvents.zowiSCT_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward_time_event_0 = timeEvents[5];
		timeEvents[5] = false;
	}
	
	private void clearInEvents() {
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_WELCOMEZOWI:
			main_region_WelcomeZowi_react(-1l);
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WALKSTRAIGHT:
			main_region_Awake_walkAndAvoidObstacles_WalkStraight_react(-1l);
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORTURN:
			main_region_Awake_walkAndAvoidObstacles_WaitForTurn_react(-1l);
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_TURNLEFT:
			main_region_Awake_walkAndAvoidObstacles_TurnLeft_react(-1l);
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORWALKING:
			main_region_Awake_walkAndAvoidObstacles_WaitForWalking_react(-1l);
			break;
		case MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SUPRISED:
			main_region_IsSomeOneHere_Changing_mood_Suprised_react(-1l);
			break;
		case MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SAD:
			main_region_IsSomeOneHere_Changing_mood_Sad_react(-1l);
			break;
		case MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKBACK:
			main_region_ObstacleDetected_RemoveTheObstacle_WalkBack_react(-1l);
			break;
		case MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKFORWARD:
			main_region_ObstacleDetected_RemoveTheObstacle_WalkForward_react(-1l);
			break;
		default:
			break;
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_WELCOMEZOWI:
			return stateVector[0] == State.MAIN_REGION_WELCOMEZOWI;
		case MAIN_REGION_AWAKE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_AWAKE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORWALKING.ordinal();
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WALKSTRAIGHT:
			return stateVector[0] == State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WALKSTRAIGHT;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORTURN:
			return stateVector[0] == State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORTURN;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_TURNLEFT:
			return stateVector[0] == State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_TURNLEFT;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORWALKING:
			return stateVector[0] == State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORWALKING;
		case MAIN_REGION_ISSOMEONEHERE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_ISSOMEONEHERE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SAD.ordinal();
		case MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SUPRISED:
			return stateVector[0] == State.MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SUPRISED;
		case MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SAD:
			return stateVector[0] == State.MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SAD;
		case MAIN_REGION_OBSTACLEDETECTED:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OBSTACLEDETECTED.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKFORWARD.ordinal();
		case MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKBACK:
			return stateVector[0] == State.MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKBACK;
		case MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKFORWARD:
			return stateVector[0] == State.MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKFORWARD;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public Zowi zowi() {
		return zowi;
	}
	
	
	/* Entry action for state 'WelcomeZowi'. */
	private void entryAction_main_region_WelcomeZowi() {
		/* Entry action for state 'WelcomeZowi'. */
		zowi.operationCallback.init();
		zowi.operationCallback.home();
	}
	
	/* Entry action for state 'WalkStraight'. */
	private void entryAction_main_region_Awake_walkAndAvoidObstacles_WalkStraight() {
		/* Entry action for state 'WalkStraight'. */
		zowi.operationCallback.putMouth(getRoundCounter());
		zowi.operationCallback.walk(4l, 1000l, getS_FORWARD());
	}
	
	/* Entry action for state 'WaitForTurn'. */
	private void entryAction_main_region_Awake_walkAndAvoidObstacles_WaitForTurn() {
		/* Entry action for state 'WaitForTurn'. */
		timerService.setTimer(this, 0, (2l * 1000l), false);
		zowi.operationCallback.home();
		zowi.operationCallback.sing(getS_S_superHappy());
	}
	
	/* Entry action for state 'TurnLeft'. */
	private void entryAction_main_region_Awake_walkAndAvoidObstacles_TurnLeft() {
		/* Entry action for state 'TurnLeft'. */
		zowi.operationCallback.putMouth(getS_bigSurprise());
		zowi.operationCallback.turn();
	}
	
	/* Entry action for state 'WaitForWalking'. */
	private void entryAction_main_region_Awake_walkAndAvoidObstacles_WaitForWalking() {
		/* Entry action for state 'WaitForWalking'. */
		timerService.setTimer(this, 1, (2l * 1000l), false);
		zowi.operationCallback.home();
		zowi.operationCallback.putMouth(getS_heart());
	}
	
	/* Entry action for state 'Suprised'. */
	private void entryAction_main_region_IsSomeOneHere_Changing_mood_Suprised() {
		/* Entry action for state 'Suprised'. */
		timerService.setTimer(this, 2, (5l * 1000l), false);
		zowi.operationCallback.putMouth(getS_bigSurprise());
	}
	
	/* Entry action for state 'Sad'. */
	private void entryAction_main_region_IsSomeOneHere_Changing_mood_Sad() {
		/* Entry action for state 'Sad'. */
		timerService.setTimer(this, 3, (5l * 1000l), false);
		zowi.operationCallback.putMouth(getS_sadClosed());
	}
	
	/* Entry action for state 'WalkBack'. */
	private void entryAction_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack() {
		/* Entry action for state 'WalkBack'. */
		timerService.setTimer(this, 4, (2l * 1000l), false);
		zowi.operationCallback.home();
		zowi.operationCallback.walk(2l, 1000l, getS_BACKWARD());
	}
	
	/* Entry action for state 'WalkForward'. */
	private void entryAction_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward() {
		/* Entry action for state 'WalkForward'. */
		timerService.setTimer(this, 5, (2l * 1000l), false);
		zowi.operationCallback.home();
		zowi.operationCallback.walk(2l, 1000l, getS_FORWARD());
	}
	
	/* Exit action for state 'Awake'. */
	private void exitAction_main_region_Awake() {
		/* Exit action for state 'Awake'. */
		setRoundCounter(0l);
	}
	
	/* Exit action for state 'WaitForTurn'. */
	private void exitAction_main_region_Awake_walkAndAvoidObstacles_WaitForTurn() {
		/* Exit action for state 'WaitForTurn'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'WaitForWalking'. */
	private void exitAction_main_region_Awake_walkAndAvoidObstacles_WaitForWalking() {
		/* Exit action for state 'WaitForWalking'. */
		timerService.unsetTimer(this, 1);
		roundCounter++;
	}
	
	/* Exit action for state 'Suprised'. */
	private void exitAction_main_region_IsSomeOneHere_Changing_mood_Suprised() {
		/* Exit action for state 'Suprised'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Sad'. */
	private void exitAction_main_region_IsSomeOneHere_Changing_mood_Sad() {
		/* Exit action for state 'Sad'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'WalkBack'. */
	private void exitAction_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack() {
		/* Exit action for state 'WalkBack'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'WalkForward'. */
	private void exitAction_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward() {
		/* Exit action for state 'WalkForward'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state WelcomeZowi */
	private void enterSequence_main_region_WelcomeZowi_default() {
		/* 'default' enter sequence for state WelcomeZowi */
		entryAction_main_region_WelcomeZowi();
		stateVector[0] = State.MAIN_REGION_WELCOMEZOWI;
	}
	
	/* 'default' enter sequence for state Awake */
	private void enterSequence_main_region_Awake_default() {
		/* 'default' enter sequence for state Awake */
		enterSequence_main_region_Awake_walkAndAvoidObstacles_default();
	}
	
	/* 'default' enter sequence for state WalkStraight */
	private void enterSequence_main_region_Awake_walkAndAvoidObstacles_WalkStraight_default() {
		/* 'default' enter sequence for state WalkStraight */
		entryAction_main_region_Awake_walkAndAvoidObstacles_WalkStraight();
		stateVector[0] = State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WALKSTRAIGHT;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state WaitForTurn */
	private void enterSequence_main_region_Awake_walkAndAvoidObstacles_WaitForTurn_default() {
		/* 'default' enter sequence for state WaitForTurn */
		entryAction_main_region_Awake_walkAndAvoidObstacles_WaitForTurn();
		stateVector[0] = State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORTURN;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state TurnLeft */
	private void enterSequence_main_region_Awake_walkAndAvoidObstacles_TurnLeft_default() {
		/* 'default' enter sequence for state TurnLeft */
		entryAction_main_region_Awake_walkAndAvoidObstacles_TurnLeft();
		stateVector[0] = State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_TURNLEFT;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state WaitForWalking */
	private void enterSequence_main_region_Awake_walkAndAvoidObstacles_WaitForWalking_default() {
		/* 'default' enter sequence for state WaitForWalking */
		entryAction_main_region_Awake_walkAndAvoidObstacles_WaitForWalking();
		stateVector[0] = State.MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORWALKING;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state IsSomeOneHere */
	private void enterSequence_main_region_IsSomeOneHere_default() {
		/* 'default' enter sequence for state IsSomeOneHere */
		enterSequence_main_region_IsSomeOneHere_Changing_mood_default();
	}
	
	/* 'default' enter sequence for state Suprised */
	private void enterSequence_main_region_IsSomeOneHere_Changing_mood_Suprised_default() {
		/* 'default' enter sequence for state Suprised */
		entryAction_main_region_IsSomeOneHere_Changing_mood_Suprised();
		stateVector[0] = State.MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SUPRISED;
	}
	
	/* 'default' enter sequence for state Sad */
	private void enterSequence_main_region_IsSomeOneHere_Changing_mood_Sad_default() {
		/* 'default' enter sequence for state Sad */
		entryAction_main_region_IsSomeOneHere_Changing_mood_Sad();
		stateVector[0] = State.MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SAD;
	}
	
	/* 'default' enter sequence for state ObstacleDetected */
	private void enterSequence_main_region_ObstacleDetected_default() {
		/* 'default' enter sequence for state ObstacleDetected */
		enterSequence_main_region_ObstacleDetected_RemoveTheObstacle_default();
	}
	
	/* 'default' enter sequence for state WalkBack */
	private void enterSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack_default() {
		/* 'default' enter sequence for state WalkBack */
		entryAction_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack();
		stateVector[0] = State.MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKBACK;
	}
	
	/* 'default' enter sequence for state WalkForward */
	private void enterSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward_default() {
		/* 'default' enter sequence for state WalkForward */
		entryAction_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward();
		stateVector[0] = State.MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKFORWARD;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region walkAndAvoidObstacles */
	private void enterSequence_main_region_Awake_walkAndAvoidObstacles_default() {
		/* 'default' enter sequence for region walkAndAvoidObstacles */
		react_main_region_Awake_walkAndAvoidObstacles__entry_Default();
	}
	
	/* shallow enterSequence with history in child walkAndAvoidObstacles */
	private void shallowEnterSequence_main_region_Awake_walkAndAvoidObstacles() {
		/* shallow enterSequence with history in child walkAndAvoidObstacles */
		switch (historyVector[0]) {
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WALKSTRAIGHT:
			enterSequence_main_region_Awake_walkAndAvoidObstacles_WalkStraight_default();
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORTURN:
			enterSequence_main_region_Awake_walkAndAvoidObstacles_WaitForTurn_default();
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_TURNLEFT:
			enterSequence_main_region_Awake_walkAndAvoidObstacles_TurnLeft_default();
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORWALKING:
			enterSequence_main_region_Awake_walkAndAvoidObstacles_WaitForWalking_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region Changing mood */
	private void enterSequence_main_region_IsSomeOneHere_Changing_mood_default() {
		/* 'default' enter sequence for region Changing mood */
		react_main_region_IsSomeOneHere_Changing_mood__entry_Default();
	}
	
	/* 'default' enter sequence for region RemoveTheObstacle */
	private void enterSequence_main_region_ObstacleDetected_RemoveTheObstacle_default() {
		/* 'default' enter sequence for region RemoveTheObstacle */
		react_main_region_ObstacleDetected_RemoveTheObstacle__entry_Default();
	}
	
	/* Default exit sequence for state WelcomeZowi */
	private void exitSequence_main_region_WelcomeZowi() {
		/* Default exit sequence for state WelcomeZowi */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Awake */
	private void exitSequence_main_region_Awake() {
		/* Default exit sequence for state Awake */
		exitSequence_main_region_Awake_walkAndAvoidObstacles();
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Awake();
	}
	
	/* Default exit sequence for state WalkStraight */
	private void exitSequence_main_region_Awake_walkAndAvoidObstacles_WalkStraight() {
		/* Default exit sequence for state WalkStraight */
		stateVector[0] = State.MAIN_REGION_AWAKE;
	}
	
	/* Default exit sequence for state WaitForTurn */
	private void exitSequence_main_region_Awake_walkAndAvoidObstacles_WaitForTurn() {
		/* Default exit sequence for state WaitForTurn */
		stateVector[0] = State.MAIN_REGION_AWAKE;
		exitAction_main_region_Awake_walkAndAvoidObstacles_WaitForTurn();
	}
	
	/* Default exit sequence for state TurnLeft */
	private void exitSequence_main_region_Awake_walkAndAvoidObstacles_TurnLeft() {
		/* Default exit sequence for state TurnLeft */
		stateVector[0] = State.MAIN_REGION_AWAKE;
	}
	
	/* Default exit sequence for state WaitForWalking */
	private void exitSequence_main_region_Awake_walkAndAvoidObstacles_WaitForWalking() {
		/* Default exit sequence for state WaitForWalking */
		stateVector[0] = State.MAIN_REGION_AWAKE;
		exitAction_main_region_Awake_walkAndAvoidObstacles_WaitForWalking();
	}
	
	/* Default exit sequence for state IsSomeOneHere */
	private void exitSequence_main_region_IsSomeOneHere() {
		/* Default exit sequence for state IsSomeOneHere */
		exitSequence_main_region_IsSomeOneHere_Changing_mood();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Suprised */
	private void exitSequence_main_region_IsSomeOneHere_Changing_mood_Suprised() {
		/* Default exit sequence for state Suprised */
		stateVector[0] = State.MAIN_REGION_ISSOMEONEHERE;
		exitAction_main_region_IsSomeOneHere_Changing_mood_Suprised();
	}
	
	/* Default exit sequence for state Sad */
	private void exitSequence_main_region_IsSomeOneHere_Changing_mood_Sad() {
		/* Default exit sequence for state Sad */
		stateVector[0] = State.MAIN_REGION_ISSOMEONEHERE;
		exitAction_main_region_IsSomeOneHere_Changing_mood_Sad();
	}
	
	/* Default exit sequence for state ObstacleDetected */
	private void exitSequence_main_region_ObstacleDetected() {
		/* Default exit sequence for state ObstacleDetected */
		exitSequence_main_region_ObstacleDetected_RemoveTheObstacle();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state WalkBack */
	private void exitSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack() {
		/* Default exit sequence for state WalkBack */
		stateVector[0] = State.MAIN_REGION_OBSTACLEDETECTED;
		exitAction_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack();
	}
	
	/* Default exit sequence for state WalkForward */
	private void exitSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward() {
		/* Default exit sequence for state WalkForward */
		stateVector[0] = State.MAIN_REGION_OBSTACLEDETECTED;
		exitAction_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_WELCOMEZOWI:
			exitSequence_main_region_WelcomeZowi();
			break;
		case MAIN_REGION_AWAKE:
			exitSequence_main_region_Awake();
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WALKSTRAIGHT:
			exitSequence_main_region_Awake_walkAndAvoidObstacles_WalkStraight();
			exitAction_main_region_Awake();
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORTURN:
			exitSequence_main_region_Awake_walkAndAvoidObstacles_WaitForTurn();
			exitAction_main_region_Awake();
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_TURNLEFT:
			exitSequence_main_region_Awake_walkAndAvoidObstacles_TurnLeft();
			exitAction_main_region_Awake();
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORWALKING:
			exitSequence_main_region_Awake_walkAndAvoidObstacles_WaitForWalking();
			exitAction_main_region_Awake();
			break;
		case MAIN_REGION_ISSOMEONEHERE:
			exitSequence_main_region_IsSomeOneHere();
			break;
		case MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SUPRISED:
			exitSequence_main_region_IsSomeOneHere_Changing_mood_Suprised();
			break;
		case MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SAD:
			exitSequence_main_region_IsSomeOneHere_Changing_mood_Sad();
			break;
		case MAIN_REGION_OBSTACLEDETECTED:
			exitSequence_main_region_ObstacleDetected();
			break;
		case MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKBACK:
			exitSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack();
			break;
		case MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKFORWARD:
			exitSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region walkAndAvoidObstacles */
	private void exitSequence_main_region_Awake_walkAndAvoidObstacles() {
		/* Default exit sequence for region walkAndAvoidObstacles */
		switch (stateVector[0]) {
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WALKSTRAIGHT:
			exitSequence_main_region_Awake_walkAndAvoidObstacles_WalkStraight();
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORTURN:
			exitSequence_main_region_Awake_walkAndAvoidObstacles_WaitForTurn();
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_TURNLEFT:
			exitSequence_main_region_Awake_walkAndAvoidObstacles_TurnLeft();
			break;
		case MAIN_REGION_AWAKE_WALKANDAVOIDOBSTACLES_WAITFORWALKING:
			exitSequence_main_region_Awake_walkAndAvoidObstacles_WaitForWalking();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Changing mood */
	private void exitSequence_main_region_IsSomeOneHere_Changing_mood() {
		/* Default exit sequence for region Changing mood */
		switch (stateVector[0]) {
		case MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SUPRISED:
			exitSequence_main_region_IsSomeOneHere_Changing_mood_Suprised();
			break;
		case MAIN_REGION_ISSOMEONEHERE_CHANGING_MOOD_SAD:
			exitSequence_main_region_IsSomeOneHere_Changing_mood_Sad();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region RemoveTheObstacle */
	private void exitSequence_main_region_ObstacleDetected_RemoveTheObstacle() {
		/* Default exit sequence for region RemoveTheObstacle */
		switch (stateVector[0]) {
		case MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKBACK:
			exitSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack();
			break;
		case MAIN_REGION_OBSTACLEDETECTED_REMOVETHEOBSTACLE_WALKFORWARD:
			exitSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_WelcomeZowi_default();
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_main_region_Awake_walkAndAvoidObstacles__entry_Default() {
		/* Default react sequence for shallow history entry  */
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_main_region_Awake_walkAndAvoidObstacles();
		} else {
			enterSequence_main_region_Awake_walkAndAvoidObstacles_WalkStraight_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_IsSomeOneHere_Changing_mood__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_IsSomeOneHere_Changing_mood_Suprised_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_ObstacleDetected_RemoveTheObstacle__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack_default();
	}
	
	private long main_region_WelcomeZowi_react(long transitioned_before) {
		/* The reactions of state WelcomeZowi. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			exitSequence_main_region_WelcomeZowi();
			enterSequence_main_region_Awake_default();
			transitioned_after = 0l;
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Awake_react(long transitioned_before) {
		/* The reactions of state Awake. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getRoundCounter()>getMaxRounds()) {
				exitSequence_main_region_Awake();
				enterSequence_main_region_IsSomeOneHere_default();
				transitioned_after = 0l;
			} else {
				if (zowi.operationCallback.getDistance()<getDistance()) {
					exitSequence_main_region_Awake();
					enterSequence_main_region_ObstacleDetected_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Awake_walkAndAvoidObstacles_WalkStraight_react(long transitioned_before) {
		/* The reactions of state WalkStraight. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			exitSequence_main_region_Awake_walkAndAvoidObstacles_WalkStraight();
			enterSequence_main_region_Awake_walkAndAvoidObstacles_WaitForTurn_default();
			main_region_Awake_react(0l);
			transitioned_after = 0l;
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Awake_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Awake_walkAndAvoidObstacles_WaitForTurn_react(long transitioned_before) {
		/* The reactions of state WaitForTurn. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.zowiSCT_main_region_Awake_walkAndAvoidObstacles_WaitForTurn_time_event_0) {
				exitSequence_main_region_Awake_walkAndAvoidObstacles_WaitForTurn();
				current.timeEvents.zowiSCT_main_region_Awake_walkAndAvoidObstacles_WaitForTurn_time_event_0 = false;
				enterSequence_main_region_Awake_walkAndAvoidObstacles_TurnLeft_default();
				main_region_Awake_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Awake_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Awake_walkAndAvoidObstacles_TurnLeft_react(long transitioned_before) {
		/* The reactions of state TurnLeft. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			exitSequence_main_region_Awake_walkAndAvoidObstacles_TurnLeft();
			enterSequence_main_region_Awake_walkAndAvoidObstacles_WaitForWalking_default();
			main_region_Awake_react(0l);
			transitioned_after = 0l;
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Awake_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Awake_walkAndAvoidObstacles_WaitForWalking_react(long transitioned_before) {
		/* The reactions of state WaitForWalking. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.zowiSCT_main_region_Awake_walkAndAvoidObstacles_WaitForWalking_time_event_0) {
				exitSequence_main_region_Awake_walkAndAvoidObstacles_WaitForWalking();
				current.timeEvents.zowiSCT_main_region_Awake_walkAndAvoidObstacles_WaitForWalking_time_event_0 = false;
				enterSequence_main_region_Awake_walkAndAvoidObstacles_WalkStraight_default();
				main_region_Awake_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Awake_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_IsSomeOneHere_react(long transitioned_before) {
		/* The reactions of state IsSomeOneHere. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (zowi.operationCallback.getNoise()>getNoise()) {
				exitSequence_main_region_IsSomeOneHere();
				setRoundCounter(0l);
				enterSequence_main_region_Awake_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_IsSomeOneHere_Changing_mood_Suprised_react(long transitioned_before) {
		/* The reactions of state Suprised. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.zowiSCT_main_region_IsSomeOneHere_Changing_mood_Suprised_time_event_0) {
				exitSequence_main_region_IsSomeOneHere_Changing_mood_Suprised();
				current.timeEvents.zowiSCT_main_region_IsSomeOneHere_Changing_mood_Suprised_time_event_0 = false;
				enterSequence_main_region_IsSomeOneHere_Changing_mood_Sad_default();
				main_region_IsSomeOneHere_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_IsSomeOneHere_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_IsSomeOneHere_Changing_mood_Sad_react(long transitioned_before) {
		/* The reactions of state Sad. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.zowiSCT_main_region_IsSomeOneHere_Changing_mood_Sad_time_event_0) {
				exitSequence_main_region_IsSomeOneHere_Changing_mood_Sad();
				current.timeEvents.zowiSCT_main_region_IsSomeOneHere_Changing_mood_Sad_time_event_0 = false;
				enterSequence_main_region_IsSomeOneHere_Changing_mood_Suprised_default();
				main_region_IsSomeOneHere_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_IsSomeOneHere_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_ObstacleDetected_react(long transitioned_before) {
		/* The reactions of state ObstacleDetected. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (zowi.operationCallback.getDistance()>=getDistance()) {
				exitSequence_main_region_ObstacleDetected();
				enterSequence_main_region_Awake_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_ObstacleDetected_RemoveTheObstacle_WalkBack_react(long transitioned_before) {
		/* The reactions of state WalkBack. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.zowiSCT_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack_time_event_0) {
				exitSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack();
				current.timeEvents.zowiSCT_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack_time_event_0 = false;
				enterSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward_default();
				main_region_ObstacleDetected_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_ObstacleDetected_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_ObstacleDetected_RemoveTheObstacle_WalkForward_react(long transitioned_before) {
		/* The reactions of state WalkForward. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.zowiSCT_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward_time_event_0) {
				exitSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward();
				current.timeEvents.zowiSCT_main_region_ObstacleDetected_RemoveTheObstacle_WalkForward_time_event_0 = false;
				enterSequence_main_region_ObstacleDetected_RemoveTheObstacle_WalkBack_default();
				main_region_ObstacleDetected_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_ObstacleDetected_react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
