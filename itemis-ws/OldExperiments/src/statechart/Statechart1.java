/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Statechart1 implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_STOP,
		MAIN_REGION_DOOR_OPEN,
		MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_OFF,
		MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_ON,
		MAIN_REGION_MOVING,
		MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_OFF,
		MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_ON,
		MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_OFF,
		MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_ON,
		MAIN_REGION_EMERGENCY,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Statechart1() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Statechart1 */
		setDoor(false);
		setFlashing_light(false);
		setIn_station(true);
		setSpeed(0l);
		setWarning_light(false);
		setYellow_light(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Statechart1 */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Statechart1 */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		door_open = false;
		speed_up = false;
		speed_down = false;
		yellow_light_on = false;
		red_light_on = false;
		emergency_button = false;
		enter_station = false;
		leave_station = false;
		restart = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_STOP:
			transitioned = main_region_Stop_react(transitioned);
			break;
		case MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_OFF:
			transitioned = main_region_Door_Open_Flashing_light_Flashing_light_is_off_react(transitioned);
			break;
		case MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_ON:
			transitioned = main_region_Door_Open_Flashing_light_Flashing_light_is_on_react(transitioned);
			break;
		case MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_OFF:
			transitioned = main_region_Moving_Warning_light_Warning_light_is_off_react(transitioned);
			break;
		case MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_ON:
			transitioned = main_region_Moving_Warning_light_warning_light_is_on_react(transitioned);
			break;
		case MAIN_REGION_EMERGENCY:
			transitioned = main_region_Emergency_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_OFF:
				main_region_Moving_Yellow_light_Yellow_light_is_off_react(transitioned);
				break;
			case MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_ON:
				main_region_Moving_Yellow_light_Yellow_light_is_on_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_STOP:
			return stateVector[0] == State.MAIN_REGION_STOP;
		case MAIN_REGION_DOOR_OPEN:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_DOOR_OPEN.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_ON.ordinal();
		case MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_OFF:
			return stateVector[0] == State.MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_OFF;
		case MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_ON:
			return stateVector[0] == State.MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_ON;
		case MAIN_REGION_MOVING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_MOVING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_ON.ordinal();
		case MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_OFF:
			return stateVector[0] == State.MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_OFF;
		case MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_ON:
			return stateVector[0] == State.MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_ON;
		case MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_OFF:
			return stateVector[1] == State.MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_OFF;
		case MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_ON:
			return stateVector[1] == State.MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_ON;
		case MAIN_REGION_EMERGENCY:
			return stateVector[0] == State.MAIN_REGION_EMERGENCY;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean door_open;
	
	
	public void raiseDoor_open() {
		inEventQueue.add(() -> {
			door_open = true;
		});
		runCycle();
	}
	
	private boolean speed_up;
	
	
	public void raiseSpeed_up() {
		inEventQueue.add(() -> {
			speed_up = true;
		});
		runCycle();
	}
	
	private boolean speed_down;
	
	
	public void raiseSpeed_down() {
		inEventQueue.add(() -> {
			speed_down = true;
		});
		runCycle();
	}
	
	private boolean yellow_light_on;
	
	
	public void raiseYellow_light_on() {
		inEventQueue.add(() -> {
			yellow_light_on = true;
		});
		runCycle();
	}
	
	private boolean red_light_on;
	
	
	public void raiseRed_light_on() {
		inEventQueue.add(() -> {
			red_light_on = true;
		});
		runCycle();
	}
	
	private boolean emergency_button;
	
	
	public void raiseEmergency_button() {
		inEventQueue.add(() -> {
			emergency_button = true;
		});
		runCycle();
	}
	
	private boolean enter_station;
	
	
	public void raiseEnter_station() {
		inEventQueue.add(() -> {
			enter_station = true;
		});
		runCycle();
	}
	
	private boolean leave_station;
	
	
	public void raiseLeave_station() {
		inEventQueue.add(() -> {
			leave_station = true;
		});
		runCycle();
	}
	
	private boolean restart;
	
	
	public void raiseRestart() {
		inEventQueue.add(() -> {
			restart = true;
		});
		runCycle();
	}
	
	private boolean door;
	
	public boolean getDoor() {
		return door;
	}
	
	public void setDoor(boolean value) {
		this.door = value;
	}
	
	private boolean flashing_light;
	
	public boolean getFlashing_light() {
		return flashing_light;
	}
	
	public void setFlashing_light(boolean value) {
		this.flashing_light = value;
	}
	
	private boolean in_station;
	
	public boolean getIn_station() {
		return in_station;
	}
	
	public void setIn_station(boolean value) {
		this.in_station = value;
	}
	
	private long speed;
	
	public long getSpeed() {
		return speed;
	}
	
	public void setSpeed(long value) {
		this.speed = value;
	}
	
	private boolean warning_light;
	
	public boolean getWarning_light() {
		return warning_light;
	}
	
	public void setWarning_light(boolean value) {
		this.warning_light = value;
	}
	
	private boolean yellow_light;
	
	public boolean getYellow_light() {
		return yellow_light;
	}
	
	public void setYellow_light(boolean value) {
		this.yellow_light = value;
	}
	
	/* Entry action for state 'Door Open'. */
	private void entryAction_main_region_Door_Open() {
		/* Entry action for state 'Door Open'. */
		timerService.setTimer(this, 0, (10l * 1000l), false);
	}
	
	/* Entry action for state 'Flashing light is off'. */
	private void entryAction_main_region_Door_Open_Flashing_light_Flashing_light_is_off() {
		/* Entry action for state 'Flashing light is off'. */
		timerService.setTimer(this, 1, (7l * 1000l), false);
	}
	
	/* Entry action for state 'Flashing light is on'. */
	private void entryAction_main_region_Door_Open_Flashing_light_Flashing_light_is_on() {
		/* Entry action for state 'Flashing light is on'. */
		timerService.setTimer(this, 2, (1l * 1000l), true);
		setFlashing_light(true);
	}
	
	/* Entry action for state 'warning light is on'. */
	private void entryAction_main_region_Moving_Warning_light_warning_light_is_on() {
		/* Entry action for state 'warning light is on'. */
		timerService.setTimer(this, 3, (1l * 1000l), true);
		setWarning_light(true);
	}
	
	/* Entry action for state 'Yellow light is on'. */
	private void entryAction_main_region_Moving_Yellow_light_Yellow_light_is_on() {
		/* Entry action for state 'Yellow light is on'. */
		timerService.setTimer(this, 4, (3l * 1000l), false);
		setYellow_light(true);
	}
	
	/* Entry action for state 'Emergency'. */
	private void entryAction_main_region_Emergency() {
		/* Entry action for state 'Emergency'. */
		timerService.setTimer(this, 5, (1l * 1000l), true);
	}
	
	/* Exit action for state 'Door Open'. */
	private void exitAction_main_region_Door_Open() {
		/* Exit action for state 'Door Open'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Flashing light is off'. */
	private void exitAction_main_region_Door_Open_Flashing_light_Flashing_light_is_off() {
		/* Exit action for state 'Flashing light is off'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Flashing light is on'. */
	private void exitAction_main_region_Door_Open_Flashing_light_Flashing_light_is_on() {
		/* Exit action for state 'Flashing light is on'. */
		timerService.unsetTimer(this, 2);
		setFlashing_light(false);
	}
	
	/* Exit action for state 'warning light is on'. */
	private void exitAction_main_region_Moving_Warning_light_warning_light_is_on() {
		/* Exit action for state 'warning light is on'. */
		timerService.unsetTimer(this, 3);
		setWarning_light(false);
	}
	
	/* Exit action for state 'Yellow light is on'. */
	private void exitAction_main_region_Moving_Yellow_light_Yellow_light_is_on() {
		/* Exit action for state 'Yellow light is on'. */
		timerService.unsetTimer(this, 4);
		setYellow_light(false);
	}
	
	/* Exit action for state 'Emergency'. */
	private void exitAction_main_region_Emergency() {
		/* Exit action for state 'Emergency'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state Stop */
	private void enterSequence_main_region_Stop_default() {
		/* 'default' enter sequence for state Stop */
		stateVector[0] = State.MAIN_REGION_STOP;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Door Open */
	private void enterSequence_main_region_Door_Open_default() {
		/* 'default' enter sequence for state Door Open */
		entryAction_main_region_Door_Open();
		enterSequence_main_region_Door_Open_Flashing_light_default();
	}
	
	/* 'default' enter sequence for state Flashing light is off */
	private void enterSequence_main_region_Door_Open_Flashing_light_Flashing_light_is_off_default() {
		/* 'default' enter sequence for state Flashing light is off */
		entryAction_main_region_Door_Open_Flashing_light_Flashing_light_is_off();
		stateVector[0] = State.MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Flashing light is on */
	private void enterSequence_main_region_Door_Open_Flashing_light_Flashing_light_is_on_default() {
		/* 'default' enter sequence for state Flashing light is on */
		entryAction_main_region_Door_Open_Flashing_light_Flashing_light_is_on();
		stateVector[0] = State.MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_ON;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Moving */
	private void enterSequence_main_region_Moving_default() {
		/* 'default' enter sequence for state Moving */
		enterSequence_main_region_Moving_Warning_light_default();
		enterSequence_main_region_Moving_Yellow_light_default();
	}
	
	/* 'default' enter sequence for state Warning light is off */
	private void enterSequence_main_region_Moving_Warning_light_Warning_light_is_off_default() {
		/* 'default' enter sequence for state Warning light is off */
		stateVector[0] = State.MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state warning light is on */
	private void enterSequence_main_region_Moving_Warning_light_warning_light_is_on_default() {
		/* 'default' enter sequence for state warning light is on */
		entryAction_main_region_Moving_Warning_light_warning_light_is_on();
		stateVector[0] = State.MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_ON;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Yellow light is off */
	private void enterSequence_main_region_Moving_Yellow_light_Yellow_light_is_off_default() {
		/* 'default' enter sequence for state Yellow light is off */
		stateVector[1] = State.MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_OFF;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Yellow light is on */
	private void enterSequence_main_region_Moving_Yellow_light_Yellow_light_is_on_default() {
		/* 'default' enter sequence for state Yellow light is on */
		entryAction_main_region_Moving_Yellow_light_Yellow_light_is_on();
		stateVector[1] = State.MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_ON;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Emergency */
	private void enterSequence_main_region_Emergency_default() {
		/* 'default' enter sequence for state Emergency */
		entryAction_main_region_Emergency();
		stateVector[0] = State.MAIN_REGION_EMERGENCY;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Flashing light */
	private void enterSequence_main_region_Door_Open_Flashing_light_default() {
		/* 'default' enter sequence for region Flashing light */
		react_main_region_Door_Open_Flashing_light__entry_Default();
	}
	
	/* 'default' enter sequence for region Warning light */
	private void enterSequence_main_region_Moving_Warning_light_default() {
		/* 'default' enter sequence for region Warning light */
		react_main_region_Moving_Warning_light__entry_Default();
	}
	
	/* 'default' enter sequence for region Yellow light */
	private void enterSequence_main_region_Moving_Yellow_light_default() {
		/* 'default' enter sequence for region Yellow light */
		react_main_region_Moving_Yellow_light__entry_Default();
	}
	
	/* Default exit sequence for state Stop */
	private void exitSequence_main_region_Stop() {
		/* Default exit sequence for state Stop */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Door Open */
	private void exitSequence_main_region_Door_Open() {
		/* Default exit sequence for state Door Open */
		exitSequence_main_region_Door_Open_Flashing_light();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_main_region_Door_Open();
	}
	
	/* Default exit sequence for state Flashing light is off */
	private void exitSequence_main_region_Door_Open_Flashing_light_Flashing_light_is_off() {
		/* Default exit sequence for state Flashing light is off */
		stateVector[0] = State.MAIN_REGION_DOOR_OPEN;
		stateConfVectorPosition = 0;
		exitAction_main_region_Door_Open_Flashing_light_Flashing_light_is_off();
	}
	
	/* Default exit sequence for state Flashing light is on */
	private void exitSequence_main_region_Door_Open_Flashing_light_Flashing_light_is_on() {
		/* Default exit sequence for state Flashing light is on */
		stateVector[0] = State.MAIN_REGION_DOOR_OPEN;
		stateConfVectorPosition = 0;
		exitAction_main_region_Door_Open_Flashing_light_Flashing_light_is_on();
	}
	
	/* Default exit sequence for state Moving */
	private void exitSequence_main_region_Moving() {
		/* Default exit sequence for state Moving */
		exitSequence_main_region_Moving_Warning_light();
		exitSequence_main_region_Moving_Yellow_light();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Warning light is off */
	private void exitSequence_main_region_Moving_Warning_light_Warning_light_is_off() {
		/* Default exit sequence for state Warning light is off */
		stateVector[0] = State.MAIN_REGION_MOVING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state warning light is on */
	private void exitSequence_main_region_Moving_Warning_light_warning_light_is_on() {
		/* Default exit sequence for state warning light is on */
		stateVector[0] = State.MAIN_REGION_MOVING;
		stateConfVectorPosition = 0;
		exitAction_main_region_Moving_Warning_light_warning_light_is_on();
	}
	
	/* Default exit sequence for state Yellow light is off */
	private void exitSequence_main_region_Moving_Yellow_light_Yellow_light_is_off() {
		/* Default exit sequence for state Yellow light is off */
		stateVector[1] = State.MAIN_REGION_MOVING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Yellow light is on */
	private void exitSequence_main_region_Moving_Yellow_light_Yellow_light_is_on() {
		/* Default exit sequence for state Yellow light is on */
		stateVector[1] = State.MAIN_REGION_MOVING;
		stateConfVectorPosition = 1;
		exitAction_main_region_Moving_Yellow_light_Yellow_light_is_on();
	}
	
	/* Default exit sequence for state Emergency */
	private void exitSequence_main_region_Emergency() {
		/* Default exit sequence for state Emergency */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_main_region_Emergency();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_STOP:
			exitSequence_main_region_Stop();
			break;
		case MAIN_REGION_DOOR_OPEN:
			exitSequence_main_region_Door_Open();
			break;
		case MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_OFF:
			exitSequence_main_region_Door_Open_Flashing_light_Flashing_light_is_off();
			exitAction_main_region_Door_Open();
			break;
		case MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_ON:
			exitSequence_main_region_Door_Open_Flashing_light_Flashing_light_is_on();
			exitAction_main_region_Door_Open();
			break;
		case MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_OFF:
			exitSequence_main_region_Moving_Warning_light_Warning_light_is_off();
			break;
		case MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_ON:
			exitSequence_main_region_Moving_Warning_light_warning_light_is_on();
			break;
		case MAIN_REGION_EMERGENCY:
			exitSequence_main_region_Emergency();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_OFF:
			exitSequence_main_region_Moving_Yellow_light_Yellow_light_is_off();
			break;
		case MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_ON:
			exitSequence_main_region_Moving_Yellow_light_Yellow_light_is_on();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Flashing light */
	private void exitSequence_main_region_Door_Open_Flashing_light() {
		/* Default exit sequence for region Flashing light */
		switch (stateVector[0]) {
		case MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_OFF:
			exitSequence_main_region_Door_Open_Flashing_light_Flashing_light_is_off();
			break;
		case MAIN_REGION_DOOR_OPEN_FLASHING_LIGHT_FLASHING_LIGHT_IS_ON:
			exitSequence_main_region_Door_Open_Flashing_light_Flashing_light_is_on();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Warning light */
	private void exitSequence_main_region_Moving_Warning_light() {
		/* Default exit sequence for region Warning light */
		switch (stateVector[0]) {
		case MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_OFF:
			exitSequence_main_region_Moving_Warning_light_Warning_light_is_off();
			break;
		case MAIN_REGION_MOVING_WARNING_LIGHT_WARNING_LIGHT_IS_ON:
			exitSequence_main_region_Moving_Warning_light_warning_light_is_on();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Yellow light */
	private void exitSequence_main_region_Moving_Yellow_light() {
		/* Default exit sequence for region Yellow light */
		switch (stateVector[1]) {
		case MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_OFF:
			exitSequence_main_region_Moving_Yellow_light_Yellow_light_is_off();
			break;
		case MAIN_REGION_MOVING_YELLOW_LIGHT_YELLOW_LIGHT_IS_ON:
			exitSequence_main_region_Moving_Yellow_light_Yellow_light_is_on();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Stop_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Door_Open_Flashing_light__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Door_Open_Flashing_light_Flashing_light_is_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Moving_Warning_light__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Moving_Warning_light_Warning_light_is_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Moving_Yellow_light__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Moving_Yellow_light_Yellow_light_is_off_default();
	}
	
	private long main_region_Stop_react(long transitioned_before) {
		/* The reactions of state Stop. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((door_open) && (getIn_station()))) {
				exitSequence_main_region_Stop();
				enterSequence_main_region_Door_Open_default();
				transitioned_after = 0l;
			} else {
				if (speed_up) {
					exitSequence_main_region_Stop();
					setSpeed(5l);
					enterSequence_main_region_Moving_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Door_Open_react(long transitioned_before) {
		/* The reactions of state Door Open. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_Door_Open();
				timeEvents[0] = false;
				enterSequence_main_region_Stop_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Door_Open_Flashing_light_Flashing_light_is_off_react(long transitioned_before) {
		/* The reactions of state Flashing light is off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Door_Open_Flashing_light_Flashing_light_is_off();
				timeEvents[1] = false;
				enterSequence_main_region_Door_Open_Flashing_light_Flashing_light_is_on_default();
				main_region_Door_Open_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Door_Open_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Door_Open_Flashing_light_Flashing_light_is_on_react(long transitioned_before) {
		/* The reactions of state Flashing light is on. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		if (timeEvents[2]) {
			setFlashing_light(!(flashing_light));
		}
		transitioned_after = main_region_Door_Open_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Moving_react(long transitioned_before) {
		/* The reactions of state Moving. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((speed_down) && (getSpeed()==5l))) {
				exitSequence_main_region_Moving();
				setSpeed(0l);
				enterSequence_main_region_Stop_default();
				transitioned_after = 1l;
			} else {
				if ((getIn_station() && getSpeed()>=30l)) {
					exitSequence_main_region_Moving();
					enterSequence_main_region_Emergency_default();
					transitioned_after = 1l;
				} else {
					if (red_light_on) {
						exitSequence_main_region_Moving();
						enterSequence_main_region_Emergency_default();
						transitioned_after = 1l;
					} else {
						if (emergency_button) {
							exitSequence_main_region_Moving();
							enterSequence_main_region_Emergency_default();
							transitioned_after = 1l;
						} else {
							if ((getYellow_light() && getSpeed()>=80l)) {
								exitSequence_main_region_Moving();
								enterSequence_main_region_Emergency_default();
								transitioned_after = 1l;
							}
						}
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (((speed_up) && (getSpeed()<120l))) {
				setSpeed(getSpeed() + 5l);
			}
			if (((speed_down) && (getSpeed()>5l))) {
				setSpeed(getSpeed() - 5l);
			}
			if (enter_station) {
				setIn_station(true);
			}
			if (leave_station) {
				setIn_station(false);
			}
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Moving_Warning_light_Warning_light_is_off_react(long transitioned_before) {
		/* The reactions of state Warning light is off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getSpeed()>=100l) {
				exitSequence_main_region_Moving_Warning_light_Warning_light_is_off();
				enterSequence_main_region_Moving_Warning_light_warning_light_is_on_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Moving_Warning_light_warning_light_is_on_react(long transitioned_before) {
		/* The reactions of state warning light is on. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getSpeed()<100l) {
				exitSequence_main_region_Moving_Warning_light_warning_light_is_on();
				enterSequence_main_region_Moving_Warning_light_Warning_light_is_off_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (timeEvents[3]) {
				setWarning_light(!(warning_light));
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Moving_Yellow_light_Yellow_light_is_off_react(long transitioned_before) {
		/* The reactions of state Yellow light is off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (yellow_light_on) {
				exitSequence_main_region_Moving_Yellow_light_Yellow_light_is_off();
				enterSequence_main_region_Moving_Yellow_light_Yellow_light_is_on_default();
				main_region_Moving_react(0l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Moving_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Moving_Yellow_light_Yellow_light_is_on_react(long transitioned_before) {
		/* The reactions of state Yellow light is on. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[4]) {
				exitSequence_main_region_Moving_Yellow_light_Yellow_light_is_on();
				timeEvents[4] = false;
				enterSequence_main_region_Moving_Yellow_light_Yellow_light_is_off_default();
				main_region_Moving_react(0l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Moving_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Emergency_react(long transitioned_before) {
		/* The reactions of state Emergency. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((restart) && (getSpeed()==0l))) {
				exitSequence_main_region_Emergency();
				enterSequence_main_region_Stop_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (((timeEvents[5]) && (getSpeed()>0l))) {
				setSpeed(getSpeed() - 5l);
			}
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
