/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class _03_MotionLightSwitch implements ITimed, IEventDriven {
	public enum State {
		MAIN_MOTIONSENSING,
		MAIN_MOTIONSENSING_R1_OFF,
		MAIN_MOTIONSENSING_R1_ON,
		MAIN_MANUAL,
		MAIN_MANUAL_R1_OFF,
		MAIN_MANUAL_R1_ON,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public _03_MotionLightSwitch() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart _03_MotionLightSwitch */
		setBrightness(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart _03_MotionLightSwitch */
		enterSequence_main_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart _03_MotionLightSwitch */
		exitSequence_main();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		switchEvent = false;
		changeBrightness = false;
		toggleMode = false;
		motionDetected = false;
		timeEvents[0] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_MOTIONSENSING_R1_OFF:
			main_MotionSensing_r1_Off_react(-1l);
			break;
		case MAIN_MOTIONSENSING_R1_ON:
			main_MotionSensing_r1_On_react(-1l);
			break;
		case MAIN_MANUAL_R1_OFF:
			main_Manual_r1_Off_react(-1l);
			break;
		case MAIN_MANUAL_R1_ON:
			main_Manual_r1_On_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_MOTIONSENSING:
			return stateVector[0].ordinal() >= State.
					MAIN_MOTIONSENSING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MOTIONSENSING_R1_ON.ordinal();
		case MAIN_MOTIONSENSING_R1_OFF:
			return stateVector[0] == State.MAIN_MOTIONSENSING_R1_OFF;
		case MAIN_MOTIONSENSING_R1_ON:
			return stateVector[0] == State.MAIN_MOTIONSENSING_R1_ON;
		case MAIN_MANUAL:
			return stateVector[0].ordinal() >= State.
					MAIN_MANUAL.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MANUAL_R1_ON.ordinal();
		case MAIN_MANUAL_R1_OFF:
			return stateVector[0] == State.MAIN_MANUAL_R1_OFF;
		case MAIN_MANUAL_R1_ON:
			return stateVector[0] == State.MAIN_MANUAL_R1_ON;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean switchEvent;
	
	
	public void raiseSwitch() {
		inEventQueue.add(() -> {
			switchEvent = true;
		});
		runCycle();
	}
	
	private boolean changeBrightness;
	
	
	public void raiseChangeBrightness() {
		inEventQueue.add(() -> {
			changeBrightness = true;
		});
		runCycle();
	}
	
	private boolean toggleMode;
	
	
	public void raiseToggleMode() {
		inEventQueue.add(() -> {
			toggleMode = true;
		});
		runCycle();
	}
	
	private boolean motionDetected;
	
	
	public void raiseMotionDetected() {
		inEventQueue.add(() -> {
			motionDetected = true;
		});
		runCycle();
	}
	
	private long brightness;
	
	public long getBrightness() {
		return brightness;
	}
	
	public void setBrightness(long value) {
		this.brightness = value;
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_main_MotionSensing_r1_Off() {
		/* Entry action for state 'Off'. */
		setBrightness(0l);
	}
	
	/* Entry action for state 'On'. */
	private void entryAction_main_MotionSensing_r1_On() {
		/* Entry action for state 'On'. */
		timerService.setTimer(this, 0, (30l * 1000l), false);
		setBrightness(1l);
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_main_Manual_r1_Off() {
		/* Entry action for state 'Off'. */
		setBrightness(0l);
	}
	
	/* Exit action for state 'On'. */
	private void exitAction_main_MotionSensing_r1_On() {
		/* Exit action for state 'On'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state MotionSensing */
	private void enterSequence_main_MotionSensing_default() {
		/* 'default' enter sequence for state MotionSensing */
		enterSequence_main_MotionSensing_r1_default();
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_MotionSensing_r1_Off_default() {
		/* 'default' enter sequence for state Off */
		entryAction_main_MotionSensing_r1_Off();
		stateVector[0] = State.MAIN_MOTIONSENSING_R1_OFF;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_main_MotionSensing_r1_On_default() {
		/* 'default' enter sequence for state On */
		entryAction_main_MotionSensing_r1_On();
		stateVector[0] = State.MAIN_MOTIONSENSING_R1_ON;
	}
	
	/* 'default' enter sequence for state Manual */
	private void enterSequence_main_Manual_default() {
		/* 'default' enter sequence for state Manual */
		enterSequence_main_Manual_r1_default();
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_Manual_r1_Off_default() {
		/* 'default' enter sequence for state Off */
		entryAction_main_Manual_r1_Off();
		stateVector[0] = State.MAIN_MANUAL_R1_OFF;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_main_Manual_r1_On_default() {
		/* 'default' enter sequence for state On */
		stateVector[0] = State.MAIN_MANUAL_R1_ON;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		/* 'default' enter sequence for region main */
		react_main__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_MotionSensing_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_MotionSensing_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_Manual_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_Manual_r1__entry_Default();
	}
	
	/* Default exit sequence for state MotionSensing */
	private void exitSequence_main_MotionSensing() {
		/* Default exit sequence for state MotionSensing */
		exitSequence_main_MotionSensing_r1();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_MotionSensing_r1_Off() {
		/* Default exit sequence for state Off */
		stateVector[0] = State.MAIN_MOTIONSENSING;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_main_MotionSensing_r1_On() {
		/* Default exit sequence for state On */
		stateVector[0] = State.MAIN_MOTIONSENSING;
		exitAction_main_MotionSensing_r1_On();
	}
	
	/* Default exit sequence for state Manual */
	private void exitSequence_main_Manual() {
		/* Default exit sequence for state Manual */
		exitSequence_main_Manual_r1();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_Manual_r1_Off() {
		/* Default exit sequence for state Off */
		stateVector[0] = State.MAIN_MANUAL;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_main_Manual_r1_On() {
		/* Default exit sequence for state On */
		stateVector[0] = State.MAIN_MANUAL;
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		/* Default exit sequence for region main */
		switch (stateVector[0]) {
		case MAIN_MOTIONSENSING:
			exitSequence_main_MotionSensing();
			break;
		case MAIN_MOTIONSENSING_R1_OFF:
			exitSequence_main_MotionSensing_r1_Off();
			break;
		case MAIN_MOTIONSENSING_R1_ON:
			exitSequence_main_MotionSensing_r1_On();
			break;
		case MAIN_MANUAL:
			exitSequence_main_Manual();
			break;
		case MAIN_MANUAL_R1_OFF:
			exitSequence_main_Manual_r1_Off();
			break;
		case MAIN_MANUAL_R1_ON:
			exitSequence_main_Manual_r1_On();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_MotionSensing_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_MOTIONSENSING_R1_OFF:
			exitSequence_main_MotionSensing_r1_Off();
			break;
		case MAIN_MOTIONSENSING_R1_ON:
			exitSequence_main_MotionSensing_r1_On();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_Manual_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_MANUAL_R1_OFF:
			exitSequence_main_Manual_r1_Off();
			break;
		case MAIN_MANUAL_R1_ON:
			exitSequence_main_Manual_r1_On();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_MotionSensing_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_MotionSensing_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_MotionSensing_r1_Off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Manual_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_Manual_r1_Off_default();
	}
	
	private long main_MotionSensing_react(long transitioned_before) {
		/* The reactions of state MotionSensing. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (toggleMode) {
				exitSequence_main_MotionSensing();
				enterSequence_main_Manual_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_MotionSensing_r1_Off_react(long transitioned_before) {
		/* The reactions of state Off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (motionDetected) {
				exitSequence_main_MotionSensing_r1_Off();
				enterSequence_main_MotionSensing_r1_On_default();
				main_MotionSensing_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_MotionSensing_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_MotionSensing_r1_On_react(long transitioned_before) {
		/* The reactions of state On. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_MotionSensing_r1_On();
				timeEvents[0] = false;
				enterSequence_main_MotionSensing_r1_Off_default();
				main_MotionSensing_react(0l);
				transitioned_after = 0l;
			} else {
				if (motionDetected) {
					exitSequence_main_MotionSensing_r1_On();
					enterSequence_main_MotionSensing_r1_On_default();
					main_MotionSensing_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_MotionSensing_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Manual_react(long transitioned_before) {
		/* The reactions of state Manual. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (toggleMode) {
				exitSequence_main_Manual();
				enterSequence_main_MotionSensing_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_Manual_r1_Off_react(long transitioned_before) {
		/* The reactions of state Off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (switchEvent) {
				exitSequence_main_Manual_r1_Off();
				setBrightness(10l);
				enterSequence_main_Manual_r1_On_default();
				main_Manual_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_Manual_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Manual_r1_On_react(long transitioned_before) {
		/* The reactions of state On. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (switchEvent) {
				exitSequence_main_Manual_r1_On();
				enterSequence_main_Manual_r1_Off_default();
				main_Manual_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (((changeBrightness) && (getBrightness()>1l))) {
				setBrightness(getBrightness() - 1l);
			}
			if (((changeBrightness) && (getBrightness()<=1l))) {
				setBrightness(10l);
			}
			transitioned_after = main_Manual_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
