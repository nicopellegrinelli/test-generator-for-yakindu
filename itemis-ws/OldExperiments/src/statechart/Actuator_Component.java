/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Actuator_Component implements ITimed, IEventDriven {
	public static class Power {
		private long deviceInput;
		
		public long getDeviceInput() {
			return deviceInput;
		}
		
		public void setDeviceInput(long value) {
			this.deviceInput = value;
		}
		
		private long required;
		
		public long getRequired() {
			return required;
		}
		
		public void setRequired(long value) {
			this.required = value;
		}
		
	}
	
	public static class Device {
		private boolean actuated;
		
		public boolean getActuated() {
			return actuated;
		}
		
		public void setActuated(boolean value) {
			this.actuated = value;
		}
		
	}
	
	protected Power power;
	
	protected Device device;
	
	public enum State {
		_ACTUATOR_COMPONENT___STANDBY_,
		_ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL_,
		_ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE_,
		_ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE___ACTUATOR_ACTUATES_DEVICE___DEVICEFUNCTIONING_,
		_ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ERROR_HANDLER_,
		_ACTUATOR_COMPONENT___OFF_,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Actuator_Component() {
		power = new Power();
		device = new Device();
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Actuator_Component */
		setIsTriggered(false);
		power.setDeviceInput(0l);
		power.setRequired(50l);
		device.setActuated(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Actuator_Component */
		enterSequence__Actuator_Component__default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Actuator_Component */
		exitSequence__Actuator_Component_();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		off = false;
		on = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case _ACTUATOR_COMPONENT___STANDBY_:
			_Actuator_Component___Standby__react(-1l);
			break;
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE___ACTUATOR_ACTUATES_DEVICE___DEVICEFUNCTIONING_:
			_Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning__react(-1l);
			break;
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ERROR_HANDLER_:
			_Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Error_Handler__react(-1l);
			break;
		case _ACTUATOR_COMPONENT___OFF_:
			_Actuator_Component___off__react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case _ACTUATOR_COMPONENT___STANDBY_:
			return stateVector[0] == State._ACTUATOR_COMPONENT___STANDBY_;
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL_:
			return stateVector[0].ordinal() >= State.
					_ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL_.ordinal()&& stateVector[0].ordinal() <= State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ERROR_HANDLER_.ordinal();
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE_:
			return stateVector[0].ordinal() >= State.
					_ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE_.ordinal()&& stateVector[0].ordinal() <= State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE___ACTUATOR_ACTUATES_DEVICE___DEVICEFUNCTIONING_.ordinal();
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE___ACTUATOR_ACTUATES_DEVICE___DEVICEFUNCTIONING_:
			return stateVector[0] == State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE___ACTUATOR_ACTUATES_DEVICE___DEVICEFUNCTIONING_;
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ERROR_HANDLER_:
			return stateVector[0] == State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ERROR_HANDLER_;
		case _ACTUATOR_COMPONENT___OFF_:
			return stateVector[0] == State._ACTUATOR_COMPONENT___OFF_;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Power power() {
		return power;
	}
	
	public Device device() {
		return device;
	}
	
	
	private boolean off;
	
	
	public void raiseOff() {
		inEventQueue.add(() -> {
			off = true;
		});
		runCycle();
	}
	
	private boolean on;
	
	
	public void raiseOn() {
		inEventQueue.add(() -> {
			on = true;
		});
		runCycle();
	}
	
	private boolean isTriggered;
	
	public boolean getIsTriggered() {
		return isTriggered;
	}
	
	public void setIsTriggered(boolean value) {
		this.isTriggered = value;
	}
	
	/* Entry action for state '<Standby>'. */
	private void entryAction__Actuator_Component___Standby_() {
		/* Entry action for state '<Standby>'. */
		timerService.setTimer(this, 0, 500l, true);
		setIsTriggered(false);
	}
	
	/* Entry action for state '<ActuatorReceivingSignal>'. */
	private void entryAction__Actuator_Component___ActuatorReceivingSignal_() {
		/* Entry action for state '<ActuatorReceivingSignal>'. */
		timerService.setTimer(this, 1, 100l, false);
		setIsTriggered(true);
	}
	
	/* Entry action for state '<DeviceFunctioning>'. */
	private void entryAction__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning_() {
		/* Entry action for state '<DeviceFunctioning>'. */
		device.setActuated(true);
	}
	
	/* Exit action for state '<Standby>'. */
	private void exitAction__Actuator_Component___Standby_() {
		/* Exit action for state '<Standby>'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state '<ActuatorReceivingSignal>'. */
	private void exitAction__Actuator_Component___ActuatorReceivingSignal_() {
		/* Exit action for state '<ActuatorReceivingSignal>'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state '<DeviceFunctioning>'. */
	private void exitAction__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning_() {
		/* Exit action for state '<DeviceFunctioning>'. */
		device.setActuated(false);
	}
	
	/* 'default' enter sequence for state <Standby> */
	private void enterSequence__Actuator_Component___Standby__default() {
		/* 'default' enter sequence for state <Standby> */
		entryAction__Actuator_Component___Standby_();
		stateVector[0] = State._ACTUATOR_COMPONENT___STANDBY_;
	}
	
	/* 'default' enter sequence for state <ActuatorReceivingSignal> */
	private void enterSequence__Actuator_Component___ActuatorReceivingSignal__default() {
		/* 'default' enter sequence for state <ActuatorReceivingSignal> */
		entryAction__Actuator_Component___ActuatorReceivingSignal_();
		enterSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller__default();
	}
	
	/* 'default' enter sequence for state <Actuating_Device> */
	private void enterSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device__default() {
		/* 'default' enter sequence for state <Actuating_Device> */
		enterSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device__default();
	}
	
	/* 'default' enter sequence for state <DeviceFunctioning> */
	private void enterSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning__default() {
		/* 'default' enter sequence for state <DeviceFunctioning> */
		entryAction__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning_();
		stateVector[0] = State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE___ACTUATOR_ACTUATES_DEVICE___DEVICEFUNCTIONING_;
	}
	
	/* 'default' enter sequence for state <Error_Handler> */
	private void enterSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Error_Handler__default() {
		/* 'default' enter sequence for state <Error_Handler> */
		stateVector[0] = State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ERROR_HANDLER_;
	}
	
	/* 'default' enter sequence for state <off> */
	private void enterSequence__Actuator_Component___off__default() {
		/* 'default' enter sequence for state <off> */
		stateVector[0] = State._ACTUATOR_COMPONENT___OFF_;
	}
	
	/* 'default' enter sequence for region <Actuator_Component> */
	private void enterSequence__Actuator_Component__default() {
		/* 'default' enter sequence for region <Actuator_Component> */
		react__Actuator_Component___entry_Default();
	}
	
	/* 'default' enter sequence for region <Actuator_Receives_actuatingSignal_From_Controller> */
	private void enterSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller__default() {
		/* 'default' enter sequence for region <Actuator_Receives_actuatingSignal_From_Controller> */
		react__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___entry_Default();
	}
	
	/* 'default' enter sequence for region <Actuator_actuates_device> */
	private void enterSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device__default() {
		/* 'default' enter sequence for region <Actuator_actuates_device> */
		react__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___entry_Default();
	}
	
	/* Default exit sequence for state <Standby> */
	private void exitSequence__Actuator_Component___Standby_() {
		/* Default exit sequence for state <Standby> */
		stateVector[0] = State.$NULLSTATE$;
		exitAction__Actuator_Component___Standby_();
	}
	
	/* Default exit sequence for state <ActuatorReceivingSignal> */
	private void exitSequence__Actuator_Component___ActuatorReceivingSignal_() {
		/* Default exit sequence for state <ActuatorReceivingSignal> */
		exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller_();
		stateVector[0] = State.$NULLSTATE$;
		exitAction__Actuator_Component___ActuatorReceivingSignal_();
	}
	
	/* Default exit sequence for state <Actuating_Device> */
	private void exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device_() {
		/* Default exit sequence for state <Actuating_Device> */
		exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device_();
		stateVector[0] = State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL_;
	}
	
	/* Default exit sequence for state <DeviceFunctioning> */
	private void exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning_() {
		/* Default exit sequence for state <DeviceFunctioning> */
		stateVector[0] = State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE_;
		exitAction__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning_();
	}
	
	/* Default exit sequence for state <Error_Handler> */
	private void exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Error_Handler_() {
		/* Default exit sequence for state <Error_Handler> */
		stateVector[0] = State._ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL_;
	}
	
	/* Default exit sequence for state <off> */
	private void exitSequence__Actuator_Component___off_() {
		/* Default exit sequence for state <off> */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region <Actuator_Component> */
	private void exitSequence__Actuator_Component_() {
		/* Default exit sequence for region <Actuator_Component> */
		switch (stateVector[0]) {
		case _ACTUATOR_COMPONENT___STANDBY_:
			exitSequence__Actuator_Component___Standby_();
			break;
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL_:
			exitSequence__Actuator_Component___ActuatorReceivingSignal_();
			break;
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE_:
			exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device_();
			exitAction__Actuator_Component___ActuatorReceivingSignal_();
			break;
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE___ACTUATOR_ACTUATES_DEVICE___DEVICEFUNCTIONING_:
			exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning_();
			exitAction__Actuator_Component___ActuatorReceivingSignal_();
			break;
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ERROR_HANDLER_:
			exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Error_Handler_();
			exitAction__Actuator_Component___ActuatorReceivingSignal_();
			break;
		case _ACTUATOR_COMPONENT___OFF_:
			exitSequence__Actuator_Component___off_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region <Actuator_Receives_actuatingSignal_From_Controller> */
	private void exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller_() {
		/* Default exit sequence for region <Actuator_Receives_actuatingSignal_From_Controller> */
		switch (stateVector[0]) {
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE_:
			exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device_();
			break;
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE___ACTUATOR_ACTUATES_DEVICE___DEVICEFUNCTIONING_:
			exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning_();
			break;
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ERROR_HANDLER_:
			exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Error_Handler_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region <Actuator_actuates_device> */
	private void exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device_() {
		/* Default exit sequence for region <Actuator_actuates_device> */
		switch (stateVector[0]) {
		case _ACTUATOR_COMPONENT___ACTUATORRECEIVINGSIGNAL___ACTUATOR_RECEIVES_ACTUATINGSIGNAL_FROM_CONTROLLER___ACTUATING_DEVICE___ACTUATOR_ACTUATES_DEVICE___DEVICEFUNCTIONING_:
			exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning_();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react__Actuator_Component___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__Actuator_Component___Standby__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning__default();
	}
	
	private long _Actuator_Component___Standby__react(long transitioned_before) {
		/* The reactions of state <Standby>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getIsTriggered()) {
				exitSequence__Actuator_Component___Standby_();
				enterSequence__Actuator_Component___ActuatorReceivingSignal__default();
				transitioned_after = 0l;
			} else {
				if (off) {
					exitSequence__Actuator_Component___Standby_();
					enterSequence__Actuator_Component___off__default();
					transitioned_after = 0l;
				} else {
					if (timeEvents[0]) {
						exitSequence__Actuator_Component___Standby_();
						timeEvents[0] = false;
						enterSequence__Actuator_Component___Standby__default();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long _Actuator_Component___ActuatorReceivingSignal__react(long transitioned_before) {
		/* The reactions of state <ActuatorReceivingSignal>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (!(getIsTriggered())) {
				exitSequence__Actuator_Component___ActuatorReceivingSignal_();
				enterSequence__Actuator_Component___Standby__default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[1]) {
					exitSequence__Actuator_Component___ActuatorReceivingSignal_();
					timeEvents[1] = false;
					enterSequence__Actuator_Component___ActuatorReceivingSignal__default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long _Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device__react(long transitioned_before) {
		/* The reactions of state <Actuating_Device>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (!(device.getActuated())) {
				exitSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device_();
				enterSequence__Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Error_Handler__default();
				_Actuator_Component___ActuatorReceivingSignal__react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = _Actuator_Component___ActuatorReceivingSignal__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device___Actuator_actuates_device___DeviceFunctioning__react(long transitioned_before) {
		/* The reactions of state <DeviceFunctioning>. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = _Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Actuating_Device__react(transitioned_before);
		return transitioned_after;
	}
	
	private long _Actuator_Component___ActuatorReceivingSignal___Actuator_Receives_actuatingSignal_From_Controller___Error_Handler__react(long transitioned_before) {
		/* The reactions of state <Error_Handler>. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = _Actuator_Component___ActuatorReceivingSignal__react(transitioned_before);
		return transitioned_after;
	}
	
	private long _Actuator_Component___off__react(long transitioned_before) {
		/* The reactions of state <off>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (on) {
				exitSequence__Actuator_Component___off_();
				enterSequence__Actuator_Component___Standby__default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
