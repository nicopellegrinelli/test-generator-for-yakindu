/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;

public class BouncingBall implements ICycleBased {
	public enum State {
		MAIN_REGION_IN_THE_AIR,
		MAIN_REGION_BOUNCE,
		MAIN_REGION_REST,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	public static final double dt = 0.001;
	
	protected double getDt() {
		return dt;
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public BouncingBall() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		
		/* Default init sequence for statechart BouncingBall */
		setH(1l);
		setV(0l);
		setE(0.7);
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		microStep();
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart BouncingBall */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart BouncingBall */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_IN_THE_AIR:
			main_region_In_the_air_react(-1l);
			break;
		case MAIN_REGION_BOUNCE:
			main_region_Bounce_react(-1l);
			break;
		case MAIN_REGION_REST:
			break;
		default:
			break;
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_IN_THE_AIR:
			return stateVector[0] == State.MAIN_REGION_IN_THE_AIR;
		case MAIN_REGION_BOUNCE:
			return stateVector[0] == State.MAIN_REGION_BOUNCE;
		case MAIN_REGION_REST:
			return stateVector[0] == State.MAIN_REGION_REST;
		default:
			return false;
		}
	}
	
	
	private double h;
	
	public double getH() {
		return h;
	}
	
	protected void setH(double value) {
		this.h = value;
	}
	
	private double v;
	
	public double getV() {
		return v;
	}
	
	protected void setV(double value) {
		this.v = value;
	}
	
	public static final double g = 10.0;
	
	public double getG() {
		return g;
	}
	
	public static final double v_min = 0.1;
	
	public double getV_min() {
		return v_min;
	}
	
	private double e;
	
	public double getE() {
		return e;
	}
	
	public void setE(double value) {
		this.e = value;
	}
	
	/* Entry action for state 'In the air'. */
	private void entryAction_main_region_In_the_air() {
		/* Entry action for state 'In the air'. */
		setV((v - (g * dt)));
		setH(((h + ((v * dt))) - ((0.5 * g) * ((dt * dt)))));
	}
	
	/* Entry action for state 'Bounce'. */
	private void entryAction_main_region_Bounce() {
		/* Entry action for state 'Bounce'. */
		setH(0l);
		setV((-(e) * v));
	}
	
	/* Entry action for state 'Rest'. */
	private void entryAction_main_region_Rest() {
		/* Entry action for state 'Rest'. */
		setH(0l);
		setV(0l);
	}
	
	/* 'default' enter sequence for state In the air */
	private void enterSequence_main_region_In_the_air_default() {
		/* 'default' enter sequence for state In the air */
		entryAction_main_region_In_the_air();
		stateVector[0] = State.MAIN_REGION_IN_THE_AIR;
	}
	
	/* 'default' enter sequence for state Bounce */
	private void enterSequence_main_region_Bounce_default() {
		/* 'default' enter sequence for state Bounce */
		entryAction_main_region_Bounce();
		stateVector[0] = State.MAIN_REGION_BOUNCE;
	}
	
	/* 'default' enter sequence for state Rest */
	private void enterSequence_main_region_Rest_default() {
		/* 'default' enter sequence for state Rest */
		entryAction_main_region_Rest();
		stateVector[0] = State.MAIN_REGION_REST;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state In the air */
	private void exitSequence_main_region_In_the_air() {
		/* Default exit sequence for state In the air */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Bounce */
	private void exitSequence_main_region_Bounce() {
		/* Default exit sequence for state Bounce */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Rest */
	private void exitSequence_main_region_Rest() {
		/* Default exit sequence for state Rest */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_IN_THE_AIR:
			exitSequence_main_region_In_the_air();
			break;
		case MAIN_REGION_BOUNCE:
			exitSequence_main_region_Bounce();
			break;
		case MAIN_REGION_REST:
			exitSequence_main_region_Rest();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_In_the_air_default();
	}
	
	private long main_region_In_the_air_react(long transitioned_before) {
		/* The reactions of state In the air. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getH()<=0l) {
				exitSequence_main_region_In_the_air();
				enterSequence_main_region_Bounce_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			setV((v - (g * dt)));
			setH(((h + ((v * dt))) - ((0.5 * g) * ((dt * dt)))));
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Bounce_react(long transitioned_before) {
		/* The reactions of state Bounce. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getV()<getV_min()) {
				exitSequence_main_region_Bounce();
				enterSequence_main_region_Rest_default();
				transitioned_after = 0l;
			} else {
				exitSequence_main_region_Bounce();
				enterSequence_main_region_In_the_air_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
}
