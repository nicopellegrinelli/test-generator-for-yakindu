/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import java.util.LinkedList;
import java.util.Queue;

public class Active_Systems_Counter implements IEventDriven {
	public static class Counter {
		private long activeSystems;
		
		public long getActiveSystems() {
			return activeSystems;
		}
		
		public void setActiveSystems(long value) {
			this.activeSystems = value;
		}
		
		private long inactiveSystems;
		
		public long getInactiveSystems() {
			return inactiveSystems;
		}
		
		public void setInactiveSystems(long value) {
			this.inactiveSystems = value;
		}
		
		private long total;
		
		public long getTotal() {
			return total;
		}
		
		public void setTotal(long value) {
			this.total = value;
		}
		
	}
	
	protected Counter counter;
	
	public enum State {
		MAIN_REGION_STATICUPDATE,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Active_Systems_Counter() {
		counter = new Counter();
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Active_Systems_Counter */
		counter.setActiveSystems(0l);
		counter.setInactiveSystems(0l);
		counter.setTotal(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Active_Systems_Counter */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Active_Systems_Counter */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		increment = false;
		decrement = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_STATICUPDATE:
			main_region_StaticUpdate_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_STATICUPDATE:
			return stateVector[0] == State.MAIN_REGION_STATICUPDATE;
		default:
			return false;
		}
	}
	
	public Counter counter() {
		return counter;
	}
	
	
	private boolean increment;
	
	
	public void raiseIncrement() {
		inEventQueue.add(() -> {
			increment = true;
		});
		runCycle();
	}
	
	private boolean decrement;
	
	
	public void raiseDecrement() {
		inEventQueue.add(() -> {
			decrement = true;
		});
		runCycle();
	}
	
	/* Entry action for state 'StaticUpdate'. */
	private void entryAction_main_region_StaticUpdate() {
		/* Entry action for state 'StaticUpdate'. */
		counter.setInactiveSystems((counter.total - counter.activeSystems));
	}
	
	/* 'default' enter sequence for state StaticUpdate */
	private void enterSequence_main_region_StaticUpdate_default() {
		/* 'default' enter sequence for state StaticUpdate */
		entryAction_main_region_StaticUpdate();
		stateVector[0] = State.MAIN_REGION_STATICUPDATE;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state StaticUpdate */
	private void exitSequence_main_region_StaticUpdate() {
		/* Default exit sequence for state StaticUpdate */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_STATICUPDATE:
			exitSequence_main_region_StaticUpdate();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_StaticUpdate_default();
	}
	
	private long main_region_StaticUpdate_react(long transitioned_before) {
		/* The reactions of state StaticUpdate. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (increment) {
				exitSequence_main_region_StaticUpdate();
				counter.activeSystems++;
				enterSequence_main_region_StaticUpdate_default();
				transitioned_after = 0l;
			} else {
				if (decrement) {
					exitSequence_main_region_StaticUpdate();
					counter.activeSystems--;
					enterSequence_main_region_StaticUpdate_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
