/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class Section implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_INIT,
		MAIN_REGION_INIT_INIT_PROCESS_REQUESTING,
		MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_RELAY,
		MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_WAIT,
		MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_OCCUPATION,
		MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT,
		MAIN_REGION_OPERATING,
		MAIN_REGION_OPERATING_PROCESSING_UNLOCKED,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_ENABLED,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_PASSED,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_LEFT,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_DISABLING,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_ENABLING,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_DISABLED,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_FREE,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_OCCUPIED,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION__FINAL_,
		MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_NEXT_REACHED,
		MAIN_REGION_OPERATING_PROCESSING_PENDING,
		MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_ENABLING,
		MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_DISABLING,
		MAIN_REGION_FAILED,
		MAIN_REGION_WAIT_FOR_START,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean local_leaving;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	private boolean stateConfVectorChanged;
	
	protected boolean getStateConfVectorChanged() {
		return stateConfVectorChanged;
	}
	
	protected void setStateConfVectorChanged(boolean value) {
		this.stateConfVectorChanged = value;
	}
	public Section() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		/* Default init sequence for statechart Section */
		setAuto_off(true);
		setAuto_unlock(true);
		setOccupied(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Section */
		enterSequence_main_region_default();
		do { 
			stateConfVectorChanged = false;
			microStep();
			clearInEvents();
			clearInternalEvents();
		} while (getStateConfVectorChanged());
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Section */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		enable = false;
		disable = false;
		clear = false;
		start = false;
		relaisResponse = false;
		stateResponse = false;
		failed = false;
		next = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
	}
	
	private void clearInternalEvents() {
		local_leaving = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_RELAY:
			transitioned = main_region_Init_Init_Process_Requesting_relais_Relay_react(transitioned);
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_WAIT:
			transitioned = main_region_Init_Init_Process_Requesting_relais_Wait_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_UNLOCKED:
			transitioned = main_region_Operating_Processing_Unlocked_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_ENABLED:
			transitioned = main_region_Operating_Processing_Locked_Route_active_Enabled_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_PASSED:
			transitioned = main_region_Operating_Processing_Locked_Route_active_Passed_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_LEFT:
			transitioned = main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Left_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_DISABLING:
			transitioned = main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Disabling_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_ENABLING:
			transitioned = main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Enabling_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_DISABLED:
			transitioned = main_region_Operating_Processing_Locked_Route_active_Disabled_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_ENABLING:
			transitioned = main_region_Operating_Processing_Pending_Relais_processing_Enabling_react(transitioned);
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_DISABLING:
			transitioned = main_region_Operating_Processing_Pending_Relais_processing_Disabling_react(transitioned);
			break;
		case MAIN_REGION_FAILED:
			transitioned = main_region_Failed_react(transitioned);
			break;
		case MAIN_REGION_WAIT_FOR_START:
			transitioned = main_region_Wait_for_Start_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_OCCUPATION:
				main_region_Init_Init_Process_Requesting_state_Occupation_react(transitioned);
				break;
			case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT:
				main_region_Init_Init_Process_Requesting_state_Wait_react(transitioned);
				break;
			case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_FREE:
				main_region_Operating_Processing_Locked_Occupation_Free_react(transitioned);
				break;
			case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_OCCUPIED:
				main_region_Operating_Processing_Locked_Occupation_Occupied_react(transitioned);
				break;
			case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION__FINAL_:
				main_region_Operating_Processing_Locked_Occupation__final__react(transitioned);
				break;
			case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_NEXT_REACHED:
				main_region_Operating_Processing_Locked_Occupation_Next_Reached_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			do { 
				stateConfVectorChanged = false;
				microStep();
			} while (getStateConfVectorChanged());
			clearInEvents();
			clearInternalEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return true;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_INIT:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_INIT.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT.ordinal();
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_INIT_INIT_PROCESS_REQUESTING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT.ordinal();
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_RELAY:
			return stateVector[0] == State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_RELAY;
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_WAIT:
			return stateVector[0] == State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_WAIT;
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_OCCUPATION:
			return stateVector[1] == State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_OCCUPATION;
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT:
			return stateVector[1] == State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT;
		case MAIN_REGION_OPERATING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_DISABLING.ordinal();
		case MAIN_REGION_OPERATING_PROCESSING_UNLOCKED:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_UNLOCKED;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING_PROCESSING_LOCKED.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_NEXT_REACHED.ordinal();
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_ENABLED:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_ENABLED;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_PASSED:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_PASSED;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_ENABLING.ordinal();
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_LEFT:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_LEFT;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_DISABLING:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_DISABLING;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_ENABLING:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_ENABLING;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_DISABLED:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_DISABLED;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_FREE:
			return stateVector[1] == State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_FREE;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_OCCUPIED:
			return stateVector[1] == State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_OCCUPIED;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION__FINAL_:
			return stateVector[1] == State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION__FINAL_;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_NEXT_REACHED:
			return stateVector[1] == State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_NEXT_REACHED;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OPERATING_PROCESSING_PENDING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_DISABLING.ordinal();
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_ENABLING:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_ENABLING;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_DISABLING:
			return stateVector[0] == State.MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_DISABLING;
		case MAIN_REGION_FAILED:
			return stateVector[0] == State.MAIN_REGION_FAILED;
		case MAIN_REGION_WAIT_FOR_START:
			return stateVector[0] == State.MAIN_REGION_WAIT_FOR_START;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	protected void raiseLocal_leaving() {
		internalEventQueue.add(() -> {
			local_leaving = true;
		});
	}
	
	public interface OperationCallback {
	
		public void inc();
		
		public void dec();
		
		public void off();
		
		public void on();
		
		public void request();
		
		public void passed();
		
		public void free();
		
		public void leftBefore();
		
		public void fail();
		
		public void pending();
		
		public void lock(boolean do_it);
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean enable;
	
	private boolean enableValue;
	
	
	public void raiseEnable(final boolean value) {
		inEventQueue.add(() -> {
			enableValue = value;
			enable = true;
		});
		runCycle();
	}
	protected boolean getEnableValue() {
		if (! enable ) 
			throw new IllegalStateException("Illegal event value access. Event Enable is not raised!");
		return enableValue;
	}
	
	private boolean disable;
	
	
	public void raiseDisable() {
		inEventQueue.add(() -> {
			disable = true;
		});
		runCycle();
	}
	
	private boolean clear;
	
	
	public void raiseClear() {
		inEventQueue.add(() -> {
			clear = true;
		});
		runCycle();
	}
	
	private boolean start;
	
	
	public void raiseStart() {
		inEventQueue.add(() -> {
			start = true;
		});
		runCycle();
	}
	
	private boolean relaisResponse;
	
	
	public void raiseRelaisResponse() {
		inEventQueue.add(() -> {
			relaisResponse = true;
		});
		runCycle();
	}
	
	private boolean stateResponse;
	
	private boolean stateResponseValue;
	
	
	public void raiseStateResponse(final boolean value) {
		inEventQueue.add(() -> {
			stateResponseValue = value;
			stateResponse = true;
		});
		runCycle();
	}
	protected boolean getStateResponseValue() {
		if (! stateResponse ) 
			throw new IllegalStateException("Illegal event value access. Event StateResponse is not raised!");
		return stateResponseValue;
	}
	
	private boolean failed;
	
	
	public void raiseFailed() {
		inEventQueue.add(() -> {
			failed = true;
		});
		runCycle();
	}
	
	private boolean next;
	
	
	public void raiseNext() {
		inEventQueue.add(() -> {
			next = true;
		});
		runCycle();
	}
	
	private boolean started;
	
	
	protected void raiseStarted() {
		started = true;
		startedObservable.next(null);
	}
	
	private Observable<Void> startedObservable = new Observable<Void>();
	
	public Observable<Void> getStarted() {
		return startedObservable;
	}
	
	private boolean stop;
	
	
	protected void raiseStop() {
		stop = true;
		stopObservable.next(null);
	}
	
	private Observable<Void> stopObservable = new Observable<Void>();
	
	public Observable<Void> getStop() {
		return stopObservable;
	}
	
	private boolean entered;
	
	
	protected void raiseEntered() {
		entered = true;
		enteredObservable.next(null);
	}
	
	private Observable<Void> enteredObservable = new Observable<Void>();
	
	public Observable<Void> getEntered() {
		return enteredObservable;
	}
	
	private boolean leaving;
	
	
	protected void raiseLeaving() {
		leaving = true;
		leavingObservable.next(null);
		raiseLocal_leaving();
	}
	
	private Observable<Void> leavingObservable = new Observable<Void>();
	
	public Observable<Void> getLeaving() {
		return leavingObservable;
	}
	
	private boolean left;
	
	
	protected void raiseLeft() {
		left = true;
		leftObservable.next(null);
	}
	
	private Observable<Void> leftObservable = new Observable<Void>();
	
	public Observable<Void> getLeft() {
		return leftObservable;
	}
	
	private boolean tryUnblock;
	
	
	protected void raiseTryUnblock() {
		tryUnblock = true;
		tryUnblockObservable.next(null);
	}
	
	private Observable<Void> tryUnblockObservable = new Observable<Void>();
	
	public Observable<Void> getTryUnblock() {
		return tryUnblockObservable;
	}
	
	private boolean unregister;
	
	
	protected void raiseUnregister() {
		unregister = true;
		unregisterObservable.next(null);
	}
	
	private Observable<Void> unregisterObservable = new Observable<Void>();
	
	public Observable<Void> getUnregister() {
		return unregisterObservable;
	}
	
	public static final long timeout = 500l;
	
	public long getTimeout() {
		return timeout;
	}
	
	private boolean auto_off;
	
	public boolean getAuto_off() {
		return auto_off;
	}
	
	public void setAuto_off(boolean value) {
		this.auto_off = value;
	}
	
	private boolean auto_unlock;
	
	public boolean getAuto_unlock() {
		return auto_unlock;
	}
	
	public void setAuto_unlock(boolean value) {
		this.auto_unlock = value;
	}
	
	private boolean occupied;
	
	public boolean getOccupied() {
		return occupied;
	}
	
	public void setOccupied(boolean value) {
		this.occupied = value;
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_main_region_Init() {
		/* Entry action for state 'Init'. */
		timerService.setTimer(this, 0, getTimeout(), false);
		raiseEntered();
		operationCallback.inc();
	}
	
	/* Entry action for state 'Requesting'. */
	private void entryAction_main_region_Init_Init_Process_Requesting() {
		/* Entry action for state 'Requesting'. */
		operationCallback.pending();
	}
	
	/* Entry action for state 'Relay'. */
	private void entryAction_main_region_Init_Init_Process_Requesting_relais_Relay() {
		/* Entry action for state 'Relay'. */
		operationCallback.off();
	}
	
	/* Entry action for state 'Occupation'. */
	private void entryAction_main_region_Init_Init_Process_Requesting_state_Occupation() {
		/* Entry action for state 'Occupation'. */
		operationCallback.request();
	}
	
	/* Entry action for state 'Unlocked'. */
	private void entryAction_main_region_Operating_Processing_Unlocked() {
		/* Entry action for state 'Unlocked'. */
		operationCallback.free();
		operationCallback.lock(false);
	}
	
	/* Entry action for state 'Locked'. */
	private void entryAction_main_region_Operating_Processing_Locked() {
		/* Entry action for state 'Locked'. */
		operationCallback.lock(true);
	}
	
	/* Entry action for state 'Passed'. */
	private void entryAction_main_region_Operating_Processing_Locked_Route_active_Passed() {
		/* Entry action for state 'Passed'. */
		operationCallback.passed();
		raiseTryUnblock();
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_main_region_Operating_Processing_Locked_Route_active_Waiting() {
		/* Entry action for state 'Waiting'. */
		timerService.setTimer(this, 1, getTimeout(), false);
		operationCallback.inc();
	}
	
	/* Entry action for state 'Left'. */
	private void entryAction_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Left() {
		/* Entry action for state 'Left'. */
		operationCallback.off();
	}
	
	/* Entry action for state 'Disabling'. */
	private void entryAction_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Disabling() {
		/* Entry action for state 'Disabling'. */
		operationCallback.off();
	}
	
	/* Entry action for state 'Enabling'. */
	private void entryAction_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Enabling() {
		/* Entry action for state 'Enabling'. */
		operationCallback.on();
	}
	
	/* Entry action for state 'Occupied'. */
	private void entryAction_main_region_Operating_Processing_Locked_Occupation_Occupied() {
		/* Entry action for state 'Occupied'. */
		raiseEntered();
	}
	
	/* Entry action for state 'Next Reached'. */
	private void entryAction_main_region_Operating_Processing_Locked_Occupation_Next_Reached() {
		/* Entry action for state 'Next Reached'. */
		if (!(getOccupied())) {
			raiseLeaving();
			operationCallback.leftBefore();
		}
	}
	
	/* Entry action for state 'Pending'. */
	private void entryAction_main_region_Operating_Processing_Pending() {
		/* Entry action for state 'Pending'. */
		timerService.setTimer(this, 2, getTimeout(), false);
		operationCallback.inc();
		operationCallback.pending();
	}
	
	/* Entry action for state 'Enabling'. */
	private void entryAction_main_region_Operating_Processing_Pending_Relais_processing_Enabling() {
		/* Entry action for state 'Enabling'. */
		operationCallback.on();
	}
	
	/* Entry action for state 'Disabling'. */
	private void entryAction_main_region_Operating_Processing_Pending_Relais_processing_Disabling() {
		/* Entry action for state 'Disabling'. */
		operationCallback.off();
	}
	
	/* Entry action for state 'Failed'. */
	private void entryAction_main_region_Failed() {
		/* Entry action for state 'Failed'. */
		operationCallback.fail();
		raiseStop();
	}
	
	/* Exit action for state 'Init'. */
	private void exitAction_main_region_Init() {
		/* Exit action for state 'Init'. */
		timerService.unsetTimer(this, 0);
		operationCallback.dec();
	}
	
	/* Exit action for state 'Locked'. */
	private void exitAction_main_region_Operating_Processing_Locked() {
		/* Exit action for state 'Locked'. */
		raiseUnregister();
	}
	
	/* Exit action for state 'Waiting'. */
	private void exitAction_main_region_Operating_Processing_Locked_Route_active_Waiting() {
		/* Exit action for state 'Waiting'. */
		timerService.unsetTimer(this, 1);
		operationCallback.dec();
	}
	
	/* Exit action for state 'Pending'. */
	private void exitAction_main_region_Operating_Processing_Pending() {
		/* Exit action for state 'Pending'. */
		timerService.unsetTimer(this, 2);
		operationCallback.dec();
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Init_default() {
		/* 'default' enter sequence for state Init */
		entryAction_main_region_Init();
		enterSequence_main_region_Init_Init_Process_default();
	}
	
	/* 'default' enter sequence for state Relay */
	private void enterSequence_main_region_Init_Init_Process_Requesting_relais_Relay_default() {
		/* 'default' enter sequence for state Relay */
		entryAction_main_region_Init_Init_Process_Requesting_relais_Relay();
		stateVector[0] = State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_RELAY;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Wait */
	private void enterSequence_main_region_Init_Init_Process_Requesting_relais_Wait_default() {
		/* 'default' enter sequence for state Wait */
		stateVector[0] = State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_WAIT;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Occupation */
	private void enterSequence_main_region_Init_Init_Process_Requesting_state_Occupation_default() {
		/* 'default' enter sequence for state Occupation */
		entryAction_main_region_Init_Init_Process_Requesting_state_Occupation();
		stateVector[1] = State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_OCCUPATION;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Wait */
	private void enterSequence_main_region_Init_Init_Process_Requesting_state_Wait_default() {
		/* 'default' enter sequence for state Wait */
		stateVector[1] = State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Operating */
	private void enterSequence_main_region_Operating_default() {
		/* 'default' enter sequence for state Operating */
		enterSequence_main_region_Operating_Processing_default();
	}
	
	/* 'default' enter sequence for state Unlocked */
	private void enterSequence_main_region_Operating_Processing_Unlocked_default() {
		/* 'default' enter sequence for state Unlocked */
		entryAction_main_region_Operating_Processing_Unlocked();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_UNLOCKED;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Enabled */
	private void enterSequence_main_region_Operating_Processing_Locked_Route_active_Enabled_default() {
		/* 'default' enter sequence for state Enabled */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_ENABLED;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Passed */
	private void enterSequence_main_region_Operating_Processing_Locked_Route_active_Passed_default() {
		/* 'default' enter sequence for state Passed */
		entryAction_main_region_Operating_Processing_Locked_Route_active_Passed();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_PASSED;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Left */
	private void enterSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Left_default() {
		/* 'default' enter sequence for state Left */
		entryAction_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Left();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_LEFT;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Disabling */
	private void enterSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Disabling_default() {
		/* 'default' enter sequence for state Disabling */
		entryAction_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Disabling();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_DISABLING;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Enabling */
	private void enterSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Enabling_default() {
		/* 'default' enter sequence for state Enabling */
		entryAction_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Enabling();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_ENABLING;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Disabled */
	private void enterSequence_main_region_Operating_Processing_Locked_Route_active_Disabled_default() {
		/* 'default' enter sequence for state Disabled */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_DISABLED;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Free */
	private void enterSequence_main_region_Operating_Processing_Locked_Occupation_Free_default() {
		/* 'default' enter sequence for state Free */
		stateVector[1] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_FREE;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Occupied */
	private void enterSequence_main_region_Operating_Processing_Locked_Occupation_Occupied_default() {
		/* 'default' enter sequence for state Occupied */
		entryAction_main_region_Operating_Processing_Locked_Occupation_Occupied();
		stateVector[1] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_OCCUPIED;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence_main_region_Operating_Processing_Locked_Occupation__final__default() {
		/* Default enter sequence for final state */
		stateVector[1] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION__FINAL_;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Next Reached */
	private void enterSequence_main_region_Operating_Processing_Locked_Occupation_Next_Reached_default() {
		/* 'default' enter sequence for state Next Reached */
		entryAction_main_region_Operating_Processing_Locked_Occupation_Next_Reached();
		stateVector[1] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_NEXT_REACHED;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Enabling */
	private void enterSequence_main_region_Operating_Processing_Pending_Relais_processing_Enabling_default() {
		/* 'default' enter sequence for state Enabling */
		entryAction_main_region_Operating_Processing_Pending_Relais_processing_Enabling();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_ENABLING;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Disabling */
	private void enterSequence_main_region_Operating_Processing_Pending_Relais_processing_Disabling_default() {
		/* 'default' enter sequence for state Disabling */
		entryAction_main_region_Operating_Processing_Pending_Relais_processing_Disabling();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_DISABLING;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Failed */
	private void enterSequence_main_region_Failed_default() {
		/* 'default' enter sequence for state Failed */
		entryAction_main_region_Failed();
		stateVector[0] = State.MAIN_REGION_FAILED;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state Wait for Start */
	private void enterSequence_main_region_Wait_for_Start_default() {
		/* 'default' enter sequence for state Wait for Start */
		stateVector[0] = State.MAIN_REGION_WAIT_FOR_START;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Init Process */
	private void enterSequence_main_region_Init_Init_Process_default() {
		/* 'default' enter sequence for region Init Process */
		react_main_region_Init_Init_Process__entry_Default();
	}
	
	/* 'default' enter sequence for region Processing */
	private void enterSequence_main_region_Operating_Processing_default() {
		/* 'default' enter sequence for region Processing */
		react_main_region_Operating_Processing__entry_Default();
	}
	
	/* 'default' enter sequence for region Occupation */
	private void enterSequence_main_region_Operating_Processing_Locked_Occupation_default() {
		/* 'default' enter sequence for region Occupation */
		react_main_region_Operating_Processing_Locked_Occupation__entry_Default();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Init() {
		/* Default exit sequence for state Init */
		exitSequence_main_region_Init_Init_Process();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		exitAction_main_region_Init();
	}
	
	/* Default exit sequence for state Requesting */
	private void exitSequence_main_region_Init_Init_Process_Requesting() {
		/* Default exit sequence for state Requesting */
		exitSequence_main_region_Init_Init_Process_Requesting_relais();
		exitSequence_main_region_Init_Init_Process_Requesting_state();
		stateVector[0] = State.MAIN_REGION_INIT;
		stateVector[1] = State.MAIN_REGION_INIT;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Relay */
	private void exitSequence_main_region_Init_Init_Process_Requesting_relais_Relay() {
		/* Default exit sequence for state Relay */
		stateVector[0] = State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Wait */
	private void exitSequence_main_region_Init_Init_Process_Requesting_relais_Wait() {
		/* Default exit sequence for state Wait */
		stateVector[0] = State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Occupation */
	private void exitSequence_main_region_Init_Init_Process_Requesting_state_Occupation() {
		/* Default exit sequence for state Occupation */
		stateVector[1] = State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Wait */
	private void exitSequence_main_region_Init_Init_Process_Requesting_state_Wait() {
		/* Default exit sequence for state Wait */
		stateVector[1] = State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Operating */
	private void exitSequence_main_region_Operating() {
		/* Default exit sequence for state Operating */
		exitSequence_main_region_Operating_Processing();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Unlocked */
	private void exitSequence_main_region_Operating_Processing_Unlocked() {
		/* Default exit sequence for state Unlocked */
		stateVector[0] = State.MAIN_REGION_OPERATING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Locked */
	private void exitSequence_main_region_Operating_Processing_Locked() {
		/* Default exit sequence for state Locked */
		exitSequence_main_region_Operating_Processing_Locked_Route_active();
		exitSequence_main_region_Operating_Processing_Locked_Occupation();
		stateVector[0] = State.MAIN_REGION_OPERATING;
		stateVector[1] = State.MAIN_REGION_OPERATING;
		stateConfVectorPosition = 1;
		exitAction_main_region_Operating_Processing_Locked();
	}
	
	/* Default exit sequence for state Enabled */
	private void exitSequence_main_region_Operating_Processing_Locked_Route_active_Enabled() {
		/* Default exit sequence for state Enabled */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Passed */
	private void exitSequence_main_region_Operating_Processing_Locked_Route_active_Passed() {
		/* Default exit sequence for state Passed */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting() {
		/* Default exit sequence for state Waiting */
		exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing();
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED;
		stateConfVectorPosition = 0;
		exitAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
	}
	
	/* Default exit sequence for state Left */
	private void exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Left() {
		/* Default exit sequence for state Left */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Disabling */
	private void exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Disabling() {
		/* Default exit sequence for state Disabling */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Enabling */
	private void exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Enabling() {
		/* Default exit sequence for state Enabling */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Disabled */
	private void exitSequence_main_region_Operating_Processing_Locked_Route_active_Disabled() {
		/* Default exit sequence for state Disabled */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Free */
	private void exitSequence_main_region_Operating_Processing_Locked_Occupation_Free() {
		/* Default exit sequence for state Free */
		stateVector[1] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Occupied */
	private void exitSequence_main_region_Operating_Processing_Locked_Occupation_Occupied() {
		/* Default exit sequence for state Occupied */
		stateVector[1] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region_Operating_Processing_Locked_Occupation__final_() {
		/* Default exit sequence for final state. */
		stateVector[1] = State.MAIN_REGION_OPERATING_PROCESSING_LOCKED;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Pending */
	private void exitSequence_main_region_Operating_Processing_Pending() {
		/* Default exit sequence for state Pending */
		exitSequence_main_region_Operating_Processing_Pending_Relais_processing();
		stateVector[0] = State.MAIN_REGION_OPERATING;
		stateConfVectorPosition = 0;
		exitAction_main_region_Operating_Processing_Pending();
	}
	
	/* Default exit sequence for state Enabling */
	private void exitSequence_main_region_Operating_Processing_Pending_Relais_processing_Enabling() {
		/* Default exit sequence for state Enabling */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_PENDING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Disabling */
	private void exitSequence_main_region_Operating_Processing_Pending_Relais_processing_Disabling() {
		/* Default exit sequence for state Disabling */
		stateVector[0] = State.MAIN_REGION_OPERATING_PROCESSING_PENDING;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Failed */
	private void exitSequence_main_region_Failed() {
		/* Default exit sequence for state Failed */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Wait for Start */
	private void exitSequence_main_region_Wait_for_Start() {
		/* Default exit sequence for state Wait for Start */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_RELAY:
			exitSequence_main_region_Init_Init_Process_Requesting_relais_Relay();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_WAIT:
			exitSequence_main_region_Init_Init_Process_Requesting_relais_Wait();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_UNLOCKED:
			exitSequence_main_region_Operating_Processing_Unlocked();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_ENABLED:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Enabled();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_PASSED:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Passed();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_LEFT:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Left();
			exitAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_DISABLING:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Disabling();
			exitAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_ENABLING:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Enabling();
			exitAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_DISABLED:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Disabled();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING:
			exitSequence_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_ENABLING:
			exitSequence_main_region_Operating_Processing_Pending_Relais_processing_Enabling();
			exitAction_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_DISABLING:
			exitSequence_main_region_Operating_Processing_Pending_Relais_processing_Disabling();
			exitAction_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_FAILED:
			exitSequence_main_region_Failed();
			break;
		case MAIN_REGION_WAIT_FOR_START:
			exitSequence_main_region_Wait_for_Start();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_OCCUPATION:
			exitSequence_main_region_Init_Init_Process_Requesting_state_Occupation();
			exitAction_main_region_Init();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT:
			exitSequence_main_region_Init_Init_Process_Requesting_state_Wait();
			exitAction_main_region_Init();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_FREE:
			exitSequence_main_region_Operating_Processing_Locked_Occupation_Free();
			exitAction_main_region_Operating_Processing_Locked();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_OCCUPIED:
			exitSequence_main_region_Operating_Processing_Locked_Occupation_Occupied();
			exitAction_main_region_Operating_Processing_Locked();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION__FINAL_:
			exitSequence_main_region_Operating_Processing_Locked_Occupation__final_();
			exitAction_main_region_Operating_Processing_Locked();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_NEXT_REACHED:
			exitAction_main_region_Operating_Processing_Locked();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Init Process */
	private void exitSequence_main_region_Init_Init_Process() {
		/* Default exit sequence for region Init Process */
		switch (stateVector[0]) {
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_RELAY:
			exitSequence_main_region_Init_Init_Process_Requesting_relais_Relay();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_WAIT:
			exitSequence_main_region_Init_Init_Process_Requesting_relais_Wait();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_OCCUPATION:
			exitSequence_main_region_Init_Init_Process_Requesting_state_Occupation();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT:
			exitSequence_main_region_Init_Init_Process_Requesting_state_Wait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region relais */
	private void exitSequence_main_region_Init_Init_Process_Requesting_relais() {
		/* Default exit sequence for region relais */
		switch (stateVector[0]) {
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_RELAY:
			exitSequence_main_region_Init_Init_Process_Requesting_relais_Relay();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_WAIT:
			exitSequence_main_region_Init_Init_Process_Requesting_relais_Wait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region state */
	private void exitSequence_main_region_Init_Init_Process_Requesting_state() {
		/* Default exit sequence for region state */
		switch (stateVector[1]) {
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_OCCUPATION:
			exitSequence_main_region_Init_Init_Process_Requesting_state_Occupation();
			break;
		case MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT:
			exitSequence_main_region_Init_Init_Process_Requesting_state_Wait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Processing */
	private void exitSequence_main_region_Operating_Processing() {
		/* Default exit sequence for region Processing */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_PROCESSING_UNLOCKED:
			exitSequence_main_region_Operating_Processing_Unlocked();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_ENABLED:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Enabled();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_PASSED:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Passed();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_LEFT:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Left();
			exitAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_DISABLING:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Disabling();
			exitAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_ENABLING:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Enabling();
			exitAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_DISABLED:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Disabled();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING:
			exitSequence_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_ENABLING:
			exitSequence_main_region_Operating_Processing_Pending_Relais_processing_Enabling();
			exitAction_main_region_Operating_Processing_Pending();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_DISABLING:
			exitSequence_main_region_Operating_Processing_Pending_Relais_processing_Disabling();
			exitAction_main_region_Operating_Processing_Pending();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_FREE:
			exitSequence_main_region_Operating_Processing_Locked_Occupation_Free();
			exitAction_main_region_Operating_Processing_Locked();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_OCCUPIED:
			exitSequence_main_region_Operating_Processing_Locked_Occupation_Occupied();
			exitAction_main_region_Operating_Processing_Locked();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION__FINAL_:
			exitSequence_main_region_Operating_Processing_Locked_Occupation__final_();
			exitAction_main_region_Operating_Processing_Locked();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_NEXT_REACHED:
			exitAction_main_region_Operating_Processing_Locked();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Route active */
	private void exitSequence_main_region_Operating_Processing_Locked_Route_active() {
		/* Default exit sequence for region Route active */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_ENABLED:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Enabled();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_PASSED:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Passed();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_LEFT:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Left();
			exitAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_DISABLING:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Disabling();
			exitAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_ENABLING:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Enabling();
			exitAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_DISABLED:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Disabled();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Relais processing */
	private void exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing() {
		/* Default exit sequence for region Relais processing */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_LEFT:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Left();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_DISABLING:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Disabling();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_ROUTE_ACTIVE_WAITING_RELAIS_PROCESSING_ENABLING:
			exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Enabling();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Occupation */
	private void exitSequence_main_region_Operating_Processing_Locked_Occupation() {
		/* Default exit sequence for region Occupation */
		switch (stateVector[1]) {
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_FREE:
			exitSequence_main_region_Operating_Processing_Locked_Occupation_Free();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION_OCCUPIED:
			exitSequence_main_region_Operating_Processing_Locked_Occupation_Occupied();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_LOCKED_OCCUPATION__FINAL_:
			exitSequence_main_region_Operating_Processing_Locked_Occupation__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Relais processing */
	private void exitSequence_main_region_Operating_Processing_Pending_Relais_processing() {
		/* Default exit sequence for region Relais processing */
		switch (stateVector[0]) {
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_ENABLING:
			exitSequence_main_region_Operating_Processing_Pending_Relais_processing_Enabling();
			break;
		case MAIN_REGION_OPERATING_PROCESSING_PENDING_RELAIS_PROCESSING_DISABLING:
			exitSequence_main_region_Operating_Processing_Pending_Relais_processing_Disabling();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Operating_Processing_Locked_Route_active__choice_0() {
		/* The reactions of state null. */
		if (getAuto_unlock()) {
			exitSequence_main_region_Operating_Processing_Locked();
			enterSequence_main_region_Operating_Processing_Unlocked_default();
			main_region_Operating_react(0l);
		} else {
			enterSequence_main_region_Operating_Processing_Locked_Route_active_Passed_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Operating_Processing_Locked_Occupation__choice_0() {
		/* The reactions of state null. */
		if (getOccupied()) {
			enterSequence_main_region_Operating_Processing_Locked_Occupation_Occupied_default();
		} else {
			enterSequence_main_region_Operating_Processing_Locked_Occupation_Free_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Wait_for_Start_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Init_Init_Process__entry_Default() {
		/* Default react sequence for initial entry  */
		react_main_region_Init_Init_Process__sync1();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Operating_Processing__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Operating_Processing_Unlocked_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Operating_Processing_Locked_Occupation__entry_Default() {
		/* Default react sequence for initial entry  */
		react_main_region_Operating_Processing_Locked_Occupation__choice_0();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Init_Init_Process__sync0() {
		/* The reactions of state null. */
		exitSequence_main_region_Init();
		raiseStarted();
		enterSequence_main_region_Operating_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Init_Init_Process__sync1() {
		/* The reactions of state null. */
		entryAction_main_region_Init_Init_Process_Requesting();
		enterSequence_main_region_Init_Init_Process_Requesting_relais_Relay_default();
		enterSequence_main_region_Init_Init_Process_Requesting_state_Occupation_default();
	}
	
	private long main_region_Init_react(long transitioned_before) {
		/* The reactions of state Init. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_Init();
				timeEvents[0] = false;
				enterSequence_main_region_Failed_default();
				transitioned_after = 1l;
			} else {
				if (failed) {
					exitSequence_main_region_Init();
					enterSequence_main_region_Failed_default();
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Init_Init_Process_Requesting_react(long transitioned_before) {
		/* The reactions of state Requesting. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Init_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Init_Init_Process_Requesting_relais_Relay_react(long transitioned_before) {
		/* The reactions of state Relay. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (relaisResponse) {
				exitSequence_main_region_Init_Init_Process_Requesting_relais_Relay();
				enterSequence_main_region_Init_Init_Process_Requesting_relais_Wait_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Init_Init_Process_Requesting_relais_Wait_react(long transitioned_before) {
		/* The reactions of state Wait. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (isStateActive(State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_STATE_WAIT)) {
				exitSequence_main_region_Init_Init_Process_Requesting();
				react_main_region_Init_Init_Process__sync0();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Init_Init_Process_Requesting_state_Occupation_react(long transitioned_before) {
		/* The reactions of state Occupation. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (stateResponse) {
				exitSequence_main_region_Init_Init_Process_Requesting_state_Occupation();
				setOccupied(getStateResponseValue());
				enterSequence_main_region_Init_Init_Process_Requesting_state_Wait_default();
				main_region_Init_Init_Process_Requesting_react(0l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Init_Init_Process_Requesting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Init_Init_Process_Requesting_state_Wait_react(long transitioned_before) {
		/* The reactions of state Wait. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (isStateActive(State.MAIN_REGION_INIT_INIT_PROCESS_REQUESTING_RELAIS_WAIT)) {
				exitSequence_main_region_Init_Init_Process_Requesting();
				react_main_region_Init_Init_Process__sync0();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Init_Init_Process_Requesting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_react(long transitioned_before) {
		/* The reactions of state Operating. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (failed) {
				exitSequence_main_region_Operating();
				enterSequence_main_region_Failed_default();
				transitioned_after = 1l;
			} else {
				if (start) {
					exitSequence_main_region_Operating();
					enterSequence_main_region_Init_default();
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (stateResponse) {
				setOccupied(getStateResponseValue());
			}
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Unlocked_react(long transitioned_before) {
		/* The reactions of state Unlocked. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((enable) && (getEnableValue()))) {
				exitSequence_main_region_Operating_Processing_Unlocked();
				entryAction_main_region_Operating_Processing_Pending();
				enterSequence_main_region_Operating_Processing_Pending_Relais_processing_Enabling_default();
				main_region_Operating_react(0l);
				transitioned_after = 0l;
			} else {
				if (((enable) && (!(getEnableValue())))) {
					exitSequence_main_region_Operating_Processing_Unlocked();
					entryAction_main_region_Operating_Processing_Pending();
					enterSequence_main_region_Operating_Processing_Pending_Relais_processing_Disabling_default();
					main_region_Operating_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Locked_react(long transitioned_before) {
		/* The reactions of state Locked. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Operating_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Locked_Route_active_Enabled_react(long transitioned_before) {
		/* The reactions of state Enabled. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((local_leaving) && (getAuto_off()))) {
				exitSequence_main_region_Operating_Processing_Locked_Route_active_Enabled();
				entryAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
				enterSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Left_default();
				transitioned_after = 0l;
			} else {
				if (disable) {
					exitSequence_main_region_Operating_Processing_Locked_Route_active_Enabled();
					entryAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
					enterSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Disabling_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Locked_Route_active_Passed_react(long transitioned_before) {
		/* The reactions of state Passed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (disable) {
				exitSequence_main_region_Operating_Processing_Locked();
				enterSequence_main_region_Operating_Processing_Unlocked_default();
				main_region_Operating_react(0l);
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Locked_Route_active_Waiting_react(long transitioned_before) {
		/* The reactions of state Waiting. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Operating();
				timeEvents[1] = false;
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Left_react(long transitioned_before) {
		/* The reactions of state Left. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (relaisResponse) {
				exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting();
				raiseLeft();
				react_main_region_Operating_Processing_Locked_Route_active__choice_0();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Locked_Route_active_Waiting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Disabling_react(long transitioned_before) {
		/* The reactions of state Disabling. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (relaisResponse) {
				exitSequence_main_region_Operating_Processing_Locked();
				enterSequence_main_region_Operating_Processing_Unlocked_default();
				main_region_Operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Locked_Route_active_Waiting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Enabling_react(long transitioned_before) {
		/* The reactions of state Enabling. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (relaisResponse) {
				exitSequence_main_region_Operating_Processing_Locked_Route_active_Waiting();
				enterSequence_main_region_Operating_Processing_Locked_Route_active_Enabled_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Locked_Route_active_Waiting_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Locked_Route_active_Disabled_react(long transitioned_before) {
		/* The reactions of state Disabled. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((enable) && (getEnableValue()))) {
				exitSequence_main_region_Operating_Processing_Locked_Route_active_Disabled();
				entryAction_main_region_Operating_Processing_Locked_Route_active_Waiting();
				enterSequence_main_region_Operating_Processing_Locked_Route_active_Waiting_Relais_processing_Enabling_default();
				transitioned_after = 0l;
			} else {
				if (disable) {
					exitSequence_main_region_Operating_Processing_Locked();
					enterSequence_main_region_Operating_Processing_Unlocked_default();
					main_region_Operating_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Locked_Occupation_Free_react(long transitioned_before) {
		/* The reactions of state Free. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (((stateResponse) && (getStateResponseValue()))) {
				exitSequence_main_region_Operating_Processing_Locked_Occupation_Free();
				enterSequence_main_region_Operating_Processing_Locked_Occupation_Occupied_default();
				main_region_Operating_Processing_Locked_react(0l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Locked_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Locked_Occupation_Occupied_react(long transitioned_before) {
		/* The reactions of state Occupied. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (next) {
				exitSequence_main_region_Operating_Processing_Locked_Occupation_Occupied();
				enterSequence_main_region_Operating_Processing_Locked_Occupation_Next_Reached_default();
				main_region_Operating_Processing_Locked_react(0l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Locked_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Locked_Occupation__final__react(long transitioned_before) {
		/* The reactions of state null. */
		return main_region_Operating_Processing_Locked_react(transitioned_before);
	}
	
	private long main_region_Operating_Processing_Locked_Occupation_Next_Reached_react(long transitioned_before) {
		/* The reactions of state Next Reached. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (((stateResponse) && (!(getStateResponseValue())))) {
				raiseLeaving();
				enterSequence_main_region_Operating_Processing_Locked_Occupation__final__default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Locked_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Pending_react(long transitioned_before) {
		/* The reactions of state Pending. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_main_region_Operating();
				timeEvents[2] = false;
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Pending_Relais_processing_Enabling_react(long transitioned_before) {
		/* The reactions of state Enabling. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (relaisResponse) {
				exitSequence_main_region_Operating_Processing_Pending();
				entryAction_main_region_Operating_Processing_Locked();
				enterSequence_main_region_Operating_Processing_Locked_Route_active_Enabled_default();
				enterSequence_main_region_Operating_Processing_Locked_Occupation_default();
				main_region_Operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Pending_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_Processing_Pending_Relais_processing_Disabling_react(long transitioned_before) {
		/* The reactions of state Disabling. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (relaisResponse) {
				exitSequence_main_region_Operating_Processing_Pending();
				entryAction_main_region_Operating_Processing_Locked();
				enterSequence_main_region_Operating_Processing_Locked_Route_active_Disabled_default();
				enterSequence_main_region_Operating_Processing_Locked_Occupation_default();
				main_region_Operating_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Operating_Processing_Pending_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Failed_react(long transitioned_before) {
		/* The reactions of state Failed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (clear) {
				exitSequence_main_region_Failed();
				enterSequence_main_region_Wait_for_Start_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Wait_for_Start_react(long transitioned_before) {
		/* The reactions of state Wait for Start. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (start) {
				exitSequence_main_region_Wait_for_Start();
				enterSequence_main_region_Init_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
