/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observer;
import java.util.LinkedList;
import java.util.Queue;
import statechart._light;

public class Light_controller implements ITimed, IEventDriven {
	public static class User {
		private Light_controller parent;
		
		public User(Light_controller parent) {
			this.parent = parent;
		}
		private boolean switch_on;
		
		
		public void raiseSwitch_on() {
			parent.inEventQueue.add(() -> {
				switch_on = true;
			});
			parent.runCycle();
		}
		
		private boolean switch_off;
		
		
		public void raiseSwitch_off() {
			parent.inEventQueue.add(() -> {
				switch_off = true;
			});
			parent.runCycle();
		}
		
		private boolean blink_mode;
		
		
		public void raiseBlink_mode() {
			parent.inEventQueue.add(() -> {
				blink_mode = true;
			});
			parent.runCycle();
		}
		
	}
	
	protected User user;
	
	public enum State {
		MAIN_REGION_OFF,
		MAIN_REGION_ON,
		MAIN_REGION_ON_R1_REGULARMODE,
		MAIN_REGION_ON_R1_BLINKMODE,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean light1_brightness_changed;
	
	private long light1_brightness_changedValue;
	private boolean light2_brightness_changed;
	
	private long light2_brightness_changedValue;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Light_controller() {
		user = new User(this);
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart light_controller */
		setLight1(null);
		setLight2(null);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart light_controller */
		/* Entry action for statechart 'light_controller'. */
		getLight1().enter();
		getLight2().enter();
		light1.setMax_brightness(8l);
		light2.setMax_brightness(4l);
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart light_controller */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		user.switch_on = false;
		user.switch_off = false;
		user.blink_mode = false;
		light1_brightness_changed = false;
		light2_brightness_changed = false;
		timeEvents[0] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_OFF:
			main_region_Off_react(-1l);
			break;
		case MAIN_REGION_ON_R1_REGULARMODE:
			main_region_On_r1_RegularMode_react(-1l);
			break;
		case MAIN_REGION_ON_R1_BLINKMODE:
			main_region_On_r1_BlinkMode_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_OFF:
			return stateVector[0] == State.MAIN_REGION_OFF;
		case MAIN_REGION_ON:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_ON.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_ON_R1_BLINKMODE.ordinal();
		case MAIN_REGION_ON_R1_REGULARMODE:
			return stateVector[0] == State.MAIN_REGION_ON_R1_REGULARMODE;
		case MAIN_REGION_ON_R1_BLINKMODE:
			return stateVector[0] == State.MAIN_REGION_ON_R1_BLINKMODE;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public User user() {
		return user;
	}
	
	
	protected void raiseLight1_brightness_changed(final long value) {
		inEventQueue.add(() -> {
			light1_brightness_changedValue = value;
			light1_brightness_changed = true;
		});
		runCycle();
	}
	protected long getLight1_brightness_changedValue() {
		if (! light1_brightness_changed ) 
			throw new IllegalStateException("Illegal event value access. Event Light1_brightness_changed is not raised!");
		return light1_brightness_changedValue;
	}
	
	protected void raiseLight2_brightness_changed(final long value) {
		inEventQueue.add(() -> {
			light2_brightness_changedValue = value;
			light2_brightness_changed = true;
		});
		runCycle();
	}
	protected long getLight2_brightness_changedValue() {
		if (! light2_brightness_changed ) 
			throw new IllegalStateException("Illegal event value access. Event Light2_brightness_changed is not raised!");
		return light2_brightness_changedValue;
	}
	
	private _light light1;
	
	private Observer<Long> light1_brightness_changed_observer = new Observer<Long>() {
		@Override
		public void next(Long value) {
			raiseLight1_brightness_changed(value);
		}
	};
	
	
	public _light getLight1() {
		return light1;
	}
	
	public void setLight1(_light value) {
		if (this.light1 != null) {
			this.light1.getBrightness_changed().unsubscribe(light1_brightness_changed_observer);
		}
		
		this.light1 = value;
		
		if (this.light1 != null) {
			this.light1.getBrightness_changed().subscribe(light1_brightness_changed_observer);
		}
	}
	
	private _light light2;
	
	private Observer<Long> light2_brightness_changed_observer = new Observer<Long>() {
		@Override
		public void next(Long value) {
			raiseLight2_brightness_changed(value);
		}
	};
	
	
	public _light getLight2() {
		return light2;
	}
	
	public void setLight2(_light value) {
		if (this.light2 != null) {
			this.light2.getBrightness_changed().unsubscribe(light2_brightness_changed_observer);
		}
		
		this.light2 = value;
		
		if (this.light2 != null) {
			this.light2.getBrightness_changed().subscribe(light2_brightness_changed_observer);
		}
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_main_region_Off() {
		/* Entry action for state 'Off'. */
		getLight1().raiseOff();
		getLight2().raiseOff();
	}
	
	/* Entry action for state 'On'. */
	private void entryAction_main_region_On() {
		/* Entry action for state 'On'. */
		getLight1().raiseOn();
		getLight2().raiseOn();
	}
	
	/* Entry action for state 'BlinkMode'. */
	private void entryAction_main_region_On_r1_BlinkMode() {
		/* Entry action for state 'BlinkMode'. */
		timerService.setTimer(this, 0, 200l, true);
		getLight1().raiseOff();
		getLight2().raiseOff();
	}
	
	/* Exit action for state 'BlinkMode'. */
	private void exitAction_main_region_On_r1_BlinkMode() {
		/* Exit action for state 'BlinkMode'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_region_Off_default() {
		/* 'default' enter sequence for state Off */
		entryAction_main_region_Off();
		stateVector[0] = State.MAIN_REGION_OFF;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_main_region_On_default() {
		/* 'default' enter sequence for state On */
		entryAction_main_region_On();
		enterSequence_main_region_On_r1_default();
	}
	
	/* 'default' enter sequence for state RegularMode */
	private void enterSequence_main_region_On_r1_RegularMode_default() {
		/* 'default' enter sequence for state RegularMode */
		stateVector[0] = State.MAIN_REGION_ON_R1_REGULARMODE;
	}
	
	/* 'default' enter sequence for state BlinkMode */
	private void enterSequence_main_region_On_r1_BlinkMode_default() {
		/* 'default' enter sequence for state BlinkMode */
		entryAction_main_region_On_r1_BlinkMode();
		stateVector[0] = State.MAIN_REGION_ON_R1_BLINKMODE;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_On_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_On_r1__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_region_Off() {
		/* Default exit sequence for state Off */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_main_region_On() {
		/* Default exit sequence for state On */
		exitSequence_main_region_On_r1();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state RegularMode */
	private void exitSequence_main_region_On_r1_RegularMode() {
		/* Default exit sequence for state RegularMode */
		stateVector[0] = State.MAIN_REGION_ON;
	}
	
	/* Default exit sequence for state BlinkMode */
	private void exitSequence_main_region_On_r1_BlinkMode() {
		/* Default exit sequence for state BlinkMode */
		stateVector[0] = State.MAIN_REGION_ON;
		exitAction_main_region_On_r1_BlinkMode();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_OFF:
			exitSequence_main_region_Off();
			break;
		case MAIN_REGION_ON:
			exitSequence_main_region_On();
			break;
		case MAIN_REGION_ON_R1_REGULARMODE:
			exitSequence_main_region_On_r1_RegularMode();
			break;
		case MAIN_REGION_ON_R1_BLINKMODE:
			exitSequence_main_region_On_r1_BlinkMode();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_On_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_ON_R1_REGULARMODE:
			exitSequence_main_region_On_r1_RegularMode();
			break;
		case MAIN_REGION_ON_R1_BLINKMODE:
			exitSequence_main_region_On_r1_BlinkMode();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_On_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_On_r1_RegularMode_default();
	}
	
	private long main_region_Off_react(long transitioned_before) {
		/* The reactions of state Off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (user.switch_on) {
				exitSequence_main_region_Off();
				enterSequence_main_region_On_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_On_react(long transitioned_before) {
		/* The reactions of state On. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (user.switch_off) {
				exitSequence_main_region_On();
				enterSequence_main_region_Off_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_On_r1_RegularMode_react(long transitioned_before) {
		/* The reactions of state RegularMode. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (user.blink_mode) {
				exitSequence_main_region_On_r1_RegularMode();
				enterSequence_main_region_On_r1_BlinkMode_default();
				main_region_On_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (user.switch_on) {
				getLight1().raiseOn();
				getLight2().raiseOn();
			}
			transitioned_after = main_region_On_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_On_r1_BlinkMode_react(long transitioned_before) {
		/* The reactions of state BlinkMode. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if ((user.switch_on || user.blink_mode)) {
				exitSequence_main_region_On_r1_BlinkMode();
				enterSequence_main_region_On_r1_RegularMode_default();
				main_region_On_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (timeEvents[0]) {
				getLight1().raiseOn();
				getLight2().raiseOn();
			}
			if (((light1_brightness_changed) && (getLight1_brightness_changedValue()==getLight1().getMax_brightness()))) {
				getLight1().raiseOff();
			}
			if (((light2_brightness_changed) && (getLight2_brightness_changedValue()==getLight2().getMax_brightness()))) {
				getLight2().raiseOff();
			}
			transitioned_after = main_region_On_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
