/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class Signal implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_IDLE,
		MAIN_REGION_TURNING,
		MAIN_REGION_TURNING_TURN_PROCESSING_PENDING,
		MAIN_REGION_TURNING_TURN_PROCESSING_SEND,
		MAIN_REGION_FAIL,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Signal() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Signal */
		setSymbol(sTOP);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Signal */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Signal */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		turn = false;
		queued = false;
		ok = false;
		fail = false;
		clear = false;
		timeEvents[0] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_IDLE:
			main_region_Idle_react(-1l);
			break;
		case MAIN_REGION_TURNING_TURN_PROCESSING_PENDING:
			main_region_Turning_Turn_processing_Pending_react(-1l);
			break;
		case MAIN_REGION_TURNING_TURN_PROCESSING_SEND:
			main_region_Turning_Turn_processing_Send_react(-1l);
			break;
		case MAIN_REGION_FAIL:
			main_region_Fail_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_IDLE:
			return stateVector[0] == State.MAIN_REGION_IDLE;
		case MAIN_REGION_TURNING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_TURNING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_TURNING_TURN_PROCESSING_SEND.ordinal();
		case MAIN_REGION_TURNING_TURN_PROCESSING_PENDING:
			return stateVector[0] == State.MAIN_REGION_TURNING_TURN_PROCESSING_PENDING;
		case MAIN_REGION_TURNING_TURN_PROCESSING_SEND:
			return stateVector[0] == State.MAIN_REGION_TURNING_TURN_PROCESSING_SEND;
		case MAIN_REGION_FAIL:
			return stateVector[0] == State.MAIN_REGION_FAIL;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	public interface OperationCallback {
	
		public boolean hasSignal();
		
		public void prepare();
		
		public void send();
		
		public void dump();
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean turn;
	
	private long turnValue;
	
	
	public void raiseTurn(final long value) {
		inEventQueue.add(() -> {
			turnValue = value;
			turn = true;
		});
		runCycle();
	}
	protected long getTurnValue() {
		if (! turn ) 
			throw new IllegalStateException("Illegal event value access. Event Turn is not raised!");
		return turnValue;
	}
	
	private boolean queued;
	
	
	public void raiseQueued() {
		inEventQueue.add(() -> {
			queued = true;
		});
		runCycle();
	}
	
	private boolean ok;
	
	
	public void raiseOk() {
		inEventQueue.add(() -> {
			ok = true;
		});
		runCycle();
	}
	
	private boolean fail;
	
	
	public void raiseFail() {
		inEventQueue.add(() -> {
			fail = true;
		});
		runCycle();
	}
	
	private boolean clear;
	
	
	public void raiseClear() {
		inEventQueue.add(() -> {
			clear = true;
		});
		runCycle();
	}
	
	private boolean completed;
	
	
	protected void raiseCompleted() {
		completed = true;
		completedObservable.next(null);
	}
	
	private Observable<Void> completedObservable = new Observable<Void>();
	
	public Observable<Void> getCompleted() {
		return completedObservable;
	}
	
	private boolean failed;
	
	
	protected void raiseFailed() {
		failed = true;
		failedObservable.next(null);
	}
	
	private Observable<Void> failedObservable = new Observable<Void>();
	
	public Observable<Void> getFailed() {
		return failedObservable;
	}
	
	public static final long timeout = 2000l;
	
	public long getTimeout() {
		return timeout;
	}
	
	private long symbol;
	
	public long getSymbol() {
		return symbol;
	}
	
	protected void setSymbol(long value) {
		this.symbol = value;
	}
	
	public static final long oFF = -(1l);
	
	public long getOFF() {
		return oFF;
	}
	
	public static final long sTOP = 0l;
	
	public long getSTOP() {
		return sTOP;
	}
	
	public static final long gO = 1l;
	
	public long getGO() {
		return gO;
	}
	
	/* Entry action for state 'Turning'. */
	private void entryAction_main_region_Turning() {
		/* Entry action for state 'Turning'. */
		timerService.setTimer(this, 0, getTimeout(), false);
		operationCallback.prepare();
	}
	
	/* Entry action for state 'Send'. */
	private void entryAction_main_region_Turning_Turn_processing_Send() {
		/* Entry action for state 'Send'. */
		operationCallback.send();
	}
	
	/* Entry action for state 'Fail'. */
	private void entryAction_main_region_Fail() {
		/* Entry action for state 'Fail'. */
		setSymbol(oFF);
		operationCallback.prepare();
		operationCallback.send();
		raiseFailed();
	}
	
	/* Exit action for state 'Turning'. */
	private void exitAction_main_region_Turning() {
		/* Exit action for state 'Turning'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_main_region_Idle_default() {
		/* 'default' enter sequence for state Idle */
		stateVector[0] = State.MAIN_REGION_IDLE;
	}
	
	/* 'default' enter sequence for state Turning */
	private void enterSequence_main_region_Turning_default() {
		/* 'default' enter sequence for state Turning */
		entryAction_main_region_Turning();
		enterSequence_main_region_Turning_Turn_processing_default();
	}
	
	/* 'default' enter sequence for state Pending */
	private void enterSequence_main_region_Turning_Turn_processing_Pending_default() {
		/* 'default' enter sequence for state Pending */
		stateVector[0] = State.MAIN_REGION_TURNING_TURN_PROCESSING_PENDING;
	}
	
	/* 'default' enter sequence for state Send */
	private void enterSequence_main_region_Turning_Turn_processing_Send_default() {
		/* 'default' enter sequence for state Send */
		entryAction_main_region_Turning_Turn_processing_Send();
		stateVector[0] = State.MAIN_REGION_TURNING_TURN_PROCESSING_SEND;
	}
	
	/* 'default' enter sequence for state Fail */
	private void enterSequence_main_region_Fail_default() {
		/* 'default' enter sequence for state Fail */
		entryAction_main_region_Fail();
		stateVector[0] = State.MAIN_REGION_FAIL;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Turn processing */
	private void enterSequence_main_region_Turning_Turn_processing_default() {
		/* 'default' enter sequence for region Turn processing */
		react_main_region_Turning_Turn_processing__entry_Default();
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_main_region_Idle() {
		/* Default exit sequence for state Idle */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Turning */
	private void exitSequence_main_region_Turning() {
		/* Default exit sequence for state Turning */
		exitSequence_main_region_Turning_Turn_processing();
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Turning();
	}
	
	/* Default exit sequence for state Pending */
	private void exitSequence_main_region_Turning_Turn_processing_Pending() {
		/* Default exit sequence for state Pending */
		stateVector[0] = State.MAIN_REGION_TURNING;
	}
	
	/* Default exit sequence for state Send */
	private void exitSequence_main_region_Turning_Turn_processing_Send() {
		/* Default exit sequence for state Send */
		stateVector[0] = State.MAIN_REGION_TURNING;
	}
	
	/* Default exit sequence for state Fail */
	private void exitSequence_main_region_Fail() {
		/* Default exit sequence for state Fail */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_IDLE:
			exitSequence_main_region_Idle();
			break;
		case MAIN_REGION_TURNING:
			exitSequence_main_region_Turning();
			break;
		case MAIN_REGION_TURNING_TURN_PROCESSING_PENDING:
			exitSequence_main_region_Turning_Turn_processing_Pending();
			exitAction_main_region_Turning();
			break;
		case MAIN_REGION_TURNING_TURN_PROCESSING_SEND:
			exitSequence_main_region_Turning_Turn_processing_Send();
			exitAction_main_region_Turning();
			break;
		case MAIN_REGION_FAIL:
			exitSequence_main_region_Fail();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Turn processing */
	private void exitSequence_main_region_Turning_Turn_processing() {
		/* Default exit sequence for region Turn processing */
		switch (stateVector[0]) {
		case MAIN_REGION_TURNING_TURN_PROCESSING_PENDING:
			exitSequence_main_region_Turning_Turn_processing_Pending();
			break;
		case MAIN_REGION_TURNING_TURN_PROCESSING_SEND:
			exitSequence_main_region_Turning_Turn_processing_Send();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		/* The reactions of state null. */
		if (operationCallback.hasSignal()) {
			setSymbol(getTurnValue());
			enterSequence_main_region_Turning_default();
		} else {
			raiseCompleted();
			enterSequence_main_region_Idle_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Idle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Turning_Turn_processing__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Turning_Turn_processing_Send_default();
	}
	
	private long main_region_Idle_react(long transitioned_before) {
		/* The reactions of state Idle. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (turn) {
				exitSequence_main_region_Idle();
				react_main_region__choice_0();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Turning_react(long transitioned_before) {
		/* The reactions of state Turning. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (ok) {
				exitSequence_main_region_Turning();
				raiseCompleted();
				enterSequence_main_region_Idle_default();
				transitioned_after = 0l;
			} else {
				if (fail) {
					exitSequence_main_region_Turning();
					enterSequence_main_region_Fail_default();
					transitioned_after = 0l;
				} else {
					if (timeEvents[0]) {
						exitSequence_main_region_Turning();
						timeEvents[0] = false;
						enterSequence_main_region_Fail_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Turning_Turn_processing_Pending_react(long transitioned_before) {
		/* The reactions of state Pending. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Turning_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Turning_Turn_processing_Send_react(long transitioned_before) {
		/* The reactions of state Send. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (queued) {
				exitSequence_main_region_Turning_Turn_processing_Send();
				enterSequence_main_region_Turning_Turn_processing_Pending_default();
				main_region_Turning_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Turning_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Fail_react(long transitioned_before) {
		/* The reactions of state Fail. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (clear) {
				exitSequence_main_region_Fail();
				enterSequence_main_region_Idle_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
