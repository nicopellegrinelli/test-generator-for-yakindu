/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;

public class MqttClientStatechart implements ITimed, ICycleBased {
	public static class System {
		private boolean reset;
		
		
		protected void raiseReset() {
			reset = true;
			resetObservable.next(null);
		}
		
		private Observable<Void> resetObservable = new Observable<Void>();
		
		public Observable<Void> getReset() {
			return resetObservable;
		}
		
	}
	
	public static class WizFi360 {
		private boolean setStationMode;
		
		
		protected void raiseSetStationMode() {
			setStationMode = true;
			setStationModeObservable.next(null);
		}
		
		private Observable<Void> setStationModeObservable = new Observable<Void>();
		
		public Observable<Void> getSetStationMode() {
			return setStationModeObservable;
		}
		
		private boolean enableDhcp;
		
		
		protected void raiseEnableDhcp() {
			enableDhcp = true;
			enableDhcpObservable.next(null);
		}
		
		private Observable<Void> enableDhcpObservable = new Observable<Void>();
		
		public Observable<Void> getEnableDhcp() {
			return enableDhcpObservable;
		}
		
		private boolean connectToAccessPoint;
		
		
		protected void raiseConnectToAccessPoint() {
			connectToAccessPoint = true;
			connectToAccessPointObservable.next(null);
		}
		
		private Observable<Void> connectToAccessPointObservable = new Observable<Void>();
		
		public Observable<Void> getConnectToAccessPoint() {
			return connectToAccessPointObservable;
		}
		
		private boolean configureMqtt;
		
		
		protected void raiseConfigureMqtt() {
			configureMqtt = true;
			configureMqttObservable.next(null);
		}
		
		private Observable<Void> configureMqttObservable = new Observable<Void>();
		
		public Observable<Void> getConfigureMqtt() {
			return configureMqttObservable;
		}
		
		private boolean setTopic;
		
		
		protected void raiseSetTopic() {
			setTopic = true;
			setTopicObservable.next(null);
		}
		
		private Observable<Void> setTopicObservable = new Observable<Void>();
		
		public Observable<Void> getSetTopic() {
			return setTopicObservable;
		}
		
		private boolean connectToBroker;
		
		
		protected void raiseConnectToBroker() {
			connectToBroker = true;
			connectToBrokerObservable.next(null);
		}
		
		private Observable<Void> connectToBrokerObservable = new Observable<Void>();
		
		public Observable<Void> getConnectToBroker() {
			return connectToBrokerObservable;
		}
		
		private boolean publishTopic;
		
		
		protected void raisePublishTopic() {
			publishTopic = true;
			publishTopicObservable.next(null);
		}
		
		private Observable<Void> publishTopicObservable = new Observable<Void>();
		
		public Observable<Void> getPublishTopic() {
			return publishTopicObservable;
		}
		
		private boolean testModule;
		
		
		protected void raiseTestModule() {
			testModule = true;
			testModuleObservable.next(null);
		}
		
		private Observable<Void> testModuleObservable = new Observable<Void>();
		
		public Observable<Void> getTestModule() {
			return testModuleObservable;
		}
		
		private boolean restartModule;
		
		
		protected void raiseRestartModule() {
			restartModule = true;
			restartModuleObservable.next(null);
		}
		
		private Observable<Void> restartModuleObservable = new Observable<Void>();
		
		public Observable<Void> getRestartModule() {
			return restartModuleObservable;
		}
		
		private boolean ledOn;
		
		
		protected void raiseLedOn() {
			ledOn = true;
			ledOnObservable.next(null);
		}
		
		private Observable<Void> ledOnObservable = new Observable<Void>();
		
		public Observable<Void> getLedOn() {
			return ledOnObservable;
		}
		
		private boolean resetModule;
		
		
		protected void raiseResetModule() {
			resetModule = true;
			resetModuleObservable.next(null);
		}
		
		private Observable<Void> resetModuleObservable = new Observable<Void>();
		
		public Observable<Void> getResetModule() {
			return resetModuleObservable;
		}
		
		private boolean start;
		
		
		protected void raiseStart() {
			start = true;
			startObservable.next(null);
		}
		
		private Observable<Void> startObservable = new Observable<Void>();
		
		public Observable<Void> getStart() {
			return startObservable;
		}
		
		private boolean stop;
		
		
		protected void raiseStop() {
			stop = true;
			stopObservable.next(null);
		}
		
		private Observable<Void> stopObservable = new Observable<Void>();
		
		public Observable<Void> getStop() {
			return stopObservable;
		}
		
		private boolean ok;
		
		
		public void raiseOk() {
			ok = true;
		}
		
		private boolean error;
		
		
		public void raiseError() {
			error = true;
		}
		
		private boolean fail;
		
		
		public void raiseFail() {
			fail = true;
		}
		
		private boolean ready;
		
		
		public void raiseReady() {
			ready = true;
		}
		
		private boolean wifiConnected;
		
		public boolean getWifiConnected() {
			return wifiConnected;
		}
		
		public void setWifiConnected(boolean value) {
			this.wifiConnected = value;
		}
		
		private long wifiFailCounter;
		
		public long getWifiFailCounter() {
			return wifiFailCounter;
		}
		
		public void setWifiFailCounter(long value) {
			this.wifiFailCounter = value;
		}
		
		private long testFailCounter;
		
		public long getTestFailCounter() {
			return testFailCounter;
		}
		
		public void setTestFailCounter(long value) {
			this.testFailCounter = value;
		}
		
		private long restartFailCounter;
		
		public long getRestartFailCounter() {
			return restartFailCounter;
		}
		
		public void setRestartFailCounter(long value) {
			this.restartFailCounter = value;
		}
		
		private long resetFailCounter;
		
		public long getResetFailCounter() {
			return resetFailCounter;
		}
		
		public void setResetFailCounter(long value) {
			this.resetFailCounter = value;
		}
		
		private boolean ledState;
		
		public boolean getLedState() {
			return ledState;
		}
		
		public void setLedState(boolean value) {
			this.ledState = value;
		}
		
	}
	
	private static class WizFi360EvBuf {
		private boolean ok;
		private boolean error;
		private boolean fail;
		private boolean ready;
	}
	private static class TimeEventsEvBuf {
		private boolean mqttClientStatechart_main_region_Undefined_r1_Entry_time_event_0;
		private boolean mqttClientStatechart_main_region_Undefined_r1_ResetModule_time_event_0;
		private boolean mqttClientStatechart_main_region_Undefined_r1_TestModule_time_event_0;
		private boolean mqttClientStatechart_main_region_Undefined_r1_RestartModule_time_event_0;
		private boolean mqttClientStatechart_main_region_Online_r1_PublishMessages_r1_PublishTopic_time_event_0;
		private boolean mqttClientStatechart_main_region_Online_r1_PublishMessages_r1_Wait_time_event_0;
		private boolean mqttClientStatechart_main_region_Online_r1_ConnectToBroker_time_event_0;
		private boolean mqttClientStatechart_main_region_Offline_r1_SetTopic_time_event_0;
		private boolean mqttClientStatechart_main_region_Offline_r1_Entry_time_event_0;
		private boolean mqttClientStatechart_main_region_Offline_r1_SetStationMode_time_event_0;
		private boolean mqttClientStatechart_main_region_Offline_r1_ConfigureMqtt_time_event_0;
		private boolean mqttClientStatechart_main_region_Offline_r1_EnableDhcp_time_event_0;
		private boolean mqttClientStatechart_main_region_Offline_r1_ConnectToAccesspoint_time_event_0;
	}
	private static class MqttClientStatechartEvBuf {
		private WizFi360EvBuf ifaceWizFi360 = new WizFi360EvBuf();
		private TimeEventsEvBuf timeEvents = new TimeEventsEvBuf();
	}
	protected System system;
	
	protected WizFi360 wizFi360;
	
	public enum State {
		MAIN_REGION_UNDEFINED,
		MAIN_REGION_UNDEFINED_R1_ENTRY,
		MAIN_REGION_UNDEFINED_R1_RESETMODULE,
		MAIN_REGION_UNDEFINED_R1_TESTMODULE,
		MAIN_REGION_UNDEFINED_R1_RESTARTMODULE,
		MAIN_REGION_UNDEFINED_R1_RESETSYSTEM,
		MAIN_REGION_UNDEFINED_R1_START,
		MAIN_REGION_UNDEFINED_R1_STOP,
		MAIN_REGION_ONLINE,
		MAIN_REGION_ONLINE_R1_ENTRY,
		MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES,
		MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_PUBLISHTOPIC,
		MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_WAIT,
		MAIN_REGION_ONLINE_R1_CONNECTTOBROKER,
		MAIN_REGION_ONLINE_R1_RECEIVEMESSAGES,
		MAIN_REGION_OFFLINE,
		MAIN_REGION_OFFLINE_R1_SETTOPIC,
		MAIN_REGION_OFFLINE_R1_ENTRY,
		MAIN_REGION_OFFLINE_R1_SETSTATIONMODE,
		MAIN_REGION_OFFLINE_R1_CONFIGUREMQTT,
		MAIN_REGION_OFFLINE_R1_ENABLEDHCP,
		MAIN_REGION_OFFLINE_R1_CONNECTTOACCESSPOINT,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[13];
	
	private MqttClientStatechartEvBuf current = new MqttClientStatechartEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public MqttClientStatechart() {
		system = new System();
		wizFi360 = new WizFi360();
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart MqttClientStatechart */
		setDT(200l);
		setPublishInterval(1000l);
		setPublishingEnabled(false);
		setWatchdogTimer(0l);
		wizFi360.setWifiConnected(false);
		wizFi360.setWifiFailCounter(0l);
		wizFi360.setTestFailCounter(0l);
		wizFi360.setRestartFailCounter(0l);
		wizFi360.setResetFailCounter(0l);
		wizFi360.setLedState(false);
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		microStep();
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart MqttClientStatechart */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart MqttClientStatechart */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		current.ifaceWizFi360.ok = wizFi360.ok;
		wizFi360.ok = false;
		current.ifaceWizFi360.error = wizFi360.error;
		wizFi360.error = false;
		current.ifaceWizFi360.fail = wizFi360.fail;
		wizFi360.fail = false;
		current.ifaceWizFi360.ready = wizFi360.ready;
		wizFi360.ready = false;
		current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_Entry_time_event_0 = timeEvents[0];
		timeEvents[0] = false;
		current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_ResetModule_time_event_0 = timeEvents[1];
		timeEvents[1] = false;
		current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_TestModule_time_event_0 = timeEvents[2];
		timeEvents[2] = false;
		current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_RestartModule_time_event_0 = timeEvents[3];
		timeEvents[3] = false;
		current.timeEvents.mqttClientStatechart_main_region_Online_r1_PublishMessages_r1_PublishTopic_time_event_0 = timeEvents[4];
		timeEvents[4] = false;
		current.timeEvents.mqttClientStatechart_main_region_Online_r1_PublishMessages_r1_Wait_time_event_0 = timeEvents[5];
		timeEvents[5] = false;
		current.timeEvents.mqttClientStatechart_main_region_Online_r1_ConnectToBroker_time_event_0 = timeEvents[6];
		timeEvents[6] = false;
		current.timeEvents.mqttClientStatechart_main_region_Offline_r1_SetTopic_time_event_0 = timeEvents[7];
		timeEvents[7] = false;
		current.timeEvents.mqttClientStatechart_main_region_Offline_r1_Entry_time_event_0 = timeEvents[8];
		timeEvents[8] = false;
		current.timeEvents.mqttClientStatechart_main_region_Offline_r1_SetStationMode_time_event_0 = timeEvents[9];
		timeEvents[9] = false;
		current.timeEvents.mqttClientStatechart_main_region_Offline_r1_ConfigureMqtt_time_event_0 = timeEvents[10];
		timeEvents[10] = false;
		current.timeEvents.mqttClientStatechart_main_region_Offline_r1_EnableDhcp_time_event_0 = timeEvents[11];
		timeEvents[11] = false;
		current.timeEvents.mqttClientStatechart_main_region_Offline_r1_ConnectToAccesspoint_time_event_0 = timeEvents[12];
		timeEvents[12] = false;
	}
	
	private void clearInEvents() {
		wizFi360.ok = false;
		wizFi360.error = false;
		wizFi360.fail = false;
		wizFi360.ready = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
		timeEvents[8] = false;
		timeEvents[9] = false;
		timeEvents[10] = false;
		timeEvents[11] = false;
		timeEvents[12] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_UNDEFINED_R1_ENTRY:
			main_region_Undefined_r1_Entry_react(-1l);
			break;
		case MAIN_REGION_UNDEFINED_R1_RESETMODULE:
			main_region_Undefined_r1_ResetModule_react(-1l);
			break;
		case MAIN_REGION_UNDEFINED_R1_TESTMODULE:
			main_region_Undefined_r1_TestModule_react(-1l);
			break;
		case MAIN_REGION_UNDEFINED_R1_RESTARTMODULE:
			main_region_Undefined_r1_RestartModule_react(-1l);
			break;
		case MAIN_REGION_UNDEFINED_R1_RESETSYSTEM:
			break;
		case MAIN_REGION_UNDEFINED_R1_START:
			main_region_Undefined_r1_Start_react(-1l);
			break;
		case MAIN_REGION_UNDEFINED_R1_STOP:
			main_region_Undefined_r1_Stop_react(-1l);
			break;
		case MAIN_REGION_ONLINE_R1_ENTRY:
			main_region_Online_r1_Entry_react(-1l);
			break;
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_PUBLISHTOPIC:
			main_region_Online_r1_PublishMessages_r1_PublishTopic_react(-1l);
			break;
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_WAIT:
			main_region_Online_r1_PublishMessages_r1_Wait_react(-1l);
			break;
		case MAIN_REGION_ONLINE_R1_CONNECTTOBROKER:
			main_region_Online_r1_ConnectToBroker_react(-1l);
			break;
		case MAIN_REGION_ONLINE_R1_RECEIVEMESSAGES:
			main_region_Online_r1_ReceiveMessages_react(-1l);
			break;
		case MAIN_REGION_OFFLINE_R1_SETTOPIC:
			main_region_Offline_r1_SetTopic_react(-1l);
			break;
		case MAIN_REGION_OFFLINE_R1_ENTRY:
			main_region_Offline_r1_Entry_react(-1l);
			break;
		case MAIN_REGION_OFFLINE_R1_SETSTATIONMODE:
			main_region_Offline_r1_SetStationMode_react(-1l);
			break;
		case MAIN_REGION_OFFLINE_R1_CONFIGUREMQTT:
			main_region_Offline_r1_ConfigureMqtt_react(-1l);
			break;
		case MAIN_REGION_OFFLINE_R1_ENABLEDHCP:
			main_region_Offline_r1_EnableDhcp_react(-1l);
			break;
		case MAIN_REGION_OFFLINE_R1_CONNECTTOACCESSPOINT:
			main_region_Offline_r1_ConnectToAccesspoint_react(-1l);
			break;
		default:
			break;
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_UNDEFINED:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_UNDEFINED.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_UNDEFINED_R1_STOP.ordinal();
		case MAIN_REGION_UNDEFINED_R1_ENTRY:
			return stateVector[0] == State.MAIN_REGION_UNDEFINED_R1_ENTRY;
		case MAIN_REGION_UNDEFINED_R1_RESETMODULE:
			return stateVector[0] == State.MAIN_REGION_UNDEFINED_R1_RESETMODULE;
		case MAIN_REGION_UNDEFINED_R1_TESTMODULE:
			return stateVector[0] == State.MAIN_REGION_UNDEFINED_R1_TESTMODULE;
		case MAIN_REGION_UNDEFINED_R1_RESTARTMODULE:
			return stateVector[0] == State.MAIN_REGION_UNDEFINED_R1_RESTARTMODULE;
		case MAIN_REGION_UNDEFINED_R1_RESETSYSTEM:
			return stateVector[0] == State.MAIN_REGION_UNDEFINED_R1_RESETSYSTEM;
		case MAIN_REGION_UNDEFINED_R1_START:
			return stateVector[0] == State.MAIN_REGION_UNDEFINED_R1_START;
		case MAIN_REGION_UNDEFINED_R1_STOP:
			return stateVector[0] == State.MAIN_REGION_UNDEFINED_R1_STOP;
		case MAIN_REGION_ONLINE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_ONLINE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_ONLINE_R1_RECEIVEMESSAGES.ordinal();
		case MAIN_REGION_ONLINE_R1_ENTRY:
			return stateVector[0] == State.MAIN_REGION_ONLINE_R1_ENTRY;
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_WAIT.ordinal();
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_PUBLISHTOPIC:
			return stateVector[0] == State.MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_PUBLISHTOPIC;
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_WAIT:
			return stateVector[0] == State.MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_WAIT;
		case MAIN_REGION_ONLINE_R1_CONNECTTOBROKER:
			return stateVector[0] == State.MAIN_REGION_ONLINE_R1_CONNECTTOBROKER;
		case MAIN_REGION_ONLINE_R1_RECEIVEMESSAGES:
			return stateVector[0] == State.MAIN_REGION_ONLINE_R1_RECEIVEMESSAGES;
		case MAIN_REGION_OFFLINE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_OFFLINE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_OFFLINE_R1_CONNECTTOACCESSPOINT.ordinal();
		case MAIN_REGION_OFFLINE_R1_SETTOPIC:
			return stateVector[0] == State.MAIN_REGION_OFFLINE_R1_SETTOPIC;
		case MAIN_REGION_OFFLINE_R1_ENTRY:
			return stateVector[0] == State.MAIN_REGION_OFFLINE_R1_ENTRY;
		case MAIN_REGION_OFFLINE_R1_SETSTATIONMODE:
			return stateVector[0] == State.MAIN_REGION_OFFLINE_R1_SETSTATIONMODE;
		case MAIN_REGION_OFFLINE_R1_CONFIGUREMQTT:
			return stateVector[0] == State.MAIN_REGION_OFFLINE_R1_CONFIGUREMQTT;
		case MAIN_REGION_OFFLINE_R1_ENABLEDHCP:
			return stateVector[0] == State.MAIN_REGION_OFFLINE_R1_ENABLEDHCP;
		case MAIN_REGION_OFFLINE_R1_CONNECTTOACCESSPOINT:
			return stateVector[0] == State.MAIN_REGION_OFFLINE_R1_CONNECTTOACCESSPOINT;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public System system() {
		return system;
	}
	
	public WizFi360 wizFi360() {
		return wizFi360;
	}
	
	
	private long dT;
	
	public long getDT() {
		return dT;
	}
	
	public void setDT(long value) {
		this.dT = value;
	}
	
	private long publishInterval;
	
	public long getPublishInterval() {
		return publishInterval;
	}
	
	public void setPublishInterval(long value) {
		this.publishInterval = value;
	}
	
	private boolean publishingEnabled;
	
	public boolean getPublishingEnabled() {
		return publishingEnabled;
	}
	
	public void setPublishingEnabled(boolean value) {
		this.publishingEnabled = value;
	}
	
	private long watchdogTimer;
	
	public long getWatchdogTimer() {
		return watchdogTimer;
	}
	
	public void setWatchdogTimer(long value) {
		this.watchdogTimer = value;
	}
	
	private void effect_main_region_Undefined_tr0() {
		exitSequence_main_region_Undefined();
		enterSequence_main_region_Offline_default();
	}
	
	private void effect_main_region_Online_tr1() {
		exitSequence_main_region_Online();
		enterSequence_main_region_Undefined_default();
	}
	
	private void effect_main_region_Online_r1_PublishMessages_tr0() {
		exitSequence_main_region_Online_r1_PublishMessages();
		react_main_region_Online_r1__choice_1();
	}
	
	private void effect_main_region_Offline_tr0() {
		exitSequence_main_region_Offline();
		enterSequence_main_region_Online_default();
	}
	
	private void effect_main_region_Offline_tr1() {
		exitSequence_main_region_Offline();
		enterSequence_main_region_Undefined_default();
	}
	
	/* Entry action for state 'Entry'. */
	private void entryAction_main_region_Undefined_r1_Entry() {
		/* Entry action for state 'Entry'. */
		timerService.setTimer(this, 0, (1l * 1000l), false);
	}
	
	/* Entry action for state 'ResetModule'. */
	private void entryAction_main_region_Undefined_r1_ResetModule() {
		/* Entry action for state 'ResetModule'. */
		timerService.setTimer(this, 1, (4l * 1000l), false);
	}
	
	/* Entry action for state 'TestModule'. */
	private void entryAction_main_region_Undefined_r1_TestModule() {
		/* Entry action for state 'TestModule'. */
		timerService.setTimer(this, 2, (1l * 1000l), false);
	}
	
	/* Entry action for state 'RestartModule'. */
	private void entryAction_main_region_Undefined_r1_RestartModule() {
		/* Entry action for state 'RestartModule'. */
		timerService.setTimer(this, 3, (3l * 1000l), false);
	}
	
	/* Entry action for state 'PublishTopic'. */
	private void entryAction_main_region_Online_r1_PublishMessages_r1_PublishTopic() {
		/* Entry action for state 'PublishTopic'. */
		timerService.setTimer(this, 4, (10l * 1000l), false);
	}
	
	/* Entry action for state 'Wait'. */
	private void entryAction_main_region_Online_r1_PublishMessages_r1_Wait() {
		/* Entry action for state 'Wait'. */
		timerService.setTimer(this, 5, ((getPublishInterval() - (2l * getDT()))), false);
	}
	
	/* Entry action for state 'ConnectToBroker'. */
	private void entryAction_main_region_Online_r1_ConnectToBroker() {
		/* Entry action for state 'ConnectToBroker'. */
		timerService.setTimer(this, 6, (10l * 1000l), false);
	}
	
	/* Entry action for state 'SetTopic'. */
	private void entryAction_main_region_Offline_r1_SetTopic() {
		/* Entry action for state 'SetTopic'. */
		timerService.setTimer(this, 7, (2l * 1000l), false);
	}
	
	/* Entry action for state 'Entry'. */
	private void entryAction_main_region_Offline_r1_Entry() {
		/* Entry action for state 'Entry'. */
		timerService.setTimer(this, 8, (1l * 1000l), false);
	}
	
	/* Entry action for state 'SetStationMode'. */
	private void entryAction_main_region_Offline_r1_SetStationMode() {
		/* Entry action for state 'SetStationMode'. */
		timerService.setTimer(this, 9, (2l * 1000l), false);
	}
	
	/* Entry action for state 'ConfigureMqtt'. */
	private void entryAction_main_region_Offline_r1_ConfigureMqtt() {
		/* Entry action for state 'ConfigureMqtt'. */
		timerService.setTimer(this, 10, (2l * 1000l), false);
	}
	
	/* Entry action for state 'EnableDhcp'. */
	private void entryAction_main_region_Offline_r1_EnableDhcp() {
		/* Entry action for state 'EnableDhcp'. */
		timerService.setTimer(this, 11, (2l * 1000l), false);
	}
	
	/* Entry action for state 'ConnectToAccesspoint'. */
	private void entryAction_main_region_Offline_r1_ConnectToAccesspoint() {
		/* Entry action for state 'ConnectToAccesspoint'. */
		timerService.setTimer(this, 12, (30l * 1000l), false);
	}
	
	/* Exit action for state 'Entry'. */
	private void exitAction_main_region_Undefined_r1_Entry() {
		/* Exit action for state 'Entry'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'ResetModule'. */
	private void exitAction_main_region_Undefined_r1_ResetModule() {
		/* Exit action for state 'ResetModule'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'TestModule'. */
	private void exitAction_main_region_Undefined_r1_TestModule() {
		/* Exit action for state 'TestModule'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'RestartModule'. */
	private void exitAction_main_region_Undefined_r1_RestartModule() {
		/* Exit action for state 'RestartModule'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'PublishTopic'. */
	private void exitAction_main_region_Online_r1_PublishMessages_r1_PublishTopic() {
		/* Exit action for state 'PublishTopic'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Wait'. */
	private void exitAction_main_region_Online_r1_PublishMessages_r1_Wait() {
		/* Exit action for state 'Wait'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'ConnectToBroker'. */
	private void exitAction_main_region_Online_r1_ConnectToBroker() {
		/* Exit action for state 'ConnectToBroker'. */
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'SetTopic'. */
	private void exitAction_main_region_Offline_r1_SetTopic() {
		/* Exit action for state 'SetTopic'. */
		timerService.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'Entry'. */
	private void exitAction_main_region_Offline_r1_Entry() {
		/* Exit action for state 'Entry'. */
		timerService.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'SetStationMode'. */
	private void exitAction_main_region_Offline_r1_SetStationMode() {
		/* Exit action for state 'SetStationMode'. */
		timerService.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'ConfigureMqtt'. */
	private void exitAction_main_region_Offline_r1_ConfigureMqtt() {
		/* Exit action for state 'ConfigureMqtt'. */
		timerService.unsetTimer(this, 10);
	}
	
	/* Exit action for state 'EnableDhcp'. */
	private void exitAction_main_region_Offline_r1_EnableDhcp() {
		/* Exit action for state 'EnableDhcp'. */
		timerService.unsetTimer(this, 11);
	}
	
	/* Exit action for state 'ConnectToAccesspoint'. */
	private void exitAction_main_region_Offline_r1_ConnectToAccesspoint() {
		/* Exit action for state 'ConnectToAccesspoint'. */
		timerService.unsetTimer(this, 12);
	}
	
	/* 'default' enter sequence for state Undefined */
	private void enterSequence_main_region_Undefined_default() {
		/* 'default' enter sequence for state Undefined */
		enterSequence_main_region_Undefined_r1_default();
	}
	
	/* 'default' enter sequence for state Entry */
	private void enterSequence_main_region_Undefined_r1_Entry_default() {
		/* 'default' enter sequence for state Entry */
		entryAction_main_region_Undefined_r1_Entry();
		stateVector[0] = State.MAIN_REGION_UNDEFINED_R1_ENTRY;
	}
	
	/* 'default' enter sequence for state ResetModule */
	private void enterSequence_main_region_Undefined_r1_ResetModule_default() {
		/* 'default' enter sequence for state ResetModule */
		entryAction_main_region_Undefined_r1_ResetModule();
		stateVector[0] = State.MAIN_REGION_UNDEFINED_R1_RESETMODULE;
	}
	
	/* 'default' enter sequence for state TestModule */
	private void enterSequence_main_region_Undefined_r1_TestModule_default() {
		/* 'default' enter sequence for state TestModule */
		entryAction_main_region_Undefined_r1_TestModule();
		stateVector[0] = State.MAIN_REGION_UNDEFINED_R1_TESTMODULE;
	}
	
	/* 'default' enter sequence for state RestartModule */
	private void enterSequence_main_region_Undefined_r1_RestartModule_default() {
		/* 'default' enter sequence for state RestartModule */
		entryAction_main_region_Undefined_r1_RestartModule();
		stateVector[0] = State.MAIN_REGION_UNDEFINED_R1_RESTARTMODULE;
	}
	
	/* 'default' enter sequence for state ResetSystem */
	private void enterSequence_main_region_Undefined_r1_ResetSystem_default() {
		/* 'default' enter sequence for state ResetSystem */
		stateVector[0] = State.MAIN_REGION_UNDEFINED_R1_RESETSYSTEM;
	}
	
	/* 'default' enter sequence for state Start */
	private void enterSequence_main_region_Undefined_r1_Start_default() {
		/* 'default' enter sequence for state Start */
		stateVector[0] = State.MAIN_REGION_UNDEFINED_R1_START;
	}
	
	/* 'default' enter sequence for state Stop */
	private void enterSequence_main_region_Undefined_r1_Stop_default() {
		/* 'default' enter sequence for state Stop */
		stateVector[0] = State.MAIN_REGION_UNDEFINED_R1_STOP;
	}
	
	/* 'default' enter sequence for state Online */
	private void enterSequence_main_region_Online_default() {
		/* 'default' enter sequence for state Online */
		enterSequence_main_region_Online_r1_default();
	}
	
	/* 'default' enter sequence for state Entry */
	private void enterSequence_main_region_Online_r1_Entry_default() {
		/* 'default' enter sequence for state Entry */
		stateVector[0] = State.MAIN_REGION_ONLINE_R1_ENTRY;
	}
	
	/* 'default' enter sequence for state PublishMessages */
	private void enterSequence_main_region_Online_r1_PublishMessages_default() {
		/* 'default' enter sequence for state PublishMessages */
		enterSequence_main_region_Online_r1_PublishMessages_r1_default();
	}
	
	/* 'default' enter sequence for state PublishTopic */
	private void enterSequence_main_region_Online_r1_PublishMessages_r1_PublishTopic_default() {
		/* 'default' enter sequence for state PublishTopic */
		entryAction_main_region_Online_r1_PublishMessages_r1_PublishTopic();
		stateVector[0] = State.MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_PUBLISHTOPIC;
	}
	
	/* 'default' enter sequence for state Wait */
	private void enterSequence_main_region_Online_r1_PublishMessages_r1_Wait_default() {
		/* 'default' enter sequence for state Wait */
		entryAction_main_region_Online_r1_PublishMessages_r1_Wait();
		stateVector[0] = State.MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_WAIT;
	}
	
	/* 'default' enter sequence for state ConnectToBroker */
	private void enterSequence_main_region_Online_r1_ConnectToBroker_default() {
		/* 'default' enter sequence for state ConnectToBroker */
		entryAction_main_region_Online_r1_ConnectToBroker();
		stateVector[0] = State.MAIN_REGION_ONLINE_R1_CONNECTTOBROKER;
	}
	
	/* 'default' enter sequence for state ReceiveMessages */
	private void enterSequence_main_region_Online_r1_ReceiveMessages_default() {
		/* 'default' enter sequence for state ReceiveMessages */
		stateVector[0] = State.MAIN_REGION_ONLINE_R1_RECEIVEMESSAGES;
	}
	
	/* 'WifiConnectionLost' enter sequence for state Offline */
	private void enterSequence_main_region_Offline_WifiConnectionLost() {
		/* 'WifiConnectionLost' enter sequence for state Offline */
		enterSequence_main_region_Offline_r1_WifiConnectionLost();
	}
	
	/* 'default' enter sequence for state Offline */
	private void enterSequence_main_region_Offline_default() {
		/* 'default' enter sequence for state Offline */
		enterSequence_main_region_Offline_r1_default();
	}
	
	/* 'default' enter sequence for state SetTopic */
	private void enterSequence_main_region_Offline_r1_SetTopic_default() {
		/* 'default' enter sequence for state SetTopic */
		entryAction_main_region_Offline_r1_SetTopic();
		stateVector[0] = State.MAIN_REGION_OFFLINE_R1_SETTOPIC;
	}
	
	/* 'default' enter sequence for state Entry */
	private void enterSequence_main_region_Offline_r1_Entry_default() {
		/* 'default' enter sequence for state Entry */
		entryAction_main_region_Offline_r1_Entry();
		stateVector[0] = State.MAIN_REGION_OFFLINE_R1_ENTRY;
	}
	
	/* 'default' enter sequence for state SetStationMode */
	private void enterSequence_main_region_Offline_r1_SetStationMode_default() {
		/* 'default' enter sequence for state SetStationMode */
		entryAction_main_region_Offline_r1_SetStationMode();
		stateVector[0] = State.MAIN_REGION_OFFLINE_R1_SETSTATIONMODE;
	}
	
	/* 'default' enter sequence for state ConfigureMqtt */
	private void enterSequence_main_region_Offline_r1_ConfigureMqtt_default() {
		/* 'default' enter sequence for state ConfigureMqtt */
		entryAction_main_region_Offline_r1_ConfigureMqtt();
		stateVector[0] = State.MAIN_REGION_OFFLINE_R1_CONFIGUREMQTT;
	}
	
	/* 'default' enter sequence for state EnableDhcp */
	private void enterSequence_main_region_Offline_r1_EnableDhcp_default() {
		/* 'default' enter sequence for state EnableDhcp */
		entryAction_main_region_Offline_r1_EnableDhcp();
		stateVector[0] = State.MAIN_REGION_OFFLINE_R1_ENABLEDHCP;
	}
	
	/* 'default' enter sequence for state ConnectToAccesspoint */
	private void enterSequence_main_region_Offline_r1_ConnectToAccesspoint_default() {
		/* 'default' enter sequence for state ConnectToAccesspoint */
		entryAction_main_region_Offline_r1_ConnectToAccesspoint();
		stateVector[0] = State.MAIN_REGION_OFFLINE_R1_CONNECTTOACCESSPOINT;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Undefined_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Undefined_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Online_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Online_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Online_r1_PublishMessages_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Online_r1_PublishMessages_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Offline_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_main_region_Offline_r1__entry_Default();
	}
	
	/* 'WifiConnectionLost' enter sequence for region r1 */
	private void enterSequence_main_region_Offline_r1_WifiConnectionLost() {
		/* 'WifiConnectionLost' enter sequence for region r1 */
		react_main_region_Offline_r1_WifiConnectionLost();
	}
	
	/* Default exit sequence for state Undefined */
	private void exitSequence_main_region_Undefined() {
		/* Default exit sequence for state Undefined */
		exitSequence_main_region_Undefined_r1();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Entry */
	private void exitSequence_main_region_Undefined_r1_Entry() {
		/* Default exit sequence for state Entry */
		stateVector[0] = State.MAIN_REGION_UNDEFINED;
		exitAction_main_region_Undefined_r1_Entry();
	}
	
	/* Default exit sequence for state ResetModule */
	private void exitSequence_main_region_Undefined_r1_ResetModule() {
		/* Default exit sequence for state ResetModule */
		stateVector[0] = State.MAIN_REGION_UNDEFINED;
		exitAction_main_region_Undefined_r1_ResetModule();
	}
	
	/* Default exit sequence for state TestModule */
	private void exitSequence_main_region_Undefined_r1_TestModule() {
		/* Default exit sequence for state TestModule */
		stateVector[0] = State.MAIN_REGION_UNDEFINED;
		exitAction_main_region_Undefined_r1_TestModule();
	}
	
	/* Default exit sequence for state RestartModule */
	private void exitSequence_main_region_Undefined_r1_RestartModule() {
		/* Default exit sequence for state RestartModule */
		stateVector[0] = State.MAIN_REGION_UNDEFINED;
		exitAction_main_region_Undefined_r1_RestartModule();
	}
	
	/* Default exit sequence for state ResetSystem */
	private void exitSequence_main_region_Undefined_r1_ResetSystem() {
		/* Default exit sequence for state ResetSystem */
		stateVector[0] = State.MAIN_REGION_UNDEFINED;
	}
	
	/* Default exit sequence for state Start */
	private void exitSequence_main_region_Undefined_r1_Start() {
		/* Default exit sequence for state Start */
		stateVector[0] = State.MAIN_REGION_UNDEFINED;
	}
	
	/* Default exit sequence for state Stop */
	private void exitSequence_main_region_Undefined_r1_Stop() {
		/* Default exit sequence for state Stop */
		stateVector[0] = State.MAIN_REGION_UNDEFINED;
	}
	
	/* Default exit sequence for state Online */
	private void exitSequence_main_region_Online() {
		/* Default exit sequence for state Online */
		exitSequence_main_region_Online_r1();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Entry */
	private void exitSequence_main_region_Online_r1_Entry() {
		/* Default exit sequence for state Entry */
		stateVector[0] = State.MAIN_REGION_ONLINE;
	}
	
	/* Default exit sequence for state PublishMessages */
	private void exitSequence_main_region_Online_r1_PublishMessages() {
		/* Default exit sequence for state PublishMessages */
		exitSequence_main_region_Online_r1_PublishMessages_r1();
		stateVector[0] = State.MAIN_REGION_ONLINE;
	}
	
	/* Default exit sequence for state PublishTopic */
	private void exitSequence_main_region_Online_r1_PublishMessages_r1_PublishTopic() {
		/* Default exit sequence for state PublishTopic */
		stateVector[0] = State.MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES;
		exitAction_main_region_Online_r1_PublishMessages_r1_PublishTopic();
	}
	
	/* Default exit sequence for state Wait */
	private void exitSequence_main_region_Online_r1_PublishMessages_r1_Wait() {
		/* Default exit sequence for state Wait */
		stateVector[0] = State.MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES;
		exitAction_main_region_Online_r1_PublishMessages_r1_Wait();
	}
	
	/* Default exit sequence for state ConnectToBroker */
	private void exitSequence_main_region_Online_r1_ConnectToBroker() {
		/* Default exit sequence for state ConnectToBroker */
		stateVector[0] = State.MAIN_REGION_ONLINE;
		exitAction_main_region_Online_r1_ConnectToBroker();
	}
	
	/* Default exit sequence for state ReceiveMessages */
	private void exitSequence_main_region_Online_r1_ReceiveMessages() {
		/* Default exit sequence for state ReceiveMessages */
		stateVector[0] = State.MAIN_REGION_ONLINE;
	}
	
	/* Default exit sequence for state Offline */
	private void exitSequence_main_region_Offline() {
		/* Default exit sequence for state Offline */
		exitSequence_main_region_Offline_r1();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state SetTopic */
	private void exitSequence_main_region_Offline_r1_SetTopic() {
		/* Default exit sequence for state SetTopic */
		stateVector[0] = State.MAIN_REGION_OFFLINE;
		exitAction_main_region_Offline_r1_SetTopic();
	}
	
	/* Default exit sequence for state Entry */
	private void exitSequence_main_region_Offline_r1_Entry() {
		/* Default exit sequence for state Entry */
		stateVector[0] = State.MAIN_REGION_OFFLINE;
		exitAction_main_region_Offline_r1_Entry();
	}
	
	/* Default exit sequence for state SetStationMode */
	private void exitSequence_main_region_Offline_r1_SetStationMode() {
		/* Default exit sequence for state SetStationMode */
		stateVector[0] = State.MAIN_REGION_OFFLINE;
		exitAction_main_region_Offline_r1_SetStationMode();
	}
	
	/* Default exit sequence for state ConfigureMqtt */
	private void exitSequence_main_region_Offline_r1_ConfigureMqtt() {
		/* Default exit sequence for state ConfigureMqtt */
		stateVector[0] = State.MAIN_REGION_OFFLINE;
		exitAction_main_region_Offline_r1_ConfigureMqtt();
	}
	
	/* Default exit sequence for state EnableDhcp */
	private void exitSequence_main_region_Offline_r1_EnableDhcp() {
		/* Default exit sequence for state EnableDhcp */
		stateVector[0] = State.MAIN_REGION_OFFLINE;
		exitAction_main_region_Offline_r1_EnableDhcp();
	}
	
	/* Default exit sequence for state ConnectToAccesspoint */
	private void exitSequence_main_region_Offline_r1_ConnectToAccesspoint() {
		/* Default exit sequence for state ConnectToAccesspoint */
		stateVector[0] = State.MAIN_REGION_OFFLINE;
		exitAction_main_region_Offline_r1_ConnectToAccesspoint();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_UNDEFINED:
			exitSequence_main_region_Undefined();
			break;
		case MAIN_REGION_UNDEFINED_R1_ENTRY:
			exitSequence_main_region_Undefined_r1_Entry();
			break;
		case MAIN_REGION_UNDEFINED_R1_RESETMODULE:
			exitSequence_main_region_Undefined_r1_ResetModule();
			break;
		case MAIN_REGION_UNDEFINED_R1_TESTMODULE:
			exitSequence_main_region_Undefined_r1_TestModule();
			break;
		case MAIN_REGION_UNDEFINED_R1_RESTARTMODULE:
			exitSequence_main_region_Undefined_r1_RestartModule();
			break;
		case MAIN_REGION_UNDEFINED_R1_RESETSYSTEM:
			exitSequence_main_region_Undefined_r1_ResetSystem();
			break;
		case MAIN_REGION_UNDEFINED_R1_START:
			exitSequence_main_region_Undefined_r1_Start();
			break;
		case MAIN_REGION_UNDEFINED_R1_STOP:
			exitSequence_main_region_Undefined_r1_Stop();
			break;
		case MAIN_REGION_ONLINE:
			exitSequence_main_region_Online();
			break;
		case MAIN_REGION_ONLINE_R1_ENTRY:
			exitSequence_main_region_Online_r1_Entry();
			break;
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES:
			exitSequence_main_region_Online_r1_PublishMessages();
			break;
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_PUBLISHTOPIC:
			exitSequence_main_region_Online_r1_PublishMessages_r1_PublishTopic();
			break;
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_WAIT:
			exitSequence_main_region_Online_r1_PublishMessages_r1_Wait();
			break;
		case MAIN_REGION_ONLINE_R1_CONNECTTOBROKER:
			exitSequence_main_region_Online_r1_ConnectToBroker();
			break;
		case MAIN_REGION_ONLINE_R1_RECEIVEMESSAGES:
			exitSequence_main_region_Online_r1_ReceiveMessages();
			break;
		case MAIN_REGION_OFFLINE:
			exitSequence_main_region_Offline();
			break;
		case MAIN_REGION_OFFLINE_R1_SETTOPIC:
			exitSequence_main_region_Offline_r1_SetTopic();
			break;
		case MAIN_REGION_OFFLINE_R1_ENTRY:
			exitSequence_main_region_Offline_r1_Entry();
			break;
		case MAIN_REGION_OFFLINE_R1_SETSTATIONMODE:
			exitSequence_main_region_Offline_r1_SetStationMode();
			break;
		case MAIN_REGION_OFFLINE_R1_CONFIGUREMQTT:
			exitSequence_main_region_Offline_r1_ConfigureMqtt();
			break;
		case MAIN_REGION_OFFLINE_R1_ENABLEDHCP:
			exitSequence_main_region_Offline_r1_EnableDhcp();
			break;
		case MAIN_REGION_OFFLINE_R1_CONNECTTOACCESSPOINT:
			exitSequence_main_region_Offline_r1_ConnectToAccesspoint();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Undefined_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_UNDEFINED_R1_ENTRY:
			exitSequence_main_region_Undefined_r1_Entry();
			break;
		case MAIN_REGION_UNDEFINED_R1_RESETMODULE:
			exitSequence_main_region_Undefined_r1_ResetModule();
			break;
		case MAIN_REGION_UNDEFINED_R1_TESTMODULE:
			exitSequence_main_region_Undefined_r1_TestModule();
			break;
		case MAIN_REGION_UNDEFINED_R1_RESTARTMODULE:
			exitSequence_main_region_Undefined_r1_RestartModule();
			break;
		case MAIN_REGION_UNDEFINED_R1_RESETSYSTEM:
			exitSequence_main_region_Undefined_r1_ResetSystem();
			break;
		case MAIN_REGION_UNDEFINED_R1_START:
			exitSequence_main_region_Undefined_r1_Start();
			break;
		case MAIN_REGION_UNDEFINED_R1_STOP:
			exitSequence_main_region_Undefined_r1_Stop();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Online_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_ONLINE_R1_ENTRY:
			exitSequence_main_region_Online_r1_Entry();
			break;
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES:
			exitSequence_main_region_Online_r1_PublishMessages();
			break;
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_PUBLISHTOPIC:
			exitSequence_main_region_Online_r1_PublishMessages_r1_PublishTopic();
			break;
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_WAIT:
			exitSequence_main_region_Online_r1_PublishMessages_r1_Wait();
			break;
		case MAIN_REGION_ONLINE_R1_CONNECTTOBROKER:
			exitSequence_main_region_Online_r1_ConnectToBroker();
			break;
		case MAIN_REGION_ONLINE_R1_RECEIVEMESSAGES:
			exitSequence_main_region_Online_r1_ReceiveMessages();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Online_r1_PublishMessages_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_PUBLISHTOPIC:
			exitSequence_main_region_Online_r1_PublishMessages_r1_PublishTopic();
			break;
		case MAIN_REGION_ONLINE_R1_PUBLISHMESSAGES_R1_WAIT:
			exitSequence_main_region_Online_r1_PublishMessages_r1_Wait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Offline_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MAIN_REGION_OFFLINE_R1_SETTOPIC:
			exitSequence_main_region_Offline_r1_SetTopic();
			break;
		case MAIN_REGION_OFFLINE_R1_ENTRY:
			exitSequence_main_region_Offline_r1_Entry();
			break;
		case MAIN_REGION_OFFLINE_R1_SETSTATIONMODE:
			exitSequence_main_region_Offline_r1_SetStationMode();
			break;
		case MAIN_REGION_OFFLINE_R1_CONFIGUREMQTT:
			exitSequence_main_region_Offline_r1_ConfigureMqtt();
			break;
		case MAIN_REGION_OFFLINE_R1_ENABLEDHCP:
			exitSequence_main_region_Offline_r1_EnableDhcp();
			break;
		case MAIN_REGION_OFFLINE_R1_CONNECTTOACCESSPOINT:
			exitSequence_main_region_Offline_r1_ConnectToAccesspoint();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Undefined_r1__choice_0() {
		/* The reactions of state null. */
		if (wizFi360.getTestFailCounter()>10l) {
			react_main_region_Undefined_r1__choice_3();
		} else {
			wizFi360.raiseStop();
			enterSequence_main_region_Undefined_r1_Stop_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Undefined_r1__choice_1() {
		/* The reactions of state null. */
		wizFi360.raiseStart();
		enterSequence_main_region_Undefined_r1_Start_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Undefined_r1__choice_2() {
		/* The reactions of state null. */
		if (wizFi360.getRestartFailCounter()>4l) {
			react_main_region_Undefined_r1__choice_3();
		} else {
			react_main_region_Undefined_r1__choice_0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Undefined_r1__choice_3() {
		/* The reactions of state null. */
		react_main_region_Undefined_r1__choice_4();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Undefined_r1__choice_4() {
		/* The reactions of state null. */
		wizFi360.raiseResetModule();
		enterSequence_main_region_Undefined_r1_ResetModule_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Undefined_r1__choice_5() {
		/* The reactions of state null. */
		if (wizFi360.getResetFailCounter()>4l) {
			system.raiseReset();
			enterSequence_main_region_Undefined_r1_ResetSystem_default();
		} else {
			react_main_region_Undefined_r1__choice_4();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Online_r1__choice_0() {
		/* The reactions of state null. */
		if (getPublishingEnabled()) {
			enterSequence_main_region_Online_r1_PublishMessages_default();
		} else {
			enterSequence_main_region_Online_r1_ReceiveMessages_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Online_r1__choice_1() {
		/* The reactions of state null. */
		react_main_region_Online_r1_ResetModule();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Offline_r1__choice_0() {
		/* The reactions of state null. */
		react_main_region_Offline_r1__choice_1();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Offline_r1__choice_1() {
		/* The reactions of state null. */
		react_main_region_Offline_r1__choice_2();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Offline_r1__choice_2() {
		/* The reactions of state null. */
		react_main_region_Offline_r1__choice_3();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Offline_r1__choice_3() {
		/* The reactions of state null. */
		react_main_region_Offline_r1_ResetModule();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Offline_r1__choice_4() {
		/* The reactions of state null. */
		react_main_region_Offline_r1_ResetModule();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Undefined_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Undefined_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Undefined_r1_Entry_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Online_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Online_r1_Entry_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Online_r1_PublishMessages_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Online_r1_PublishMessages_r1_Wait_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Offline_r1__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Offline_r1_Entry_default();
	}
	
	/* Default react sequence for initial entry WifiConnectionLost */
	private void react_main_region_Offline_r1_WifiConnectionLost() {
		/* Default react sequence for initial entry WifiConnectionLost */
		wizFi360.setWifiFailCounter(0l);
		enterSequence_main_region_Offline_r1_ConnectToAccesspoint_default();
	}
	
	/* The reactions of exit ModuleReady. */
	private void react_main_region_Undefined_r1_ModuleReady() {
		/* The reactions of exit ModuleReady. */
		effect_main_region_Undefined_tr0();
	}
	
	/* The reactions of exit ResetModule. */
	private void react_main_region_Online_r1_PublishMessages_r1_ResetModule() {
		/* The reactions of exit ResetModule. */
		effect_main_region_Online_r1_PublishMessages_tr0();
	}
	
	/* The reactions of exit ResetModule. */
	private void react_main_region_Online_r1_ResetModule() {
		/* The reactions of exit ResetModule. */
		effect_main_region_Online_tr1();
	}
	
	/* The reactions of exit WifiConnectionEstablished. */
	private void react_main_region_Offline_r1_WifiConnectionEstablished() {
		/* The reactions of exit WifiConnectionEstablished. */
		effect_main_region_Offline_tr0();
	}
	
	/* The reactions of exit ResetModule. */
	private void react_main_region_Offline_r1_ResetModule() {
		/* The reactions of exit ResetModule. */
		effect_main_region_Offline_tr1();
	}
	
	private long main_region_Undefined_r1_Entry_react(long transitioned_before) {
		/* The reactions of state Entry. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_Entry_time_event_0) {
				exitSequence_main_region_Undefined_r1_Entry();
				wizFi360.setTestFailCounter(0l);
				wizFi360.setRestartFailCounter(0l);
				wizFi360.setResetFailCounter(0l);
				current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_Entry_time_event_0 = false;
				react_main_region_Undefined_r1__choice_1();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Undefined_r1_ResetModule_react(long transitioned_before) {
		/* The reactions of state ResetModule. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_ResetModule_time_event_0) {
				exitSequence_main_region_Undefined_r1_ResetModule();
				wizFi360.setResetFailCounter(wizFi360.getResetFailCounter() + 1l);
				current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_ResetModule_time_event_0 = false;
				react_main_region_Undefined_r1__choice_5();
				transitioned_after = 0l;
			} else {
				if (current.ifaceWizFi360.ready) {
					exitSequence_main_region_Undefined_r1_ResetModule();
					react_main_region_Undefined_r1_ModuleReady();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Undefined_r1_TestModule_react(long transitioned_before) {
		/* The reactions of state TestModule. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceWizFi360.ok) {
				exitSequence_main_region_Undefined_r1_TestModule();
				wizFi360.raiseRestartModule();
				enterSequence_main_region_Undefined_r1_RestartModule_default();
				transitioned_after = 0l;
			} else {
				if (current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_TestModule_time_event_0) {
					exitSequence_main_region_Undefined_r1_TestModule();
					wizFi360.setTestFailCounter(wizFi360.getTestFailCounter() + 1l);
					current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_TestModule_time_event_0 = false;
					react_main_region_Undefined_r1__choice_0();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Undefined_r1_RestartModule_react(long transitioned_before) {
		/* The reactions of state RestartModule. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceWizFi360.ready) {
				exitSequence_main_region_Undefined_r1_RestartModule();
				react_main_region_Undefined_r1_ModuleReady();
				transitioned_after = 0l;
			} else {
				if (current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_RestartModule_time_event_0) {
					exitSequence_main_region_Undefined_r1_RestartModule();
					wizFi360.setRestartFailCounter(wizFi360.getRestartFailCounter() + 1l);
					current.timeEvents.mqttClientStatechart_main_region_Undefined_r1_RestartModule_time_event_0 = false;
					react_main_region_Undefined_r1__choice_2();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Undefined_r1_Start_react(long transitioned_before) {
		/* The reactions of state Start. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			exitSequence_main_region_Undefined_r1_Start();
			wizFi360.raiseTestModule();
			enterSequence_main_region_Undefined_r1_TestModule_default();
			transitioned_after = 0l;
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Undefined_r1_Stop_react(long transitioned_before) {
		/* The reactions of state Stop. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			exitSequence_main_region_Undefined_r1_Stop();
			react_main_region_Undefined_r1__choice_1();
			transitioned_after = 0l;
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Online_react(long transitioned_before) {
		/* The reactions of state Online. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (!(wizFi360.getWifiConnected())) {
				exitSequence_main_region_Online();
				enterSequence_main_region_Offline_WifiConnectionLost();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Online_r1_Entry_react(long transitioned_before) {
		/* The reactions of state Entry. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			exitSequence_main_region_Online_r1_Entry();
			wizFi360.raiseConnectToBroker();
			enterSequence_main_region_Online_r1_ConnectToBroker_default();
			main_region_Online_react(0l);
			transitioned_after = 0l;
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Online_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Online_r1_PublishMessages_react(long transitioned_before) {
		/* The reactions of state PublishMessages. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Online_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Online_r1_PublishMessages_r1_PublishTopic_react(long transitioned_before) {
		/* The reactions of state PublishTopic. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceWizFi360.ok) {
				exitSequence_main_region_Online_r1_PublishMessages_r1_PublishTopic();
				enterSequence_main_region_Online_r1_PublishMessages_r1_Wait_default();
				main_region_Online_r1_PublishMessages_react(0l);
				transitioned_after = 0l;
			} else {
				if (current.timeEvents.mqttClientStatechart_main_region_Online_r1_PublishMessages_r1_PublishTopic_time_event_0) {
					exitSequence_main_region_Online_r1_PublishMessages_r1_PublishTopic();
					current.timeEvents.mqttClientStatechart_main_region_Online_r1_PublishMessages_r1_PublishTopic_time_event_0 = false;
					react_main_region_Online_r1_PublishMessages_r1_ResetModule();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Online_r1_PublishMessages_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Online_r1_PublishMessages_r1_Wait_react(long transitioned_before) {
		/* The reactions of state Wait. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.mqttClientStatechart_main_region_Online_r1_PublishMessages_r1_Wait_time_event_0) {
				exitSequence_main_region_Online_r1_PublishMessages_r1_Wait();
				wizFi360.raisePublishTopic();
				current.timeEvents.mqttClientStatechart_main_region_Online_r1_PublishMessages_r1_Wait_time_event_0 = false;
				enterSequence_main_region_Online_r1_PublishMessages_r1_PublishTopic_default();
				main_region_Online_r1_PublishMessages_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Online_r1_PublishMessages_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Online_r1_ConnectToBroker_react(long transitioned_before) {
		/* The reactions of state ConnectToBroker. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceWizFi360.ok) {
				exitSequence_main_region_Online_r1_ConnectToBroker();
				react_main_region_Online_r1__choice_0();
				transitioned_after = 0l;
			} else {
				if (current.timeEvents.mqttClientStatechart_main_region_Online_r1_ConnectToBroker_time_event_0) {
					exitSequence_main_region_Online_r1_ConnectToBroker();
					current.timeEvents.mqttClientStatechart_main_region_Online_r1_ConnectToBroker_time_event_0 = false;
					react_main_region_Online_r1__choice_1();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Online_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Online_r1_ReceiveMessages_react(long transitioned_before) {
		/* The reactions of state ReceiveMessages. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = main_region_Online_react(transitioned_before);
		return transitioned_after;
	}
	
	private long main_region_Offline_r1_SetTopic_react(long transitioned_before) {
		/* The reactions of state SetTopic. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceWizFi360.ok) {
				exitSequence_main_region_Offline_r1_SetTopic();
				wizFi360.raiseConnectToAccessPoint();
				wizFi360.setWifiFailCounter(0l);
				enterSequence_main_region_Offline_r1_ConnectToAccesspoint_default();
				transitioned_after = 0l;
			} else {
				if (current.timeEvents.mqttClientStatechart_main_region_Offline_r1_SetTopic_time_event_0) {
					exitSequence_main_region_Offline_r1_SetTopic();
					current.timeEvents.mqttClientStatechart_main_region_Offline_r1_SetTopic_time_event_0 = false;
					react_main_region_Offline_r1__choice_3();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Offline_r1_Entry_react(long transitioned_before) {
		/* The reactions of state Entry. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.mqttClientStatechart_main_region_Offline_r1_Entry_time_event_0) {
				exitSequence_main_region_Offline_r1_Entry();
				wizFi360.raiseSetStationMode();
				current.timeEvents.mqttClientStatechart_main_region_Offline_r1_Entry_time_event_0 = false;
				enterSequence_main_region_Offline_r1_SetStationMode_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Offline_r1_SetStationMode_react(long transitioned_before) {
		/* The reactions of state SetStationMode. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceWizFi360.ok) {
				exitSequence_main_region_Offline_r1_SetStationMode();
				wizFi360.raiseEnableDhcp();
				enterSequence_main_region_Offline_r1_EnableDhcp_default();
				transitioned_after = 0l;
			} else {
				if (current.timeEvents.mqttClientStatechart_main_region_Offline_r1_SetStationMode_time_event_0) {
					exitSequence_main_region_Offline_r1_SetStationMode();
					current.timeEvents.mqttClientStatechart_main_region_Offline_r1_SetStationMode_time_event_0 = false;
					react_main_region_Offline_r1__choice_0();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Offline_r1_ConfigureMqtt_react(long transitioned_before) {
		/* The reactions of state ConfigureMqtt. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceWizFi360.ok) {
				exitSequence_main_region_Offline_r1_ConfigureMqtt();
				wizFi360.raiseSetTopic();
				enterSequence_main_region_Offline_r1_SetTopic_default();
				transitioned_after = 0l;
			} else {
				if (current.timeEvents.mqttClientStatechart_main_region_Offline_r1_ConfigureMqtt_time_event_0) {
					exitSequence_main_region_Offline_r1_ConfigureMqtt();
					current.timeEvents.mqttClientStatechart_main_region_Offline_r1_ConfigureMqtt_time_event_0 = false;
					react_main_region_Offline_r1__choice_2();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Offline_r1_EnableDhcp_react(long transitioned_before) {
		/* The reactions of state EnableDhcp. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceWizFi360.ok) {
				exitSequence_main_region_Offline_r1_EnableDhcp();
				wizFi360.raiseConfigureMqtt();
				enterSequence_main_region_Offline_r1_ConfigureMqtt_default();
				transitioned_after = 0l;
			} else {
				if (current.timeEvents.mqttClientStatechart_main_region_Offline_r1_EnableDhcp_time_event_0) {
					exitSequence_main_region_Offline_r1_EnableDhcp();
					current.timeEvents.mqttClientStatechart_main_region_Offline_r1_EnableDhcp_time_event_0 = false;
					react_main_region_Offline_r1__choice_1();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Offline_r1_ConnectToAccesspoint_react(long transitioned_before) {
		/* The reactions of state ConnectToAccesspoint. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((current.ifaceWizFi360.ok) && (wizFi360.getWifiConnected()))) {
				exitSequence_main_region_Offline_r1_ConnectToAccesspoint();
				react_main_region_Offline_r1_WifiConnectionEstablished();
				transitioned_after = 0l;
			} else {
				if (((current.ifaceWizFi360.fail) && (!(wizFi360.getWifiConnected())))) {
					exitSequence_main_region_Offline_r1_ConnectToAccesspoint();
					wizFi360.raiseConnectToAccessPoint();
					wizFi360.setWifiFailCounter(wizFi360.getWifiFailCounter() + 1l);
					enterSequence_main_region_Offline_r1_ConnectToAccesspoint_default();
					transitioned_after = 0l;
				} else {
					if (wizFi360.getWifiFailCounter()==3l) {
						exitSequence_main_region_Offline_r1_ConnectToAccesspoint();
						react_main_region_Offline_r1__choice_4();
						transitioned_after = 0l;
					} else {
						if (current.timeEvents.mqttClientStatechart_main_region_Offline_r1_ConnectToAccesspoint_time_event_0) {
							exitSequence_main_region_Offline_r1_ConnectToAccesspoint();
							current.timeEvents.mqttClientStatechart_main_region_Offline_r1_ConnectToAccesspoint_time_event_0 = false;
							react_main_region_Offline_r1__choice_4();
							transitioned_after = 0l;
						}
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
}
