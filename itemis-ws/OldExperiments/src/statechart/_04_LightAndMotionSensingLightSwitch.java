/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class _04_LightAndMotionSensingLightSwitch implements ITimed, IEventDriven {
	public static class Hmi {
		private _04_LightAndMotionSensingLightSwitch parent;
		
		public Hmi(_04_LightAndMotionSensingLightSwitch parent) {
			this.parent = parent;
		}
		private boolean switchEvent;
		
		
		public void raiseSwitch() {
			parent.inEventQueue.add(() -> {
				switchEvent = true;
			});
			parent.runCycle();
		}
		
		private boolean toggleMode;
		
		
		public void raiseToggleMode() {
			parent.inEventQueue.add(() -> {
				toggleMode = true;
			});
			parent.runCycle();
		}
		
		private boolean changeBrightness;
		
		
		public void raiseChangeBrightness() {
			parent.inEventQueue.add(() -> {
				changeBrightness = true;
			});
			parent.runCycle();
		}
		
	}
	
	public static class Motion {
		private _04_LightAndMotionSensingLightSwitch parent;
		
		public Motion(_04_LightAndMotionSensingLightSwitch parent) {
			this.parent = parent;
		}
		private boolean detected;
		
		
		public void raiseDetected() {
			parent.inEventQueue.add(() -> {
				detected = true;
			});
			parent.runCycle();
		}
		
		public static final long timeout = 30l;
		
		public long getTimeout() {
			return timeout;
		}
		
	}
	
	public static class Luminosity {
		private _04_LightAndMotionSensingLightSwitch parent;
		
		public Luminosity(_04_LightAndMotionSensingLightSwitch parent) {
			this.parent = parent;
		}
		private boolean bright;
		
		
		public void raiseBright() {
			parent.inEventQueue.add(() -> {
				bright = true;
			});
			parent.runCycle();
		}
		
		private boolean dark;
		
		
		public void raiseDark() {
			parent.inEventQueue.add(() -> {
				dark = true;
			});
			parent.runCycle();
		}
		
		public static final long delay = 10l;
		
		public long getDelay() {
			return delay;
		}
		
	}
	
	protected Hmi hmi;
	
	protected Motion motion;
	
	protected Luminosity luminosity;
	
	public enum State {
		MODES_AUTOMATIC,
		MODES_AUTOMATIC_MODES_MOTION_SENSING,
		MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_STILL,
		MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION,
		MODES_AUTOMATIC_MODES_LIGHT_SENSING,
		MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_BRIGHT,
		MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_DARK,
		MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_DARK,
		MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT,
		MODES_MANUAL,
		MODES_MANUAL_R1_OFF,
		MODES_MANUAL_R1_ON,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[4];
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public _04_LightAndMotionSensingLightSwitch() {
		hmi = new Hmi(this);
		motion = new Motion(this);
		luminosity = new Luminosity(this);
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 4; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart _04_LightAndMotionSensingLightSwitch */
		setBrightness(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart _04_LightAndMotionSensingLightSwitch */
		enterSequence_modes_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart _04_LightAndMotionSensingLightSwitch */
		exitSequence_modes();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		hmi.switchEvent = false;
		hmi.toggleMode = false;
		hmi.changeBrightness = false;
		motion.detected = false;
		luminosity.bright = false;
		luminosity.dark = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_STILL:
			modes_Automatic_modes_Motion_Sensing_r1_Still_react(-1l);
			break;
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION:
			modes_Automatic_modes_Motion_Sensing_r1_Motion_react(-1l);
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_BRIGHT:
			modes_Automatic_modes_Light_Sensing_r1_Bright_react(-1l);
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_DARK:
			modes_Automatic_modes_Light_Sensing_r1_Dark_react(-1l);
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_DARK:
			modes_Automatic_modes_Light_Sensing_r1_Getting_Dark_react(-1l);
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT:
			modes_Automatic_modes_Light_Sensing_r1_Getting_Bright_react(-1l);
			break;
		case MODES_MANUAL_R1_OFF:
			modes_Manual_r1_Off_react(-1l);
			break;
		case MODES_MANUAL_R1_ON:
			modes_Manual_r1_On_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MODES_AUTOMATIC:
			return stateVector[0].ordinal() >= State.
					MODES_AUTOMATIC.ordinal()&& stateVector[0].ordinal() <= State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT.ordinal();
		case MODES_AUTOMATIC_MODES_MOTION_SENSING:
			return stateVector[0].ordinal() >= State.
					MODES_AUTOMATIC_MODES_MOTION_SENSING.ordinal()&& stateVector[0].ordinal() <= State.MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION.ordinal();
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_STILL:
			return stateVector[0] == State.MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_STILL;
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION:
			return stateVector[0] == State.MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING:
			return stateVector[0].ordinal() >= State.
					MODES_AUTOMATIC_MODES_LIGHT_SENSING.ordinal()&& stateVector[0].ordinal() <= State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT.ordinal();
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_BRIGHT:
			return stateVector[0] == State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_BRIGHT;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_DARK:
			return stateVector[0] == State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_DARK;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_DARK:
			return stateVector[0] == State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_DARK;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT:
			return stateVector[0] == State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT;
		case MODES_MANUAL:
			return stateVector[0].ordinal() >= State.
					MODES_MANUAL.ordinal()&& stateVector[0].ordinal() <= State.MODES_MANUAL_R1_ON.ordinal();
		case MODES_MANUAL_R1_OFF:
			return stateVector[0] == State.MODES_MANUAL_R1_OFF;
		case MODES_MANUAL_R1_ON:
			return stateVector[0] == State.MODES_MANUAL_R1_ON;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Hmi hmi() {
		return hmi;
	}
	
	public Motion motion() {
		return motion;
	}
	
	public Luminosity luminosity() {
		return luminosity;
	}
	
	
	private long brightness;
	
	public long getBrightness() {
		return brightness;
	}
	
	public void setBrightness(long value) {
		this.brightness = value;
	}
	
	/* Entry action for state 'Still'. */
	private void entryAction_modes_Automatic_modes_Motion_Sensing_r1_Still() {
		/* Entry action for state 'Still'. */
		setBrightness(0l);
	}
	
	/* Entry action for state 'Motion'. */
	private void entryAction_modes_Automatic_modes_Motion_Sensing_r1_Motion() {
		/* Entry action for state 'Motion'. */
		timerService.setTimer(this, 0, (motion.getTimeout() * 1000l), false);
		setBrightness(10l);
	}
	
	/* Entry action for state 'Bright'. */
	private void entryAction_modes_Automatic_modes_Light_Sensing_r1_Bright() {
		/* Entry action for state 'Bright'. */
		setBrightness(0l);
	}
	
	/* Entry action for state 'Dark'. */
	private void entryAction_modes_Automatic_modes_Light_Sensing_r1_Dark() {
		/* Entry action for state 'Dark'. */
		setBrightness(10l);
	}
	
	/* Entry action for state 'Getting Dark'. */
	private void entryAction_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark() {
		/* Entry action for state 'Getting Dark'. */
		timerService.setTimer(this, 1, (luminosity.getDelay() * 1000l), false);
	}
	
	/* Entry action for state 'Getting Bright'. */
	private void entryAction_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright() {
		/* Entry action for state 'Getting Bright'. */
		timerService.setTimer(this, 2, (luminosity.getDelay() * 1000l), false);
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_modes_Manual_r1_Off() {
		/* Entry action for state 'Off'. */
		setBrightness(0l);
	}
	
	/* Exit action for state 'Motion'. */
	private void exitAction_modes_Automatic_modes_Motion_Sensing_r1_Motion() {
		/* Exit action for state 'Motion'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Getting Dark'. */
	private void exitAction_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark() {
		/* Exit action for state 'Getting Dark'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Getting Bright'. */
	private void exitAction_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright() {
		/* Exit action for state 'Getting Bright'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* 'default' enter sequence for state Automatic */
	private void enterSequence_modes_Automatic_default() {
		/* 'default' enter sequence for state Automatic */
		enterSequence_modes_Automatic_modes_default();
	}
	
	/* 'default' enter sequence for state Motion Sensing */
	private void enterSequence_modes_Automatic_modes_Motion_Sensing_default() {
		/* 'default' enter sequence for state Motion Sensing */
		enterSequence_modes_Automatic_modes_Motion_Sensing_r1_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Still */
	private void enterSequence_modes_Automatic_modes_Motion_Sensing_r1_Still_default() {
		/* 'default' enter sequence for state Still */
		entryAction_modes_Automatic_modes_Motion_Sensing_r1_Still();
		stateVector[0] = State.MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_STILL;
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Motion */
	private void enterSequence_modes_Automatic_modes_Motion_Sensing_r1_Motion_default() {
		/* 'default' enter sequence for state Motion */
		entryAction_modes_Automatic_modes_Motion_Sensing_r1_Motion();
		stateVector[0] = State.MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION;
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Light Sensing */
	private void enterSequence_modes_Automatic_modes_Light_Sensing_default() {
		/* 'default' enter sequence for state Light Sensing */
		enterSequence_modes_Automatic_modes_Light_Sensing_r1_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Bright */
	private void enterSequence_modes_Automatic_modes_Light_Sensing_r1_Bright_default() {
		/* 'default' enter sequence for state Bright */
		entryAction_modes_Automatic_modes_Light_Sensing_r1_Bright();
		stateVector[0] = State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_BRIGHT;
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Dark */
	private void enterSequence_modes_Automatic_modes_Light_Sensing_r1_Dark_default() {
		/* 'default' enter sequence for state Dark */
		entryAction_modes_Automatic_modes_Light_Sensing_r1_Dark();
		stateVector[0] = State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_DARK;
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Getting Dark */
	private void enterSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark_default() {
		/* 'default' enter sequence for state Getting Dark */
		entryAction_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark();
		stateVector[0] = State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_DARK;
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Getting Bright */
	private void enterSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright_default() {
		/* 'default' enter sequence for state Getting Bright */
		entryAction_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright();
		stateVector[0] = State.MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT;
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Manual */
	private void enterSequence_modes_Manual_default() {
		/* 'default' enter sequence for state Manual */
		enterSequence_modes_Manual_r1_default();
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_modes_Manual_r1_Off_default() {
		/* 'default' enter sequence for state Off */
		entryAction_modes_Manual_r1_Off();
		stateVector[0] = State.MODES_MANUAL_R1_OFF;
		historyVector[3] = stateVector[0];
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_modes_Manual_r1_On_default() {
		/* 'default' enter sequence for state On */
		stateVector[0] = State.MODES_MANUAL_R1_ON;
		historyVector[3] = stateVector[0];
	}
	
	/* 'default' enter sequence for region modes */
	private void enterSequence_modes_default() {
		/* 'default' enter sequence for region modes */
		react_modes__entry_Default();
	}
	
	/* 'default' enter sequence for region modes */
	private void enterSequence_modes_Automatic_modes_default() {
		/* 'default' enter sequence for region modes */
		react_modes_Automatic_modes__entry_Default();
	}
	
	/* shallow enterSequence with history in child modes */
	private void shallowEnterSequence_modes_Automatic_modes() {
		/* shallow enterSequence with history in child modes */
		switch (historyVector[0]) {
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_STILL:
			enterSequence_modes_Automatic_modes_Motion_Sensing_default();
			break;
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION:
			enterSequence_modes_Automatic_modes_Motion_Sensing_default();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_BRIGHT:
			enterSequence_modes_Automatic_modes_Light_Sensing_default();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_DARK:
			enterSequence_modes_Automatic_modes_Light_Sensing_default();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_DARK:
			enterSequence_modes_Automatic_modes_Light_Sensing_default();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT:
			enterSequence_modes_Automatic_modes_Light_Sensing_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_modes_Automatic_modes_Motion_Sensing_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_modes_Automatic_modes_Motion_Sensing_r1__entry_Default();
	}
	
	/* shallow enterSequence with history in child r1 */
	private void shallowEnterSequence_modes_Automatic_modes_Motion_Sensing_r1() {
		/* shallow enterSequence with history in child r1 */
		switch (historyVector[1]) {
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_STILL:
			enterSequence_modes_Automatic_modes_Motion_Sensing_r1_Still_default();
			break;
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION:
			enterSequence_modes_Automatic_modes_Motion_Sensing_r1_Motion_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_modes_Automatic_modes_Light_Sensing_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_modes_Automatic_modes_Light_Sensing_r1__entry_Default();
	}
	
	/* shallow enterSequence with history in child r1 */
	private void shallowEnterSequence_modes_Automatic_modes_Light_Sensing_r1() {
		/* shallow enterSequence with history in child r1 */
		switch (historyVector[2]) {
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_BRIGHT:
			enterSequence_modes_Automatic_modes_Light_Sensing_r1_Bright_default();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_DARK:
			enterSequence_modes_Automatic_modes_Light_Sensing_r1_Dark_default();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_DARK:
			enterSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark_default();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT:
			enterSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_modes_Manual_r1_default() {
		/* 'default' enter sequence for region r1 */
		react_modes_Manual_r1__entry_Default();
	}
	
	/* shallow enterSequence with history in child r1 */
	private void shallowEnterSequence_modes_Manual_r1() {
		/* shallow enterSequence with history in child r1 */
		switch (historyVector[3]) {
		case MODES_MANUAL_R1_OFF:
			enterSequence_modes_Manual_r1_Off_default();
			break;
		case MODES_MANUAL_R1_ON:
			enterSequence_modes_Manual_r1_On_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state Automatic */
	private void exitSequence_modes_Automatic() {
		/* Default exit sequence for state Automatic */
		exitSequence_modes_Automatic_modes();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Motion Sensing */
	private void exitSequence_modes_Automatic_modes_Motion_Sensing() {
		/* Default exit sequence for state Motion Sensing */
		exitSequence_modes_Automatic_modes_Motion_Sensing_r1();
		stateVector[0] = State.MODES_AUTOMATIC;
	}
	
	/* Default exit sequence for state Still */
	private void exitSequence_modes_Automatic_modes_Motion_Sensing_r1_Still() {
		/* Default exit sequence for state Still */
		stateVector[0] = State.MODES_AUTOMATIC_MODES_MOTION_SENSING;
	}
	
	/* Default exit sequence for state Motion */
	private void exitSequence_modes_Automatic_modes_Motion_Sensing_r1_Motion() {
		/* Default exit sequence for state Motion */
		stateVector[0] = State.MODES_AUTOMATIC_MODES_MOTION_SENSING;
		exitAction_modes_Automatic_modes_Motion_Sensing_r1_Motion();
	}
	
	/* Default exit sequence for state Light Sensing */
	private void exitSequence_modes_Automatic_modes_Light_Sensing() {
		/* Default exit sequence for state Light Sensing */
		exitSequence_modes_Automatic_modes_Light_Sensing_r1();
		stateVector[0] = State.MODES_AUTOMATIC;
	}
	
	/* Default exit sequence for state Bright */
	private void exitSequence_modes_Automatic_modes_Light_Sensing_r1_Bright() {
		/* Default exit sequence for state Bright */
		stateVector[0] = State.MODES_AUTOMATIC_MODES_LIGHT_SENSING;
	}
	
	/* Default exit sequence for state Dark */
	private void exitSequence_modes_Automatic_modes_Light_Sensing_r1_Dark() {
		/* Default exit sequence for state Dark */
		stateVector[0] = State.MODES_AUTOMATIC_MODES_LIGHT_SENSING;
	}
	
	/* Default exit sequence for state Getting Dark */
	private void exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark() {
		/* Default exit sequence for state Getting Dark */
		stateVector[0] = State.MODES_AUTOMATIC_MODES_LIGHT_SENSING;
		exitAction_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark();
	}
	
	/* Default exit sequence for state Getting Bright */
	private void exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright() {
		/* Default exit sequence for state Getting Bright */
		stateVector[0] = State.MODES_AUTOMATIC_MODES_LIGHT_SENSING;
		exitAction_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright();
	}
	
	/* Default exit sequence for state Manual */
	private void exitSequence_modes_Manual() {
		/* Default exit sequence for state Manual */
		exitSequence_modes_Manual_r1();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_modes_Manual_r1_Off() {
		/* Default exit sequence for state Off */
		stateVector[0] = State.MODES_MANUAL;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_modes_Manual_r1_On() {
		/* Default exit sequence for state On */
		stateVector[0] = State.MODES_MANUAL;
	}
	
	/* Default exit sequence for region modes */
	private void exitSequence_modes() {
		/* Default exit sequence for region modes */
		switch (stateVector[0]) {
		case MODES_AUTOMATIC:
			exitSequence_modes_Automatic();
			break;
		case MODES_AUTOMATIC_MODES_MOTION_SENSING:
			exitSequence_modes_Automatic_modes_Motion_Sensing();
			break;
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_STILL:
			exitSequence_modes_Automatic_modes_Motion_Sensing_r1_Still();
			break;
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION:
			exitSequence_modes_Automatic_modes_Motion_Sensing_r1_Motion();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING:
			exitSequence_modes_Automatic_modes_Light_Sensing();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_BRIGHT:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Bright();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_DARK:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Dark();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_DARK:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright();
			break;
		case MODES_MANUAL:
			exitSequence_modes_Manual();
			break;
		case MODES_MANUAL_R1_OFF:
			exitSequence_modes_Manual_r1_Off();
			break;
		case MODES_MANUAL_R1_ON:
			exitSequence_modes_Manual_r1_On();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region modes */
	private void exitSequence_modes_Automatic_modes() {
		/* Default exit sequence for region modes */
		switch (stateVector[0]) {
		case MODES_AUTOMATIC_MODES_MOTION_SENSING:
			exitSequence_modes_Automatic_modes_Motion_Sensing();
			break;
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_STILL:
			exitSequence_modes_Automatic_modes_Motion_Sensing_r1_Still();
			break;
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION:
			exitSequence_modes_Automatic_modes_Motion_Sensing_r1_Motion();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING:
			exitSequence_modes_Automatic_modes_Light_Sensing();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_BRIGHT:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Bright();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_DARK:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Dark();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_DARK:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_modes_Automatic_modes_Motion_Sensing_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_STILL:
			exitSequence_modes_Automatic_modes_Motion_Sensing_r1_Still();
			break;
		case MODES_AUTOMATIC_MODES_MOTION_SENSING_R1_MOTION:
			exitSequence_modes_Automatic_modes_Motion_Sensing_r1_Motion();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_modes_Automatic_modes_Light_Sensing_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_BRIGHT:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Bright();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_DARK:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Dark();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_DARK:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark();
			break;
		case MODES_AUTOMATIC_MODES_LIGHT_SENSING_R1_GETTING_BRIGHT:
			exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_modes_Manual_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MODES_MANUAL_R1_OFF:
			exitSequence_modes_Manual_r1_Off();
			break;
		case MODES_MANUAL_R1_ON:
			exitSequence_modes_Manual_r1_On();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_modes__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_modes_Manual_default();
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_modes_Automatic_modes_Motion_Sensing_r1__entry_Default() {
		/* Default react sequence for shallow history entry  */
		/* Enter the region with shallow history */
		if (historyVector[1] != State.$NULLSTATE$) {
			shallowEnterSequence_modes_Automatic_modes_Motion_Sensing_r1();
		} else {
			enterSequence_modes_Automatic_modes_Motion_Sensing_r1_Still_default();
		}
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_modes_Automatic_modes_Light_Sensing_r1__entry_Default() {
		/* Default react sequence for shallow history entry  */
		/* Enter the region with shallow history */
		if (historyVector[2] != State.$NULLSTATE$) {
			shallowEnterSequence_modes_Automatic_modes_Light_Sensing_r1();
		} else {
			enterSequence_modes_Automatic_modes_Light_Sensing_r1_Bright_default();
		}
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_modes_Automatic_modes__entry_Default() {
		/* Default react sequence for shallow history entry  */
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_modes_Automatic_modes();
		} else {
			enterSequence_modes_Automatic_modes_Motion_Sensing_default();
		}
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_modes_Manual_r1__entry_Default() {
		/* Default react sequence for shallow history entry  */
		/* Enter the region with shallow history */
		if (historyVector[3] != State.$NULLSTATE$) {
			shallowEnterSequence_modes_Manual_r1();
		} else {
			enterSequence_modes_Manual_r1_Off_default();
		}
	}
	
	private long modes_Automatic_react(long transitioned_before) {
		/* The reactions of state Automatic. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (hmi.switchEvent) {
				exitSequence_modes_Automatic();
				enterSequence_modes_Manual_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long modes_Automatic_modes_Motion_Sensing_react(long transitioned_before) {
		/* The reactions of state Motion Sensing. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (hmi.toggleMode) {
				exitSequence_modes_Automatic_modes_Motion_Sensing();
				enterSequence_modes_Automatic_modes_Light_Sensing_default();
				modes_Automatic_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Automatic_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Automatic_modes_Motion_Sensing_r1_Still_react(long transitioned_before) {
		/* The reactions of state Still. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (motion.detected) {
				exitSequence_modes_Automatic_modes_Motion_Sensing_r1_Still();
				enterSequence_modes_Automatic_modes_Motion_Sensing_r1_Motion_default();
				modes_Automatic_modes_Motion_Sensing_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Automatic_modes_Motion_Sensing_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Automatic_modes_Motion_Sensing_r1_Motion_react(long transitioned_before) {
		/* The reactions of state Motion. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_modes_Automatic_modes_Motion_Sensing_r1_Motion();
				timeEvents[0] = false;
				enterSequence_modes_Automatic_modes_Motion_Sensing_r1_Still_default();
				modes_Automatic_modes_Motion_Sensing_react(0l);
				transitioned_after = 0l;
			} else {
				if (motion.detected) {
					exitSequence_modes_Automatic_modes_Motion_Sensing_r1_Motion();
					enterSequence_modes_Automatic_modes_Motion_Sensing_r1_Motion_default();
					modes_Automatic_modes_Motion_Sensing_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Automatic_modes_Motion_Sensing_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Automatic_modes_Light_Sensing_react(long transitioned_before) {
		/* The reactions of state Light Sensing. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (hmi.toggleMode) {
				exitSequence_modes_Automatic_modes_Light_Sensing();
				enterSequence_modes_Automatic_modes_Motion_Sensing_default();
				modes_Automatic_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Automatic_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Automatic_modes_Light_Sensing_r1_Bright_react(long transitioned_before) {
		/* The reactions of state Bright. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (luminosity.dark) {
				exitSequence_modes_Automatic_modes_Light_Sensing_r1_Bright();
				enterSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark_default();
				modes_Automatic_modes_Light_Sensing_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Automatic_modes_Light_Sensing_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Automatic_modes_Light_Sensing_r1_Dark_react(long transitioned_before) {
		/* The reactions of state Dark. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (luminosity.bright) {
				exitSequence_modes_Automatic_modes_Light_Sensing_r1_Dark();
				enterSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright_default();
				modes_Automatic_modes_Light_Sensing_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Automatic_modes_Light_Sensing_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Automatic_modes_Light_Sensing_r1_Getting_Dark_react(long transitioned_before) {
		/* The reactions of state Getting Dark. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (luminosity.bright) {
				exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark();
				enterSequence_modes_Automatic_modes_Light_Sensing_r1_Bright_default();
				modes_Automatic_modes_Light_Sensing_react(0l);
				transitioned_after = 0l;
			} else {
				if (timeEvents[1]) {
					exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Dark();
					timeEvents[1] = false;
					enterSequence_modes_Automatic_modes_Light_Sensing_r1_Dark_default();
					modes_Automatic_modes_Light_Sensing_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Automatic_modes_Light_Sensing_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Automatic_modes_Light_Sensing_r1_Getting_Bright_react(long transitioned_before) {
		/* The reactions of state Getting Bright. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (luminosity.dark) {
				exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright();
				enterSequence_modes_Automatic_modes_Light_Sensing_r1_Dark_default();
				modes_Automatic_modes_Light_Sensing_react(0l);
				transitioned_after = 0l;
			} else {
				if (timeEvents[2]) {
					exitSequence_modes_Automatic_modes_Light_Sensing_r1_Getting_Bright();
					timeEvents[2] = false;
					enterSequence_modes_Automatic_modes_Light_Sensing_r1_Bright_default();
					modes_Automatic_modes_Light_Sensing_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Automatic_modes_Light_Sensing_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Manual_react(long transitioned_before) {
		/* The reactions of state Manual. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (hmi.toggleMode) {
				exitSequence_modes_Manual();
				enterSequence_modes_Automatic_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long modes_Manual_r1_Off_react(long transitioned_before) {
		/* The reactions of state Off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (hmi.switchEvent) {
				exitSequence_modes_Manual_r1_Off();
				setBrightness(5l);
				enterSequence_modes_Manual_r1_On_default();
				modes_Manual_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Manual_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Manual_r1_On_react(long transitioned_before) {
		/* The reactions of state On. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (hmi.switchEvent) {
				exitSequence_modes_Manual_r1_On();
				enterSequence_modes_Manual_r1_Off_default();
				modes_Manual_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (((hmi.changeBrightness) && (getBrightness()>1l))) {
				setBrightness(getBrightness() - 1l);
			}
			if (((hmi.changeBrightness) && (getBrightness()<=1l))) {
				setBrightness(10l);
			}
			transitioned_after = modes_Manual_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
