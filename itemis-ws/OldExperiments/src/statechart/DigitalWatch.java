/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;

public class DigitalWatch implements ITimed, ICycleBased {
	public static class Display {
		public interface OperationCallback {
		
			public void updateLCD(long first, long second, long third, String text);
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private long first;
		
		public long getFirst() {
			return first;
		}
		
		public void setFirst(long value) {
			this.first = value;
		}
		
		private long second;
		
		public long getSecond() {
			return second;
		}
		
		public void setSecond(long value) {
			this.second = value;
		}
		
		private long third;
		
		public long getThird() {
			return third;
		}
		
		public void setThird(long value) {
			this.third = value;
		}
		
		private String text;
		
		public String getText() {
			return text;
		}
		
		public void setText(String value) {
			this.text = value;
		}
		
	}
	
	public static class Button {
		private boolean mode;
		
		
		public void raiseMode() {
			mode = true;
		}
		
		private boolean light;
		
		
		public void raiseLight() {
			light = true;
		}
		
		private boolean light_r;
		
		
		public void raiseLight_r() {
			light_r = true;
		}
		
		private boolean set;
		
		
		public void raiseSet() {
			set = true;
		}
		
		private boolean onoff;
		
		
		public void raiseOnoff() {
			onoff = true;
		}
		
	}
	
	private static class ButtonEvBuf {
		private boolean mode;
		private boolean light;
		private boolean light_r;
		private boolean set;
		private boolean onoff;
	}
	private static class TimeEventsEvBuf {
		private boolean digitalWatch_modes_Regular_clock_regular_Clock_double_click_wait_time_event_0;
		private boolean digitalWatch_modes_Regular_clock_regular_Date_time_event_0;
		private boolean digitalWatch_modes_Alarm_time_event_0;
		private boolean digitalWatch_modes_SetTime_time_event_0;
		private boolean digitalWatch_chime_beep_time_event_0;
		private boolean digitalWatch_time_event_0;
	}
	private static class DigitalWatchEvBuf {
		private ButtonEvBuf ifaceButton = new ButtonEvBuf();
		private TimeEventsEvBuf timeEvents = new TimeEventsEvBuf();
	}
	protected Display display;
	
	protected Button button;
	
	public enum State {
		MODES_REGULAR,
		MODES_REGULAR_CLOCK_REGULAR_CLOCK,
		MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_WAIT,
		MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL,
		MODES_REGULAR_CLOCK_REGULAR_DATE,
		MODES_REGULAR_CLOCK_REGULAR_ALARM_1,
		MODES_REGULAR_CLOCK_REGULAR_ALARM_2,
		MODES_REGULAR_CLOCK_REGULAR_SET_CHIME,
		MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH,
		MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_ZERO,
		MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION,
		MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR,
		MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP,
		MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_COUNT,
		MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE,
		MODES_ALARM,
		MODES_ALARM_R1_ALARM_1_BEEPS,
		MODES_ALARM_R1_ALARM_2_BEEPS,
		MODES_SETTIME,
		MODES_SETTIME_SET_TIME_SEC,
		MODES_SETTIME_SET_TIME_MIN,
		MODES_SETTIME_SET_TIME_HR,
		CHIME_QUIET,
		CHIME_BEEP,
		LIGHT_OFF,
		LIGHT_ON,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[5];
	private final State[] stateVector = new State[4];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private long time;
	
	protected long getTime() {
		return time;
	}
	
	protected void setTime(long value) {
		this.time = value;
	}
	
	
	private long alarm_1_time;
	
	protected long getAlarm_1_time() {
		return alarm_1_time;
	}
	
	protected void setAlarm_1_time(long value) {
		this.alarm_1_time = value;
	}
	
	
	private boolean alarm_1_enabled;
	
	protected boolean getAlarm_1_enabled() {
		return alarm_1_enabled;
	}
	
	protected void setAlarm_1_enabled(boolean value) {
		this.alarm_1_enabled = value;
	}
	
	
	private long alarm_2_time;
	
	protected long getAlarm_2_time() {
		return alarm_2_time;
	}
	
	protected void setAlarm_2_time(long value) {
		this.alarm_2_time = value;
	}
	
	
	private boolean alarm_2_enabled;
	
	protected boolean getAlarm_2_enabled() {
		return alarm_2_enabled;
	}
	
	protected void setAlarm_2_enabled(boolean value) {
		this.alarm_2_enabled = value;
	}
	
	
	private boolean chime_enabled;
	
	protected boolean getChime_enabled() {
		return chime_enabled;
	}
	
	protected void setChime_enabled(boolean value) {
		this.chime_enabled = value;
	}
	
	
	private long stop_time;
	
	protected long getStop_time() {
		return stop_time;
	}
	
	protected void setStop_time(long value) {
		this.stop_time = value;
	}
	
	
	private long stop_lap_time;
	
	protected long getStop_lap_time() {
		return stop_lap_time;
	}
	
	protected void setStop_lap_time(long value) {
		this.stop_lap_time = value;
	}
	
	
	private long stop_display_time;
	
	protected long getStop_display_time() {
		return stop_display_time;
	}
	
	protected void setStop_display_time(long value) {
		this.stop_display_time = value;
	}
	
	
	private long time_set;
	
	protected long getTime_set() {
		return time_set;
	}
	
	protected void setTime_set(long value) {
		this.time_set = value;
	}
	
	
	private DigitalWatchEvBuf current = new DigitalWatchEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public DigitalWatch() {
		display = new Display();
		button = new Button();
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 5; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart DigitalWatch */
		display.setFirst(0l);
		display.setSecond(0l);
		display.setThird(0l);
		display.setText("");
		setTime(0l);
		setAlarm_1_time(0l);
		setAlarm_1_enabled(false);
		setAlarm_2_time(0l);
		setAlarm_2_enabled(false);
		setChime_enabled(false);
		setStop_time(0l);
		setStop_lap_time(0l);
		setStop_display_time(0l);
		setTime_set(0l);
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.display.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Display must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		microStep();
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.display.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Display must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart DigitalWatch */
		/* Entry action for statechart 'DigitalWatch'. */
		timerService.setTimer(this, 5, 100l, true);
		enterSequence_modes_default();
		enterSequence_chime_default();
		enterSequence_light_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart DigitalWatch */
		exitSequence_modes();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		exitSequence_chime();
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		exitSequence_light();
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		/* Exit action for state 'DigitalWatch'. */
		timerService.unsetTimer(this, 5);
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		current.ifaceButton.mode = button.mode;
		button.mode = false;
		current.ifaceButton.light = button.light;
		button.light = false;
		current.ifaceButton.light_r = button.light_r;
		button.light_r = false;
		current.ifaceButton.set = button.set;
		button.set = false;
		current.ifaceButton.onoff = button.onoff;
		button.onoff = false;
		current.timeEvents.digitalWatch_modes_Regular_clock_regular_Clock_double_click_wait_time_event_0 = timeEvents[0];
		timeEvents[0] = false;
		current.timeEvents.digitalWatch_modes_Regular_clock_regular_Date_time_event_0 = timeEvents[1];
		timeEvents[1] = false;
		current.timeEvents.digitalWatch_modes_Alarm_time_event_0 = timeEvents[2];
		timeEvents[2] = false;
		current.timeEvents.digitalWatch_modes_SetTime_time_event_0 = timeEvents[3];
		timeEvents[3] = false;
		current.timeEvents.digitalWatch_chime_beep_time_event_0 = timeEvents[4];
		timeEvents[4] = false;
		current.timeEvents.digitalWatch_time_event_0 = timeEvents[5];
		timeEvents[5] = false;
	}
	
	private void clearInEvents() {
		button.mode = false;
		button.light = false;
		button.light_r = false;
		button.set = false;
		button.onoff = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_WAIT:
			transitioned = modes_Regular_clock_regular_Clock_double_click_wait_react(transitioned);
			break;
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL:
			transitioned = modes_Regular_clock_regular_Clock_double_click_normal_react(transitioned);
			break;
		case MODES_REGULAR_CLOCK_REGULAR_DATE:
			transitioned = modes_Regular_clock_regular_Date_react(transitioned);
			break;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_1:
			transitioned = modes_Regular_clock_regular_Alarm_1_react(transitioned);
			break;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_2:
			transitioned = modes_Regular_clock_regular_Alarm_2_react(transitioned);
			break;
		case MODES_REGULAR_CLOCK_REGULAR_SET_CHIME:
			transitioned = modes_Regular_clock_regular_Set_Chime_react(transitioned);
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_ZERO:
			transitioned = modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero_react(transitioned);
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR:
			transitioned = modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular_react(transitioned);
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP:
			transitioned = modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap_react(transitioned);
			break;
		case MODES_ALARM_R1_ALARM_1_BEEPS:
			transitioned = modes_Alarm_r1_alarm_1_beeps_react(transitioned);
			break;
		case MODES_ALARM_R1_ALARM_2_BEEPS:
			transitioned = modes_Alarm_r1_alarm_2_beeps_react(transitioned);
			break;
		case MODES_SETTIME_SET_TIME_SEC:
			transitioned = modes_SetTime_set_time_sec_react(transitioned);
			break;
		case MODES_SETTIME_SET_TIME_MIN:
			transitioned = modes_SetTime_set_time_min_react(transitioned);
			break;
		case MODES_SETTIME_SET_TIME_HR:
			transitioned = modes_SetTime_set_time_hr_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_COUNT:
				transitioned = modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count_react(transitioned);
				break;
			case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE:
				transitioned = modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_pause_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case CHIME_QUIET:
				transitioned = chime_quiet_react(transitioned);
				break;
			case CHIME_BEEP:
				transitioned = chime_beep_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case LIGHT_OFF:
				light_off_react(transitioned);
				break;
			case LIGHT_ON:
				light_on_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MODES_REGULAR:
			return stateVector[0].ordinal() >= State.
					MODES_REGULAR.ordinal()&& stateVector[0].ordinal() <= State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE.ordinal();
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK:
			return stateVector[0].ordinal() >= State.
					MODES_REGULAR_CLOCK_REGULAR_CLOCK.ordinal()&& stateVector[0].ordinal() <= State.MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL.ordinal();
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_WAIT:
			return stateVector[0] == State.MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_WAIT;
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL:
			return stateVector[0] == State.MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL;
		case MODES_REGULAR_CLOCK_REGULAR_DATE:
			return stateVector[0] == State.MODES_REGULAR_CLOCK_REGULAR_DATE;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_1:
			return stateVector[0] == State.MODES_REGULAR_CLOCK_REGULAR_ALARM_1;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_2:
			return stateVector[0] == State.MODES_REGULAR_CLOCK_REGULAR_ALARM_2;
		case MODES_REGULAR_CLOCK_REGULAR_SET_CHIME:
			return stateVector[0] == State.MODES_REGULAR_CLOCK_REGULAR_SET_CHIME;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH:
			return stateVector[0].ordinal() >= State.
					MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH.ordinal()&& stateVector[0].ordinal() <= State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE.ordinal();
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_ZERO:
			return stateVector[0] == State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_ZERO;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION:
			return stateVector[0].ordinal() >= State.
					MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION.ordinal()&& stateVector[0].ordinal() <= State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE.ordinal();
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR:
			return stateVector[0] == State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP:
			return stateVector[0] == State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_COUNT:
			return stateVector[1] == State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_COUNT;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE:
			return stateVector[1] == State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE;
		case MODES_ALARM:
			return stateVector[0].ordinal() >= State.
					MODES_ALARM.ordinal()&& stateVector[0].ordinal() <= State.MODES_ALARM_R1_ALARM_2_BEEPS.ordinal();
		case MODES_ALARM_R1_ALARM_1_BEEPS:
			return stateVector[0] == State.MODES_ALARM_R1_ALARM_1_BEEPS;
		case MODES_ALARM_R1_ALARM_2_BEEPS:
			return stateVector[0] == State.MODES_ALARM_R1_ALARM_2_BEEPS;
		case MODES_SETTIME:
			return stateVector[0].ordinal() >= State.
					MODES_SETTIME.ordinal()&& stateVector[0].ordinal() <= State.MODES_SETTIME_SET_TIME_HR.ordinal();
		case MODES_SETTIME_SET_TIME_SEC:
			return stateVector[0] == State.MODES_SETTIME_SET_TIME_SEC;
		case MODES_SETTIME_SET_TIME_MIN:
			return stateVector[0] == State.MODES_SETTIME_SET_TIME_MIN;
		case MODES_SETTIME_SET_TIME_HR:
			return stateVector[0] == State.MODES_SETTIME_SET_TIME_HR;
		case CHIME_QUIET:
			return stateVector[2] == State.CHIME_QUIET;
		case CHIME_BEEP:
			return stateVector[2] == State.CHIME_BEEP;
		case LIGHT_OFF:
			return stateVector[3] == State.LIGHT_OFF;
		case LIGHT_ON:
			return stateVector[3] == State.LIGHT_ON;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public Display display() {
		return display;
	}
	
	public Button button() {
		return button;
	}
	
	
	private void effect_modes_Regular_tr2() {
		exitSequence_modes_Regular();
		enterSequence_modes_SetTime_default();
	}
	
	private void effect_modes_SetTime_tr0() {
		exitSequence_modes_SetTime();
		react_modes_Regular_clock_regular_time_set();
	}
	
	/* Entry action for state 'Clock'. */
	private void entryAction_modes_Regular_clock_regular_Clock() {
		/* Entry action for state 'Clock'. */
		if (getTime_set()>0l) {
			setTime(time_set);
		}
	}
	
	/* Entry action for state 'wait'. */
	private void entryAction_modes_Regular_clock_regular_Clock_double_click_wait() {
		/* Entry action for state 'wait'. */
		timerService.setTimer(this, 0, (2l * 1000l), false);
	}
	
	/* Entry action for state 'Date'. */
	private void entryAction_modes_Regular_clock_regular_Date() {
		/* Entry action for state 'Date'. */
		timerService.setTimer(this, 1, (30l * 1000l), false);
		display.setFirst(24l);
		display.setSecond(12l);
		display.setThird(2005l);
		display.setText("Date");
	}
	
	/* Entry action for state 'Alarm 1'. */
	private void entryAction_modes_Regular_clock_regular_Alarm_1() {
		/* Entry action for state 'Alarm 1'. */
		if (getTime_set()>0l) {
			setAlarm_1_time(time_set);
		}
	}
	
	/* Entry action for state 'Alarm 2'. */
	private void entryAction_modes_Regular_clock_regular_Alarm_2() {
		/* Entry action for state 'Alarm 2'. */
		if (getTime_set()>0l) {
			setAlarm_2_time(time_set);
		}
	}
	
	/* Entry action for state 'Set Chime'. */
	private void entryAction_modes_Regular_clock_regular_Set_Chime() {
		/* Entry action for state 'Set Chime'. */
		display.setText((chime_enabled) ? "Chime ON" : "Chime OFF");
	}
	
	/* Entry action for state 'Zero'. */
	private void entryAction_modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero() {
		/* Entry action for state 'Zero'. */
		setStop_time(0l);
		setStop_lap_time(0l);
	}
	
	/* Entry action for state 'lap'. */
	private void entryAction_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap() {
		/* Entry action for state 'lap'. */
		setStop_lap_time((stop_time - stop_lap_time));
		setStop_display_time(stop_lap_time);
	}
	
	/* Entry action for state 'Alarm'. */
	private void entryAction_modes_Alarm() {
		/* Entry action for state 'Alarm'. */
		timerService.setTimer(this, 2, (30l * 1000l), false);
	}
	
	/* Entry action for state 'alarm 1 beeps'. */
	private void entryAction_modes_Alarm_r1_alarm_1_beeps() {
		/* Entry action for state 'alarm 1 beeps'. */
		display.setText("Alarm 1 rings");
	}
	
	/* Entry action for state 'alarm 2 beeps'. */
	private void entryAction_modes_Alarm_r1_alarm_2_beeps() {
		/* Entry action for state 'alarm 2 beeps'. */
		display.setText("Alarm 2 rings");
	}
	
	/* Entry action for state 'SetTime'. */
	private void entryAction_modes_SetTime() {
		/* Entry action for state 'SetTime'. */
		timerService.setTimer(this, 3, (30l * 1000l), false);
		display.setFirst((((time_set / 36000l)) % 24l));
		display.setSecond((((time_set / 600l)) % 60l));
		display.setThird((((time_set / 10l)) % 60l));
		display.setText("Set Time");
	}
	
	/* Entry action for state 'beep'. */
	private void entryAction_chime_beep() {
		/* Entry action for state 'beep'. */
		timerService.setTimer(this, 4, (2l * 1000l), false);
	}
	
	/* Exit action for state 'wait'. */
	private void exitAction_modes_Regular_clock_regular_Clock_double_click_wait() {
		/* Exit action for state 'wait'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Date'. */
	private void exitAction_modes_Regular_clock_regular_Date() {
		/* Exit action for state 'Date'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Alarm'. */
	private void exitAction_modes_Alarm() {
		/* Exit action for state 'Alarm'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'SetTime'. */
	private void exitAction_modes_SetTime() {
		/* Exit action for state 'SetTime'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'beep'. */
	private void exitAction_chime_beep() {
		/* Exit action for state 'beep'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* 'default' enter sequence for state Regular */
	private void enterSequence_modes_Regular_default() {
		/* 'default' enter sequence for state Regular */
		enterSequence_modes_Regular_clock_regular_default();
	}
	
	/* 'default' enter sequence for state Clock */
	private void enterSequence_modes_Regular_clock_regular_Clock_default() {
		/* 'default' enter sequence for state Clock */
		entryAction_modes_Regular_clock_regular_Clock();
		enterSequence_modes_Regular_clock_regular_Clock_double_click_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state wait */
	private void enterSequence_modes_Regular_clock_regular_Clock_double_click_wait_default() {
		/* 'default' enter sequence for state wait */
		entryAction_modes_Regular_clock_regular_Clock_double_click_wait();
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_WAIT;
		stateConfVectorPosition = 0;
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state normal */
	private void enterSequence_modes_Regular_clock_regular_Clock_double_click_normal_default() {
		/* 'default' enter sequence for state normal */
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL;
		stateConfVectorPosition = 0;
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Date */
	private void enterSequence_modes_Regular_clock_regular_Date_default() {
		/* 'default' enter sequence for state Date */
		entryAction_modes_Regular_clock_regular_Date();
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_DATE;
		stateConfVectorPosition = 0;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Alarm 1 */
	private void enterSequence_modes_Regular_clock_regular_Alarm_1_default() {
		/* 'default' enter sequence for state Alarm 1 */
		entryAction_modes_Regular_clock_regular_Alarm_1();
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_ALARM_1;
		stateConfVectorPosition = 0;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Alarm 2 */
	private void enterSequence_modes_Regular_clock_regular_Alarm_2_default() {
		/* 'default' enter sequence for state Alarm 2 */
		entryAction_modes_Regular_clock_regular_Alarm_2();
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_ALARM_2;
		stateConfVectorPosition = 0;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Set Chime */
	private void enterSequence_modes_Regular_clock_regular_Set_Chime_default() {
		/* 'default' enter sequence for state Set Chime */
		entryAction_modes_Regular_clock_regular_Set_Chime();
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_SET_CHIME;
		stateConfVectorPosition = 0;
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Stop Watch */
	private void enterSequence_modes_Regular_clock_regular_Stop_Watch_default() {
		/* 'default' enter sequence for state Stop Watch */
		enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Zero */
	private void enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero_default() {
		/* 'default' enter sequence for state Zero */
		entryAction_modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero();
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_ZERO;
		stateConfVectorPosition = 0;
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Operation */
	private void enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_default() {
		/* 'default' enter sequence for state Operation */
		enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_default();
		enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_default();
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state regular */
	private void enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular_default() {
		/* 'default' enter sequence for state regular */
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR;
		stateConfVectorPosition = 0;
		historyVector[3] = stateVector[0];
	}
	
	/* 'default' enter sequence for state lap */
	private void enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap_default() {
		/* 'default' enter sequence for state lap */
		entryAction_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap();
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP;
		stateConfVectorPosition = 0;
		historyVector[3] = stateVector[0];
	}
	
	/* 'default' enter sequence for state count */
	private void enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count_default() {
		/* 'default' enter sequence for state count */
		stateVector[1] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_COUNT;
		stateConfVectorPosition = 1;
		historyVector[4] = stateVector[1];
	}
	
	/* 'default' enter sequence for state pause */
	private void enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_pause_default() {
		/* 'default' enter sequence for state pause */
		stateVector[1] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE;
		stateConfVectorPosition = 1;
		historyVector[4] = stateVector[1];
	}
	
	/* 'default' enter sequence for state alarm 1 beeps */
	private void enterSequence_modes_Alarm_r1_alarm_1_beeps_default() {
		/* 'default' enter sequence for state alarm 1 beeps */
		entryAction_modes_Alarm_r1_alarm_1_beeps();
		stateVector[0] = State.MODES_ALARM_R1_ALARM_1_BEEPS;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state alarm 2 beeps */
	private void enterSequence_modes_Alarm_r1_alarm_2_beeps_default() {
		/* 'default' enter sequence for state alarm 2 beeps */
		entryAction_modes_Alarm_r1_alarm_2_beeps();
		stateVector[0] = State.MODES_ALARM_R1_ALARM_2_BEEPS;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state SetTime */
	private void enterSequence_modes_SetTime_default() {
		/* 'default' enter sequence for state SetTime */
		entryAction_modes_SetTime();
		enterSequence_modes_SetTime_set_time_default();
	}
	
	/* 'default' enter sequence for state sec */
	private void enterSequence_modes_SetTime_set_time_sec_default() {
		/* 'default' enter sequence for state sec */
		stateVector[0] = State.MODES_SETTIME_SET_TIME_SEC;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state min */
	private void enterSequence_modes_SetTime_set_time_min_default() {
		/* 'default' enter sequence for state min */
		stateVector[0] = State.MODES_SETTIME_SET_TIME_MIN;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state hr */
	private void enterSequence_modes_SetTime_set_time_hr_default() {
		/* 'default' enter sequence for state hr */
		stateVector[0] = State.MODES_SETTIME_SET_TIME_HR;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state quiet */
	private void enterSequence_chime_quiet_default() {
		/* 'default' enter sequence for state quiet */
		stateVector[2] = State.CHIME_QUIET;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state beep */
	private void enterSequence_chime_beep_default() {
		/* 'default' enter sequence for state beep */
		entryAction_chime_beep();
		stateVector[2] = State.CHIME_BEEP;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_light_off_default() {
		/* 'default' enter sequence for state off */
		stateVector[3] = State.LIGHT_OFF;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state on */
	private void enterSequence_light_on_default() {
		/* 'default' enter sequence for state on */
		stateVector[3] = State.LIGHT_ON;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for region modes */
	private void enterSequence_modes_default() {
		/* 'default' enter sequence for region modes */
		react_modes__entry_Default();
	}
	
	/* 'default' enter sequence for region clock regular */
	private void enterSequence_modes_Regular_clock_regular_default() {
		/* 'default' enter sequence for region clock regular */
		react_modes_Regular_clock_regular__entry_Default();
	}
	
	/* deep enterSequence with history in child clock regular */
	private void deepEnterSequence_modes_Regular_clock_regular() {
		/* deep enterSequence with history in child clock regular */
		switch (historyVector[0]) {
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_WAIT:
			/* enterSequence with history in child Clock for leaf wait */
			entryAction_modes_Regular_clock_regular_Clock();
			deepEnterSequence_modes_Regular_clock_regular_Clock_double_click();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL:
			/* enterSequence with history in child Clock for leaf normal */
			entryAction_modes_Regular_clock_regular_Clock();
			deepEnterSequence_modes_Regular_clock_regular_Clock_double_click();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_DATE:
			/* enterSequence with history in child Date for leaf Date */
			enterSequence_modes_Regular_clock_regular_Date_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_1:
			/* enterSequence with history in child Alarm 1 for leaf Alarm 1 */
			enterSequence_modes_Regular_clock_regular_Alarm_1_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_2:
			/* enterSequence with history in child Alarm 2 for leaf Alarm 2 */
			enterSequence_modes_Regular_clock_regular_Alarm_2_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_SET_CHIME:
			/* enterSequence with history in child Set Chime for leaf Set Chime */
			enterSequence_modes_Regular_clock_regular_Set_Chime_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_ZERO:
			/* enterSequence with history in child Stop Watch for leaf Zero */
			deepEnterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR:
			/* enterSequence with history in child Stop Watch for leaf regular */
			deepEnterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP:
			/* enterSequence with history in child Stop Watch for leaf lap */
			deepEnterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch();
			break;
		default:
			break;
		}
	}
	
	/* shallow enterSequence with history in child clock regular */
	private void shallowEnterSequence_modes_Regular_clock_regular() {
		/* shallow enterSequence with history in child clock regular */
		switch (historyVector[0]) {
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_WAIT:
			enterSequence_modes_Regular_clock_regular_Clock_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL:
			enterSequence_modes_Regular_clock_regular_Clock_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_DATE:
			enterSequence_modes_Regular_clock_regular_Date_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_1:
			enterSequence_modes_Regular_clock_regular_Alarm_1_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_2:
			enterSequence_modes_Regular_clock_regular_Alarm_2_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_SET_CHIME:
			enterSequence_modes_Regular_clock_regular_Set_Chime_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_ZERO:
			enterSequence_modes_Regular_clock_regular_Stop_Watch_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR:
			enterSequence_modes_Regular_clock_regular_Stop_Watch_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP:
			enterSequence_modes_Regular_clock_regular_Stop_Watch_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region double click */
	private void enterSequence_modes_Regular_clock_regular_Clock_double_click_default() {
		/* 'default' enter sequence for region double click */
		react_modes_Regular_clock_regular_Clock_double_click__entry_Default();
	}
	
	/* deep enterSequence with history in child double click */
	private void deepEnterSequence_modes_Regular_clock_regular_Clock_double_click() {
		/* deep enterSequence with history in child double click */
		switch (historyVector[1]) {
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_WAIT:
			/* enterSequence with history in child wait for leaf wait */
			enterSequence_modes_Regular_clock_regular_Clock_double_click_wait_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL:
			/* enterSequence with history in child normal for leaf normal */
			enterSequence_modes_Regular_clock_regular_Clock_double_click_normal_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region stopwatch */
	private void enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_default() {
		/* 'default' enter sequence for region stopwatch */
		react_modes_Regular_clock_regular_Stop_Watch_stopwatch__entry_Default();
	}
	
	/* deep enterSequence with history in child stopwatch */
	private void deepEnterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch() {
		/* deep enterSequence with history in child stopwatch */
		switch (historyVector[2]) {
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_ZERO:
			/* enterSequence with history in child Zero for leaf Zero */
			enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR:
			/* enterSequence with history in child Operation for leaf regular */
			deepEnterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display();
			deepEnterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP:
			/* enterSequence with history in child Operation for leaf lap */
			deepEnterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display();
			deepEnterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region display */
	private void enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_default() {
		/* 'default' enter sequence for region display */
		react_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display__entry_Default();
	}
	
	/* deep enterSequence with history in child display */
	private void deepEnterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display() {
		/* deep enterSequence with history in child display */
		switch (historyVector[3]) {
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR:
			/* enterSequence with history in child regular for leaf regular */
			enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP:
			/* enterSequence with history in child lap for leaf lap */
			enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region run */
	private void enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_default() {
		/* 'default' enter sequence for region run */
		react_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run__entry_Default();
	}
	
	/* deep enterSequence with history in child run */
	private void deepEnterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run() {
		/* deep enterSequence with history in child run */
		switch (historyVector[4]) {
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_COUNT:
			/* enterSequence with history in child count for leaf count */
			enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count_default();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE:
			/* enterSequence with history in child pause for leaf pause */
			enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_pause_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region set time */
	private void enterSequence_modes_SetTime_set_time_default() {
		/* 'default' enter sequence for region set time */
		react_modes_SetTime_set_time__entry_Default();
	}
	
	/* 'default' enter sequence for region chime */
	private void enterSequence_chime_default() {
		/* 'default' enter sequence for region chime */
		react_chime__entry_Default();
	}
	
	/* 'default' enter sequence for region light */
	private void enterSequence_light_default() {
		/* 'default' enter sequence for region light */
		react_light__entry_Default();
	}
	
	/* Default exit sequence for state Regular */
	private void exitSequence_modes_Regular() {
		/* Default exit sequence for state Regular */
		exitSequence_modes_Regular_clock_regular();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Clock */
	private void exitSequence_modes_Regular_clock_regular_Clock() {
		/* Default exit sequence for state Clock */
		exitSequence_modes_Regular_clock_regular_Clock_double_click();
		stateVector[0] = State.MODES_REGULAR;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state wait */
	private void exitSequence_modes_Regular_clock_regular_Clock_double_click_wait() {
		/* Default exit sequence for state wait */
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_CLOCK;
		stateConfVectorPosition = 0;
		exitAction_modes_Regular_clock_regular_Clock_double_click_wait();
	}
	
	/* Default exit sequence for state normal */
	private void exitSequence_modes_Regular_clock_regular_Clock_double_click_normal() {
		/* Default exit sequence for state normal */
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_CLOCK;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Date */
	private void exitSequence_modes_Regular_clock_regular_Date() {
		/* Default exit sequence for state Date */
		stateVector[0] = State.MODES_REGULAR;
		stateConfVectorPosition = 0;
		exitAction_modes_Regular_clock_regular_Date();
	}
	
	/* Default exit sequence for state Alarm 1 */
	private void exitSequence_modes_Regular_clock_regular_Alarm_1() {
		/* Default exit sequence for state Alarm 1 */
		stateVector[0] = State.MODES_REGULAR;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Alarm 2 */
	private void exitSequence_modes_Regular_clock_regular_Alarm_2() {
		/* Default exit sequence for state Alarm 2 */
		stateVector[0] = State.MODES_REGULAR;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Set Chime */
	private void exitSequence_modes_Regular_clock_regular_Set_Chime() {
		/* Default exit sequence for state Set Chime */
		stateVector[0] = State.MODES_REGULAR;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Stop Watch */
	private void exitSequence_modes_Regular_clock_regular_Stop_Watch() {
		/* Default exit sequence for state Stop Watch */
		exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch();
		stateVector[0] = State.MODES_REGULAR;
		stateVector[1] = State.MODES_REGULAR;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Zero */
	private void exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero() {
		/* Default exit sequence for state Zero */
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Operation */
	private void exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation() {
		/* Default exit sequence for state Operation */
		exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display();
		exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run();
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH;
		stateVector[1] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state regular */
	private void exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular() {
		/* Default exit sequence for state regular */
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state lap */
	private void exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap() {
		/* Default exit sequence for state lap */
		stateVector[0] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state count */
	private void exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count() {
		/* Default exit sequence for state count */
		stateVector[1] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state pause */
	private void exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_pause() {
		/* Default exit sequence for state pause */
		stateVector[1] = State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Alarm */
	private void exitSequence_modes_Alarm() {
		/* Default exit sequence for state Alarm */
		exitSequence_modes_Alarm_r1();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_modes_Alarm();
	}
	
	/* Default exit sequence for state alarm 1 beeps */
	private void exitSequence_modes_Alarm_r1_alarm_1_beeps() {
		/* Default exit sequence for state alarm 1 beeps */
		stateVector[0] = State.MODES_ALARM;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state alarm 2 beeps */
	private void exitSequence_modes_Alarm_r1_alarm_2_beeps() {
		/* Default exit sequence for state alarm 2 beeps */
		stateVector[0] = State.MODES_ALARM;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state SetTime */
	private void exitSequence_modes_SetTime() {
		/* Default exit sequence for state SetTime */
		exitSequence_modes_SetTime_set_time();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_modes_SetTime();
	}
	
	/* Default exit sequence for state sec */
	private void exitSequence_modes_SetTime_set_time_sec() {
		/* Default exit sequence for state sec */
		stateVector[0] = State.MODES_SETTIME;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state min */
	private void exitSequence_modes_SetTime_set_time_min() {
		/* Default exit sequence for state min */
		stateVector[0] = State.MODES_SETTIME;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state hr */
	private void exitSequence_modes_SetTime_set_time_hr() {
		/* Default exit sequence for state hr */
		stateVector[0] = State.MODES_SETTIME;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state quiet */
	private void exitSequence_chime_quiet() {
		/* Default exit sequence for state quiet */
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state beep */
	private void exitSequence_chime_beep() {
		/* Default exit sequence for state beep */
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		exitAction_chime_beep();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_light_off() {
		/* Default exit sequence for state off */
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state on */
	private void exitSequence_light_on() {
		/* Default exit sequence for state on */
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for region modes */
	private void exitSequence_modes() {
		/* Default exit sequence for region modes */
		switch (stateVector[0]) {
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK:
			exitSequence_modes_Regular_clock_regular_Clock();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_WAIT:
			exitSequence_modes_Regular_clock_regular_Clock_double_click_wait();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL:
			exitSequence_modes_Regular_clock_regular_Clock_double_click_normal();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_DATE:
			exitSequence_modes_Regular_clock_regular_Date();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_1:
			exitSequence_modes_Regular_clock_regular_Alarm_1();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_2:
			exitSequence_modes_Regular_clock_regular_Alarm_2();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_SET_CHIME:
			exitSequence_modes_Regular_clock_regular_Set_Chime();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_ZERO:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap();
			break;
		case MODES_ALARM:
			exitSequence_modes_Alarm();
			break;
		case MODES_ALARM_R1_ALARM_1_BEEPS:
			exitSequence_modes_Alarm_r1_alarm_1_beeps();
			exitAction_modes_Alarm();
			break;
		case MODES_ALARM_R1_ALARM_2_BEEPS:
			exitSequence_modes_Alarm_r1_alarm_2_beeps();
			exitAction_modes_Alarm();
			break;
		case MODES_SETTIME:
			exitSequence_modes_SetTime();
			break;
		case MODES_SETTIME_SET_TIME_SEC:
			exitSequence_modes_SetTime_set_time_sec();
			exitAction_modes_SetTime();
			break;
		case MODES_SETTIME_SET_TIME_MIN:
			exitSequence_modes_SetTime_set_time_min();
			exitAction_modes_SetTime();
			break;
		case MODES_SETTIME_SET_TIME_HR:
			exitSequence_modes_SetTime_set_time_hr();
			exitAction_modes_SetTime();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_COUNT:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_pause();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region clock regular */
	private void exitSequence_modes_Regular_clock_regular() {
		/* Default exit sequence for region clock regular */
		switch (stateVector[0]) {
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK:
			exitSequence_modes_Regular_clock_regular_Clock();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_WAIT:
			exitSequence_modes_Regular_clock_regular_Clock_double_click_wait();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL:
			exitSequence_modes_Regular_clock_regular_Clock_double_click_normal();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_DATE:
			exitSequence_modes_Regular_clock_regular_Date();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_1:
			exitSequence_modes_Regular_clock_regular_Alarm_1();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_ALARM_2:
			exitSequence_modes_Regular_clock_regular_Alarm_2();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_SET_CHIME:
			exitSequence_modes_Regular_clock_regular_Set_Chime();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_ZERO:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_COUNT:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_pause();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region double click */
	private void exitSequence_modes_Regular_clock_regular_Clock_double_click() {
		/* Default exit sequence for region double click */
		switch (stateVector[0]) {
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_WAIT:
			exitSequence_modes_Regular_clock_regular_Clock_double_click_wait();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_CLOCK_DOUBLE_CLICK_NORMAL:
			exitSequence_modes_Regular_clock_regular_Clock_double_click_normal();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region stopwatch */
	private void exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch() {
		/* Default exit sequence for region stopwatch */
		switch (stateVector[0]) {
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_ZERO:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_COUNT:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_pause();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region display */
	private void exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display() {
		/* Default exit sequence for region display */
		switch (stateVector[0]) {
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_LAP:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region run */
	private void exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run() {
		/* Default exit sequence for region run */
		switch (stateVector[1]) {
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_COUNT:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count();
			break;
		case MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE:
			exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_pause();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_modes_Alarm_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[0]) {
		case MODES_ALARM_R1_ALARM_1_BEEPS:
			exitSequence_modes_Alarm_r1_alarm_1_beeps();
			break;
		case MODES_ALARM_R1_ALARM_2_BEEPS:
			exitSequence_modes_Alarm_r1_alarm_2_beeps();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region set time */
	private void exitSequence_modes_SetTime_set_time() {
		/* Default exit sequence for region set time */
		switch (stateVector[0]) {
		case MODES_SETTIME_SET_TIME_SEC:
			exitSequence_modes_SetTime_set_time_sec();
			break;
		case MODES_SETTIME_SET_TIME_MIN:
			exitSequence_modes_SetTime_set_time_min();
			break;
		case MODES_SETTIME_SET_TIME_HR:
			exitSequence_modes_SetTime_set_time_hr();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region chime */
	private void exitSequence_chime() {
		/* Default exit sequence for region chime */
		switch (stateVector[2]) {
		case CHIME_QUIET:
			exitSequence_chime_quiet();
			break;
		case CHIME_BEEP:
			exitSequence_chime_beep();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region light */
	private void exitSequence_light() {
		/* Default exit sequence for region light */
		switch (stateVector[3]) {
		case LIGHT_OFF:
			exitSequence_light_off();
			break;
		case LIGHT_ON:
			exitSequence_light_on();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_modes__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_modes_Regular_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_modes_Regular_clock_regular__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_modes_Regular_clock_regular_Clock_default();
	}
	
	/* Default react sequence for deep history entry deep_entry */
	private void react_modes_Regular_clock_regular_deep_entry() {
		/* Default react sequence for deep history entry deep_entry */
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NULLSTATE$) {
			deepEnterSequence_modes_Regular_clock_regular();
		} else {
			enterSequence_modes_Regular_clock_regular_Clock_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_modes_Regular_clock_regular_Clock_double_click__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_modes_Regular_clock_regular_Clock_double_click_normal_default();
	}
	
	/* Default react sequence for shallow history entry time_set */
	private void react_modes_Regular_clock_regular_time_set() {
		/* Default react sequence for shallow history entry time_set */
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_modes_Regular_clock_regular();
		} else {
			enterSequence_modes_Regular_clock_regular_Clock_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count_default();
	}
	
	/* Default react sequence for deep history entry  */
	private void react_modes_Regular_clock_regular_Stop_Watch_stopwatch__entry_Default() {
		/* Default react sequence for deep history entry  */
		/* Enter the region with deep history */
		if (historyVector[2] != State.$NULLSTATE$) {
			deepEnterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch();
		} else {
			enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_modes_SetTime_set_time__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_modes_SetTime_set_time_hr_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_chime__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_chime_quiet_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_light__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_light_off_default();
	}
	
	/* The reactions of exit set_time. */
	private void react_modes_Regular_clock_regular_set_time() {
		/* The reactions of exit set_time. */
		effect_modes_Regular_tr2();
	}
	
	/* The reactions of exit exit_sec0. */
	private void react_modes_SetTime_set_time_exit_sec0() {
		/* The reactions of exit exit_sec0. */
		effect_modes_SetTime_tr0();
	}
	
	/* The reactions of state null. */
	private void react_modes_Regular_clock_regular_Stop_Watch_stopwatch__sync0() {
		/* The reactions of state null. */
		enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero_default();
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		if (current.timeEvents.digitalWatch_time_event_0) {
			setTime(getTime() + 1l);
		}
		if (getTime()>=864000l) {
			setTime(0l);
		}
		display.operationCallback.updateLCD(display.getFirst(), display.getSecond(), display.getThird(), display.getText());
		return transitioned_before;
	}
	
	private long modes_Regular_react(long transitioned_before) {
		/* The reactions of state Regular. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if ((getTime()==getAlarm_1_time() && getAlarm_1_enabled())) {
				exitSequence_modes_Regular();
				entryAction_modes_Alarm();
				enterSequence_modes_Alarm_r1_alarm_1_beeps_default();
				transitioned_after = 1l;
			} else {
				if ((getTime()==getAlarm_2_time() && getAlarm_2_enabled())) {
					exitSequence_modes_Regular();
					entryAction_modes_Alarm();
					enterSequence_modes_Alarm_r1_alarm_2_beeps_default();
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			setTime_set(0l);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Clock_react(long transitioned_before) {
		/* The reactions of state Clock. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceButton.onoff) {
				exitSequence_modes_Regular_clock_regular_Clock();
				enterSequence_modes_Regular_clock_regular_Date_default();
				modes_Regular_react(0l);
				transitioned_after = 0l;
			} else {
				if (current.ifaceButton.mode) {
					exitSequence_modes_Regular_clock_regular_Clock();
					enterSequence_modes_Regular_clock_regular_Alarm_1_default();
					modes_Regular_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if ((getTime() % 10l)==0l) {
				display.setFirst((((time / 36000l)) % 24l));
				display.setSecond((((time / 600l)) % 60l));
				display.setThird((((time / 10l)) % 60l));
				display.setText("hackster.io");
			}
			transitioned_after = modes_Regular_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Clock_double_click_wait_react(long transitioned_before) {
		/* The reactions of state wait. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.digitalWatch_modes_Regular_clock_regular_Clock_double_click_wait_time_event_0) {
				exitSequence_modes_Regular_clock_regular_Clock_double_click_wait();
				current.timeEvents.digitalWatch_modes_Regular_clock_regular_Clock_double_click_wait_time_event_0 = false;
				enterSequence_modes_Regular_clock_regular_Clock_double_click_normal_default();
				modes_Regular_clock_regular_Clock_react(0l);
				transitioned_after = 0l;
			} else {
				if (current.ifaceButton.set) {
					exitSequence_modes_Regular_clock_regular_Clock();
					setTime_set(time);
					react_modes_Regular_clock_regular_set_time();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Regular_clock_regular_Clock_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Clock_double_click_normal_react(long transitioned_before) {
		/* The reactions of state normal. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceButton.set) {
				exitSequence_modes_Regular_clock_regular_Clock_double_click_normal();
				enterSequence_modes_Regular_clock_regular_Clock_double_click_wait_default();
				modes_Regular_clock_regular_Clock_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Regular_clock_regular_Clock_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Date_react(long transitioned_before) {
		/* The reactions of state Date. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if ((current.ifaceButton.onoff || current.timeEvents.digitalWatch_modes_Regular_clock_regular_Date_time_event_0)) {
				exitSequence_modes_Regular_clock_regular_Date();
				current.timeEvents.digitalWatch_modes_Regular_clock_regular_Date_time_event_0 = false;
				enterSequence_modes_Regular_clock_regular_Clock_default();
				modes_Regular_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Regular_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Alarm_1_react(long transitioned_before) {
		/* The reactions of state Alarm 1. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceButton.set) {
				exitSequence_modes_Regular_clock_regular_Alarm_1();
				setTime_set(alarm_1_time);
				react_modes_Regular_clock_regular_set_time();
				transitioned_after = 0l;
			} else {
				if (current.ifaceButton.mode) {
					exitSequence_modes_Regular_clock_regular_Alarm_1();
					enterSequence_modes_Regular_clock_regular_Alarm_2_default();
					modes_Regular_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			display.setFirst((((alarm_1_time / 36000l)) % 24l));
			display.setSecond((((alarm_1_time / 600l)) % 60l));
			display.setThird((((alarm_1_time / 10l)) % 60l));
			display.setText((alarm_1_enabled) ? "Alarm 1 ON" : "Alarm 1 OFF");
			if (current.ifaceButton.onoff) {
				setAlarm_1_enabled(!(alarm_1_enabled));
			}
			transitioned_after = modes_Regular_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Alarm_2_react(long transitioned_before) {
		/* The reactions of state Alarm 2. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceButton.set) {
				exitSequence_modes_Regular_clock_regular_Alarm_2();
				setTime_set(alarm_2_time);
				react_modes_Regular_clock_regular_set_time();
				transitioned_after = 0l;
			} else {
				if (current.ifaceButton.mode) {
					exitSequence_modes_Regular_clock_regular_Alarm_2();
					enterSequence_modes_Regular_clock_regular_Set_Chime_default();
					modes_Regular_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			display.setFirst((((alarm_2_time / 36000l)) % 24l));
			display.setSecond((((alarm_2_time / 600l)) % 60l));
			display.setThird((((alarm_2_time / 10l)) % 60l));
			display.setText((alarm_2_enabled) ? "Alarm 2 ON" : "Alarm 2 OFF");
			if (current.ifaceButton.onoff) {
				setAlarm_2_enabled(!(alarm_2_enabled));
			}
			transitioned_after = modes_Regular_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Set_Chime_react(long transitioned_before) {
		/* The reactions of state Set Chime. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceButton.mode) {
				exitSequence_modes_Regular_clock_regular_Set_Chime();
				enterSequence_modes_Regular_clock_regular_Stop_Watch_default();
				modes_Regular_react(0l);
				transitioned_after = 0l;
			} else {
				if (current.ifaceButton.onoff) {
					exitSequence_modes_Regular_clock_regular_Set_Chime();
					setChime_enabled(!(chime_enabled));
					enterSequence_modes_Regular_clock_regular_Set_Chime_default();
					modes_Regular_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Regular_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Stop_Watch_react(long transitioned_before) {
		/* The reactions of state Stop Watch. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceButton.mode) {
				exitSequence_modes_Regular_clock_regular_Stop_Watch();
				enterSequence_modes_Regular_clock_regular_Clock_default();
				modes_Regular_react(0l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			display.setFirst((((alarm_2_time / 600l)) % 60l));
			display.setSecond((((stop_display_time / 10l)) % 60l));
			display.setThird(((stop_display_time) % 10l));
			display.setText("Stop");
			transitioned_after = modes_Regular_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero_react(long transitioned_before) {
		/* The reactions of state Zero. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceButton.light) {
				exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Zero();
				enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_default();
				modes_Regular_clock_regular_Stop_Watch_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Regular_clock_regular_Stop_Watch_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_react(long transitioned_before) {
		/* The reactions of state Operation. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = modes_Regular_clock_regular_Stop_Watch_react(transitioned_before);
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular_react(long transitioned_before) {
		/* The reactions of state regular. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((current.ifaceButton.onoff && isStateActive(State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_RUN_PAUSE)) && true)) {
				exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation();
				react_modes_Regular_clock_regular_Stop_Watch_stopwatch__sync0();
				transitioned_after = 0l;
			} else {
				if (current.ifaceButton.onoff) {
					exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular();
					enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			setStop_display_time(stop_time);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap_react(long transitioned_before) {
		/* The reactions of state lap. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceButton.onoff) {
				exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_lap();
				enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_display_regular_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count_react(long transitioned_before) {
		/* The reactions of state count. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (current.ifaceButton.light) {
				exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count();
				enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_pause_default();
				modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_react(0l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			setStop_time(getStop_time() + 1l);
			transitioned_after = modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_pause_react(long transitioned_before) {
		/* The reactions of state pause. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (current.ifaceButton.light) {
				exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_pause();
				enterSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_run_count_default();
				modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_react(0l);
				transitioned_after = 1l;
			} else {
				if (((true && isStateActive(State.MODES_REGULAR_CLOCK_REGULAR_STOP_WATCH_STOPWATCH_OPERATION_DISPLAY_REGULAR)) && current.ifaceButton.onoff)) {
					exitSequence_modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation();
					react_modes_Regular_clock_regular_Stop_Watch_stopwatch__sync0();
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = modes_Regular_clock_regular_Stop_Watch_stopwatch_Operation_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_Alarm_react(long transitioned_before) {
		/* The reactions of state Alarm. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if ((current.timeEvents.digitalWatch_modes_Alarm_time_event_0 || (current.ifaceButton.mode || (current.ifaceButton.light || (current.ifaceButton.set || current.ifaceButton.onoff))))) {
				exitSequence_modes_Alarm();
				current.timeEvents.digitalWatch_modes_Alarm_time_event_0 = false;
				react_modes_Regular_clock_regular_deep_entry();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long modes_Alarm_r1_alarm_1_beeps_react(long transitioned_before) {
		/* The reactions of state alarm 1 beeps. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = modes_Alarm_react(transitioned_before);
		return transitioned_after;
	}
	
	private long modes_Alarm_r1_alarm_2_beeps_react(long transitioned_before) {
		/* The reactions of state alarm 2 beeps. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = modes_Alarm_react(transitioned_before);
		return transitioned_after;
	}
	
	private long modes_SetTime_react(long transitioned_before) {
		/* The reactions of state SetTime. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if ((current.ifaceButton.light || current.timeEvents.digitalWatch_modes_SetTime_time_event_0)) {
				exitSequence_modes_SetTime();
				current.timeEvents.digitalWatch_modes_SetTime_time_event_0 = false;
				react_modes_Regular_clock_regular_time_set();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long modes_SetTime_set_time_sec_react(long transitioned_before) {
		/* The reactions of state sec. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceButton.set) {
				exitSequence_modes_SetTime_set_time_sec();
				setTime_set((((((3600l * display.first) + (60l * display.second)) + display.third)) * 10l));
				react_modes_SetTime_set_time_exit_sec0();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (current.ifaceButton.onoff) {
				display.setThird((((display.third + 1l)) % 60l));
			}
			transitioned_after = modes_SetTime_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_SetTime_set_time_min_react(long transitioned_before) {
		/* The reactions of state min. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceButton.set) {
				exitSequence_modes_SetTime_set_time_min();
				enterSequence_modes_SetTime_set_time_sec_default();
				modes_SetTime_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (current.ifaceButton.onoff) {
				display.setSecond(((((display.second + 1l)) % 60l)));
			}
			transitioned_after = modes_SetTime_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long modes_SetTime_set_time_hr_react(long transitioned_before) {
		/* The reactions of state hr. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceButton.set) {
				exitSequence_modes_SetTime_set_time_hr();
				enterSequence_modes_SetTime_set_time_min_default();
				modes_SetTime_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (current.ifaceButton.onoff) {
				display.setFirst(((((display.first + 1l)) % 24l)));
			}
			transitioned_after = modes_SetTime_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long chime_quiet_react(long transitioned_before) {
		/* The reactions of state quiet. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if ((getChime_enabled() && (getTime() % 36000l)==0l)) {
				exitSequence_chime_quiet();
				enterSequence_chime_beep_default();
				transitioned_after = 2l;
			}
		}
		return transitioned_after;
	}
	
	private long chime_beep_react(long transitioned_before) {
		/* The reactions of state beep. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (current.timeEvents.digitalWatch_chime_beep_time_event_0) {
				exitSequence_chime_beep();
				current.timeEvents.digitalWatch_chime_beep_time_event_0 = false;
				enterSequence_chime_quiet_default();
				transitioned_after = 2l;
			}
		}
		return transitioned_after;
	}
	
	private long light_off_react(long transitioned_before) {
		/* The reactions of state off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<3l) {
			if (current.ifaceButton.light) {
				exitSequence_light_off();
				enterSequence_light_on_default();
				react(0l);
				transitioned_after = 3l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long light_on_react(long transitioned_before) {
		/* The reactions of state on. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<3l) {
			if (current.ifaceButton.light_r) {
				exitSequence_light_on();
				enterSequence_light_off_default();
				react(0l);
				transitioned_after = 3l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
