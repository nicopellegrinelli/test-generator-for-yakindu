/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class Route implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_DISABLE,
		MAIN_REGION_START,
		MAIN_REGION__FINAL_,
		MAIN_REGION_ACTIVE,
		MAIN_REGION_ACTIVE_PROCESSING_SWITCH_TURNING,
		MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_TURNING,
		MAIN_REGION_ACTIVE_PROCESSING_SECTION_ACTIVATION,
		MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_UPDATING,
		MAIN_REGION_ACTIVE_PROCESSING_FLANK_TURNING,
		MAIN_REGION_ACTIVE_PROCESSING_COMPLETED,
		MAIN_REGION_WAIT,
		MAIN_REGION_EMERGENCY_SHUTDOWN,
		MAIN_REGION_UNLOCK,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[8];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Route() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Route */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Route */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return (stateVector[0] == State.MAIN_REGION__FINAL_);
	}
	private void clearInEvents() {
		turn = false;
		completed = false;
		failed = false;
		disable = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_DISABLE:
			main_region_Disable_react(-1l);
			break;
		case MAIN_REGION_START:
			main_region_Start_react(-1l);
			break;
		case MAIN_REGION__FINAL_:
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_SWITCH_TURNING:
			main_region_Active_processing_Switch_Turning_react(-1l);
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_TURNING:
			main_region_Active_processing_Signal_Turning_react(-1l);
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_SECTION_ACTIVATION:
			main_region_Active_processing_Section_Activation_react(-1l);
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_UPDATING:
			main_region_Active_processing_Signal_Updating_react(-1l);
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_FLANK_TURNING:
			main_region_Active_processing_Flank_Turning_react(-1l);
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_COMPLETED:
			main_region_Active_processing_Completed_react(-1l);
			break;
		case MAIN_REGION_WAIT:
			main_region_Wait_react(-1l);
			break;
		case MAIN_REGION_EMERGENCY_SHUTDOWN:
			main_region_Emergency_Shutdown_react(-1l);
			break;
		case MAIN_REGION_UNLOCK:
			main_region_Unlock_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_DISABLE:
			return stateVector[0] == State.MAIN_REGION_DISABLE;
		case MAIN_REGION_START:
			return stateVector[0] == State.MAIN_REGION_START;
		case MAIN_REGION__FINAL_:
			return stateVector[0] == State.MAIN_REGION__FINAL_;
		case MAIN_REGION_ACTIVE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_ACTIVE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_ACTIVE_PROCESSING_COMPLETED.ordinal();
		case MAIN_REGION_ACTIVE_PROCESSING_SWITCH_TURNING:
			return stateVector[0] == State.MAIN_REGION_ACTIVE_PROCESSING_SWITCH_TURNING;
		case MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_TURNING:
			return stateVector[0] == State.MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_TURNING;
		case MAIN_REGION_ACTIVE_PROCESSING_SECTION_ACTIVATION:
			return stateVector[0] == State.MAIN_REGION_ACTIVE_PROCESSING_SECTION_ACTIVATION;
		case MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_UPDATING:
			return stateVector[0] == State.MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_UPDATING;
		case MAIN_REGION_ACTIVE_PROCESSING_FLANK_TURNING:
			return stateVector[0] == State.MAIN_REGION_ACTIVE_PROCESSING_FLANK_TURNING;
		case MAIN_REGION_ACTIVE_PROCESSING_COMPLETED:
			return stateVector[0] == State.MAIN_REGION_ACTIVE_PROCESSING_COMPLETED;
		case MAIN_REGION_WAIT:
			return stateVector[0] == State.MAIN_REGION_WAIT;
		case MAIN_REGION_EMERGENCY_SHUTDOWN:
			return stateVector[0] == State.MAIN_REGION_EMERGENCY_SHUTDOWN;
		case MAIN_REGION_UNLOCK:
			return stateVector[0] == State.MAIN_REGION_UNLOCK;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	public interface OperationCallback {
	
		public void prepareRoute();
		
		public void prepareFlank();
		
		public boolean isTour();
		
		public boolean isCompleted();
		
		public void resetTransaction();
		
		public void fail();
		
		public void tryComplete();
		
		public void turnSwitches();
		
		public void turnFlanks();
		
		public void enableSignals();
		
		public void extendSignals();
		
		public void enableSections();
		
		public void disableSections();
		
		public void disableSignals();
		
		public void unlockFlanks();
		
		public void unlockRailParts();
		
		public void unlockSections();
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean turn;
	
	
	public void raiseTurn() {
		inEventQueue.add(() -> {
			turn = true;
		});
		runCycle();
	}
	
	private boolean completed;
	
	
	public void raiseCompleted() {
		inEventQueue.add(() -> {
			completed = true;
		});
		runCycle();
	}
	
	private boolean failed;
	
	
	public void raiseFailed() {
		inEventQueue.add(() -> {
			failed = true;
		});
		runCycle();
	}
	
	private boolean disable;
	
	
	public void raiseDisable() {
		inEventQueue.add(() -> {
			disable = true;
		});
		runCycle();
	}
	
	private boolean activated;
	
	
	protected void raiseActivated() {
		activated = true;
		activatedObservable.next(null);
	}
	
	private Observable<Void> activatedObservable = new Observable<Void>();
	
	public Observable<Void> getActivated() {
		return activatedObservable;
	}
	
	private boolean finished;
	
	
	protected void raiseFinished() {
		finished = true;
		finishedObservable.next(null);
	}
	
	private Observable<Void> finishedObservable = new Observable<Void>();
	
	public Observable<Void> getFinished() {
		return finishedObservable;
	}
	
	public static final long switch_timeout = 2100l;
	
	public long getSwitch_timeout() {
		return switch_timeout;
	}
	
	public static final long signal_timeout = 3300l;
	
	public long getSignal_timeout() {
		return signal_timeout;
	}
	
	public static final long section_timeout = 400l;
	
	public long getSection_timeout() {
		return section_timeout;
	}
	
	public static final long emergency = 3500l;
	
	public long getEmergency() {
		return emergency;
	}
	
	/* Entry action for state 'Disable'. */
	private void entryAction_main_region_Disable() {
		/* Entry action for state 'Disable'. */
		timerService.setTimer(this, 0, getEmergency(), false);
		operationCallback.resetTransaction();
		operationCallback.disableSections();
		operationCallback.disableSignals();
		operationCallback.tryComplete();
	}
	
	/* Entry action for state 'Switch Turning'. */
	private void entryAction_main_region_Active_processing_Switch_Turning() {
		/* Entry action for state 'Switch Turning'. */
		timerService.setTimer(this, 1, getSwitch_timeout(), false);
		operationCallback.prepareRoute();
		operationCallback.resetTransaction();
		operationCallback.turnSwitches();
		operationCallback.tryComplete();
	}
	
	/* Entry action for state 'Signal Turning'. */
	private void entryAction_main_region_Active_processing_Signal_Turning() {
		/* Entry action for state 'Signal Turning'. */
		timerService.setTimer(this, 2, getSignal_timeout(), false);
		operationCallback.resetTransaction();
		operationCallback.enableSignals();
		operationCallback.tryComplete();
	}
	
	/* Entry action for state 'Section Activation'. */
	private void entryAction_main_region_Active_processing_Section_Activation() {
		/* Entry action for state 'Section Activation'. */
		timerService.setTimer(this, 3, getSection_timeout(), false);
		operationCallback.resetTransaction();
		operationCallback.enableSections();
		operationCallback.tryComplete();
	}
	
	/* Entry action for state 'Signal Updating'. */
	private void entryAction_main_region_Active_processing_Signal_Updating() {
		/* Entry action for state 'Signal Updating'. */
		timerService.setTimer(this, 4, getSignal_timeout(), false);
		operationCallback.resetTransaction();
		operationCallback.extendSignals();
		operationCallback.tryComplete();
	}
	
	/* Entry action for state 'Flank Turning'. */
	private void entryAction_main_region_Active_processing_Flank_Turning() {
		/* Entry action for state 'Flank Turning'. */
		timerService.setTimer(this, 5, getSwitch_timeout(), false);
		operationCallback.resetTransaction();
		operationCallback.prepareFlank();
		operationCallback.turnFlanks();
		operationCallback.tryComplete();
	}
	
	/* Entry action for state 'Completed'. */
	private void entryAction_main_region_Active_processing_Completed() {
		/* Entry action for state 'Completed'. */
		raiseActivated();
	}
	
	/* Entry action for state 'Wait'. */
	private void entryAction_main_region_Wait() {
		/* Entry action for state 'Wait'. */
		timerService.setTimer(this, 6, getEmergency(), false);
		operationCallback.tryComplete();
	}
	
	/* Entry action for state 'Emergency Shutdown'. */
	private void entryAction_main_region_Emergency_Shutdown() {
		/* Entry action for state 'Emergency Shutdown'. */
		timerService.setTimer(this, 7, getSection_timeout(), false);
		operationCallback.fail();
		operationCallback.disableSections();
		operationCallback.disableSignals();
	}
	
	/* Entry action for state 'Unlock'. */
	private void entryAction_main_region_Unlock() {
		/* Entry action for state 'Unlock'. */
		operationCallback.resetTransaction();
		operationCallback.unlockRailParts();
		operationCallback.unlockSections();
		operationCallback.tryComplete();
	}
	
	/* Exit action for state 'Disable'. */
	private void exitAction_main_region_Disable() {
		/* Exit action for state 'Disable'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Switch Turning'. */
	private void exitAction_main_region_Active_processing_Switch_Turning() {
		/* Exit action for state 'Switch Turning'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Signal Turning'. */
	private void exitAction_main_region_Active_processing_Signal_Turning() {
		/* Exit action for state 'Signal Turning'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Section Activation'. */
	private void exitAction_main_region_Active_processing_Section_Activation() {
		/* Exit action for state 'Section Activation'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Signal Updating'. */
	private void exitAction_main_region_Active_processing_Signal_Updating() {
		/* Exit action for state 'Signal Updating'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Flank Turning'. */
	private void exitAction_main_region_Active_processing_Flank_Turning() {
		/* Exit action for state 'Flank Turning'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Wait'. */
	private void exitAction_main_region_Wait() {
		/* Exit action for state 'Wait'. */
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'Emergency Shutdown'. */
	private void exitAction_main_region_Emergency_Shutdown() {
		/* Exit action for state 'Emergency Shutdown'. */
		timerService.unsetTimer(this, 7);
	}
	
	/* 'default' enter sequence for state Disable */
	private void enterSequence_main_region_Disable_default() {
		/* 'default' enter sequence for state Disable */
		entryAction_main_region_Disable();
		stateVector[0] = State.MAIN_REGION_DISABLE;
	}
	
	/* 'default' enter sequence for state Start */
	private void enterSequence_main_region_Start_default() {
		/* 'default' enter sequence for state Start */
		stateVector[0] = State.MAIN_REGION_START;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence_main_region__final__default() {
		/* Default enter sequence for final state */
		stateVector[0] = State.MAIN_REGION__FINAL_;
	}
	
	/* 'default' enter sequence for state Switch Turning */
	private void enterSequence_main_region_Active_processing_Switch_Turning_default() {
		/* 'default' enter sequence for state Switch Turning */
		entryAction_main_region_Active_processing_Switch_Turning();
		stateVector[0] = State.MAIN_REGION_ACTIVE_PROCESSING_SWITCH_TURNING;
	}
	
	/* 'default' enter sequence for state Signal Turning */
	private void enterSequence_main_region_Active_processing_Signal_Turning_default() {
		/* 'default' enter sequence for state Signal Turning */
		entryAction_main_region_Active_processing_Signal_Turning();
		stateVector[0] = State.MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_TURNING;
	}
	
	/* 'default' enter sequence for state Section Activation */
	private void enterSequence_main_region_Active_processing_Section_Activation_default() {
		/* 'default' enter sequence for state Section Activation */
		entryAction_main_region_Active_processing_Section_Activation();
		stateVector[0] = State.MAIN_REGION_ACTIVE_PROCESSING_SECTION_ACTIVATION;
	}
	
	/* 'default' enter sequence for state Signal Updating */
	private void enterSequence_main_region_Active_processing_Signal_Updating_default() {
		/* 'default' enter sequence for state Signal Updating */
		entryAction_main_region_Active_processing_Signal_Updating();
		stateVector[0] = State.MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_UPDATING;
	}
	
	/* 'default' enter sequence for state Flank Turning */
	private void enterSequence_main_region_Active_processing_Flank_Turning_default() {
		/* 'default' enter sequence for state Flank Turning */
		entryAction_main_region_Active_processing_Flank_Turning();
		stateVector[0] = State.MAIN_REGION_ACTIVE_PROCESSING_FLANK_TURNING;
	}
	
	/* 'default' enter sequence for state Completed */
	private void enterSequence_main_region_Active_processing_Completed_default() {
		/* 'default' enter sequence for state Completed */
		entryAction_main_region_Active_processing_Completed();
		stateVector[0] = State.MAIN_REGION_ACTIVE_PROCESSING_COMPLETED;
	}
	
	/* 'default' enter sequence for state Wait */
	private void enterSequence_main_region_Wait_default() {
		/* 'default' enter sequence for state Wait */
		entryAction_main_region_Wait();
		stateVector[0] = State.MAIN_REGION_WAIT;
	}
	
	/* 'default' enter sequence for state Emergency Shutdown */
	private void enterSequence_main_region_Emergency_Shutdown_default() {
		/* 'default' enter sequence for state Emergency Shutdown */
		entryAction_main_region_Emergency_Shutdown();
		stateVector[0] = State.MAIN_REGION_EMERGENCY_SHUTDOWN;
	}
	
	/* 'default' enter sequence for state Unlock */
	private void enterSequence_main_region_Unlock_default() {
		/* 'default' enter sequence for state Unlock */
		entryAction_main_region_Unlock();
		stateVector[0] = State.MAIN_REGION_UNLOCK;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Disable */
	private void exitSequence_main_region_Disable() {
		/* Default exit sequence for state Disable */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Disable();
	}
	
	/* Default exit sequence for state Start */
	private void exitSequence_main_region_Start() {
		/* Default exit sequence for state Start */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region__final_() {
		/* Default exit sequence for final state. */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Active */
	private void exitSequence_main_region_Active() {
		/* Default exit sequence for state Active */
		exitSequence_main_region_Active_processing();
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Switch Turning */
	private void exitSequence_main_region_Active_processing_Switch_Turning() {
		/* Default exit sequence for state Switch Turning */
		stateVector[0] = State.MAIN_REGION_ACTIVE;
		exitAction_main_region_Active_processing_Switch_Turning();
	}
	
	/* Default exit sequence for state Signal Turning */
	private void exitSequence_main_region_Active_processing_Signal_Turning() {
		/* Default exit sequence for state Signal Turning */
		stateVector[0] = State.MAIN_REGION_ACTIVE;
		exitAction_main_region_Active_processing_Signal_Turning();
	}
	
	/* Default exit sequence for state Section Activation */
	private void exitSequence_main_region_Active_processing_Section_Activation() {
		/* Default exit sequence for state Section Activation */
		stateVector[0] = State.MAIN_REGION_ACTIVE;
		exitAction_main_region_Active_processing_Section_Activation();
	}
	
	/* Default exit sequence for state Signal Updating */
	private void exitSequence_main_region_Active_processing_Signal_Updating() {
		/* Default exit sequence for state Signal Updating */
		stateVector[0] = State.MAIN_REGION_ACTIVE;
		exitAction_main_region_Active_processing_Signal_Updating();
	}
	
	/* Default exit sequence for state Flank Turning */
	private void exitSequence_main_region_Active_processing_Flank_Turning() {
		/* Default exit sequence for state Flank Turning */
		stateVector[0] = State.MAIN_REGION_ACTIVE;
		exitAction_main_region_Active_processing_Flank_Turning();
	}
	
	/* Default exit sequence for state Completed */
	private void exitSequence_main_region_Active_processing_Completed() {
		/* Default exit sequence for state Completed */
		stateVector[0] = State.MAIN_REGION_ACTIVE;
	}
	
	/* Default exit sequence for state Wait */
	private void exitSequence_main_region_Wait() {
		/* Default exit sequence for state Wait */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Wait();
	}
	
	/* Default exit sequence for state Emergency Shutdown */
	private void exitSequence_main_region_Emergency_Shutdown() {
		/* Default exit sequence for state Emergency Shutdown */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Emergency_Shutdown();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_DISABLE:
			exitSequence_main_region_Disable();
			break;
		case MAIN_REGION_START:
			exitSequence_main_region_Start();
			break;
		case MAIN_REGION__FINAL_:
			exitSequence_main_region__final_();
			break;
		case MAIN_REGION_ACTIVE:
			exitSequence_main_region_Active();
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_SWITCH_TURNING:
			exitSequence_main_region_Active_processing_Switch_Turning();
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_TURNING:
			exitSequence_main_region_Active_processing_Signal_Turning();
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_SECTION_ACTIVATION:
			exitSequence_main_region_Active_processing_Section_Activation();
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_UPDATING:
			exitSequence_main_region_Active_processing_Signal_Updating();
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_FLANK_TURNING:
			exitSequence_main_region_Active_processing_Flank_Turning();
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_COMPLETED:
			exitSequence_main_region_Active_processing_Completed();
			break;
		case MAIN_REGION_WAIT:
			exitSequence_main_region_Wait();
			break;
		case MAIN_REGION_EMERGENCY_SHUTDOWN:
			exitSequence_main_region_Emergency_Shutdown();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region processing */
	private void exitSequence_main_region_Active_processing() {
		/* Default exit sequence for region processing */
		switch (stateVector[0]) {
		case MAIN_REGION_ACTIVE_PROCESSING_SWITCH_TURNING:
			exitSequence_main_region_Active_processing_Switch_Turning();
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_TURNING:
			exitSequence_main_region_Active_processing_Signal_Turning();
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_SECTION_ACTIVATION:
			exitSequence_main_region_Active_processing_Section_Activation();
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_SIGNAL_UPDATING:
			exitSequence_main_region_Active_processing_Signal_Updating();
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_FLANK_TURNING:
			exitSequence_main_region_Active_processing_Flank_Turning();
			break;
		case MAIN_REGION_ACTIVE_PROCESSING_COMPLETED:
			exitSequence_main_region_Active_processing_Completed();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Active_processing__choice_0() {
		/* The reactions of state null. */
		if (operationCallback.isTour()) {
			enterSequence_main_region_Active_processing_Flank_Turning_default();
		} else {
			enterSequence_main_region_Active_processing_Signal_Turning_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		/* The reactions of state null. */
		if (operationCallback.isCompleted()) {
			enterSequence_main_region_Disable_default();
		} else {
			enterSequence_main_region_Wait_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Start_default();
	}
	
	private long main_region_Disable_react(long transitioned_before) {
		/* The reactions of state Disable. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completed) {
				exitSequence_main_region_Disable();
				enterSequence_main_region_Unlock_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Disable();
					timeEvents[0] = false;
					enterSequence_main_region_Unlock_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Start_react(long transitioned_before) {
		/* The reactions of state Start. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (turn) {
				exitSequence_main_region_Start();
				enterSequence_main_region_Active_processing_Switch_Turning_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Active_react(long transitioned_before) {
		/* The reactions of state Active. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (failed) {
				exitSequence_main_region_Active();
				operationCallback.fail();
				react_main_region__choice_0();
				transitioned_after = 0l;
			} else {
				if (disable) {
					exitSequence_main_region_Active();
					react_main_region__choice_0();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Active_processing_Switch_Turning_react(long transitioned_before) {
		/* The reactions of state Switch Turning. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completed) {
				exitSequence_main_region_Active_processing_Switch_Turning();
				react_main_region_Active_processing__choice_0();
				transitioned_after = 0l;
			} else {
				if (timeEvents[1]) {
					exitSequence_main_region_Active();
					timeEvents[1] = false;
					enterSequence_main_region_Emergency_Shutdown_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Active_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Active_processing_Signal_Turning_react(long transitioned_before) {
		/* The reactions of state Signal Turning. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completed) {
				exitSequence_main_region_Active_processing_Signal_Turning();
				enterSequence_main_region_Active_processing_Signal_Updating_default();
				main_region_Active_react(0l);
				transitioned_after = 0l;
			} else {
				if (timeEvents[2]) {
					exitSequence_main_region_Active();
					timeEvents[2] = false;
					enterSequence_main_region_Emergency_Shutdown_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Active_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Active_processing_Section_Activation_react(long transitioned_before) {
		/* The reactions of state Section Activation. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completed) {
				exitSequence_main_region_Active_processing_Section_Activation();
				enterSequence_main_region_Active_processing_Completed_default();
				main_region_Active_react(0l);
				transitioned_after = 0l;
			} else {
				if (timeEvents[3]) {
					exitSequence_main_region_Active();
					timeEvents[3] = false;
					enterSequence_main_region_Emergency_Shutdown_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Active_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Active_processing_Signal_Updating_react(long transitioned_before) {
		/* The reactions of state Signal Updating. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completed) {
				exitSequence_main_region_Active_processing_Signal_Updating();
				enterSequence_main_region_Active_processing_Section_Activation_default();
				main_region_Active_react(0l);
				transitioned_after = 0l;
			} else {
				if (timeEvents[4]) {
					exitSequence_main_region_Active();
					timeEvents[4] = false;
					enterSequence_main_region_Emergency_Shutdown_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Active_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Active_processing_Flank_Turning_react(long transitioned_before) {
		/* The reactions of state Flank Turning. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completed) {
				exitSequence_main_region_Active_processing_Flank_Turning();
				operationCallback.unlockFlanks();
				enterSequence_main_region_Active_processing_Signal_Turning_default();
				main_region_Active_react(0l);
				transitioned_after = 0l;
			} else {
				if (timeEvents[5]) {
					exitSequence_main_region_Active();
					timeEvents[5] = false;
					enterSequence_main_region_Emergency_Shutdown_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Active_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Active_processing_Completed_react(long transitioned_before) {
		/* The reactions of state Completed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (turn) {
				exitSequence_main_region_Active_processing_Completed();
				enterSequence_main_region_Active_processing_Switch_Turning_default();
				main_region_Active_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_region_Active_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Wait_react(long transitioned_before) {
		/* The reactions of state Wait. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completed) {
				exitSequence_main_region_Wait();
				enterSequence_main_region_Disable_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[6]) {
					exitSequence_main_region_Wait();
					timeEvents[6] = false;
					enterSequence_main_region_Disable_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Emergency_Shutdown_react(long transitioned_before) {
		/* The reactions of state Emergency Shutdown. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[7]) {
				exitSequence_main_region_Emergency_Shutdown();
				timeEvents[7] = false;
				enterSequence_main_region_Unlock_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Unlock_react(long transitioned_before) {
		/* The reactions of state Unlock. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (completed) {
				raiseFinished();
				enterSequence_main_region__final__default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
