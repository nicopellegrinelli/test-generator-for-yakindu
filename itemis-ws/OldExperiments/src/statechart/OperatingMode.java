/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class OperatingMode implements ITimed, IEventDriven {
	public static class Can {
		private OperatingMode parent;
		
		public Can(OperatingMode parent) {
			this.parent = parent;
		}
		public interface OperationCallback {
		
			public void connectBus();
			
			public boolean isConnected();
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean connected;
		
		
		public void raiseConnected() {
			parent.inEventQueue.add(() -> {
				connected = true;
			});
			parent.runCycle();
		}
		
		public static final long timeout = 250l;
		
		public long getTimeout() {
			return timeout;
		}
		
	}
	
	protected Can can;
	
	public enum State {
		MAIN_REGION_PREPARE_BUS,
		MAIN_REGION_INIT,
		MAIN_REGION_EDITING,
		MAIN_REGION_FAILED,
		MAIN_REGION_OPERATING,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public OperatingMode() {
		can = new Can(this);
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.can.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Can must be set.");
		}
		
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart OperatingMode */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart OperatingMode */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		clear = false;
		started = false;
		failed = false;
		edit = false;
		operate = false;
		init = false;
		can.connected = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_PREPARE_BUS:
			main_region_Prepare_Bus_react(-1l);
			break;
		case MAIN_REGION_INIT:
			main_region_Init_react(-1l);
			break;
		case MAIN_REGION_EDITING:
			main_region_Editing_react(-1l);
			break;
		case MAIN_REGION_FAILED:
			main_region_Failed_react(-1l);
			break;
		case MAIN_REGION_OPERATING:
			main_region_Operating_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.can.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Can must be set.");
		}
		
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_PREPARE_BUS:
			return stateVector[0] == State.MAIN_REGION_PREPARE_BUS;
		case MAIN_REGION_INIT:
			return stateVector[0] == State.MAIN_REGION_INIT;
		case MAIN_REGION_EDITING:
			return stateVector[0] == State.MAIN_REGION_EDITING;
		case MAIN_REGION_FAILED:
			return stateVector[0] == State.MAIN_REGION_FAILED;
		case MAIN_REGION_OPERATING:
			return stateVector[0] == State.MAIN_REGION_OPERATING;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Can can() {
		return can;
	}
	
	
	public interface OperationCallback {
	
		public void resetTransaction();
		
		public boolean hasActiveRoutes();
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean clear;
	
	
	public void raiseClear() {
		inEventQueue.add(() -> {
			clear = true;
		});
		runCycle();
	}
	
	private boolean started;
	
	
	public void raiseStarted() {
		inEventQueue.add(() -> {
			started = true;
		});
		runCycle();
	}
	
	private boolean failed;
	
	
	public void raiseFailed() {
		inEventQueue.add(() -> {
			failed = true;
		});
		runCycle();
	}
	
	private boolean edit;
	
	
	public void raiseEdit() {
		inEventQueue.add(() -> {
			edit = true;
		});
		runCycle();
	}
	
	private boolean operate;
	
	
	public void raiseOperate() {
		inEventQueue.add(() -> {
			operate = true;
		});
		runCycle();
	}
	
	private boolean init;
	
	
	public void raiseInit() {
		inEventQueue.add(() -> {
			init = true;
		});
		runCycle();
	}
	
	private boolean start;
	
	
	protected void raiseStart() {
		start = true;
		startObservable.next(null);
	}
	
	private Observable<Void> startObservable = new Observable<Void>();
	
	public Observable<Void> getStart() {
		return startObservable;
	}
	
	private boolean cleared;
	
	
	protected void raiseCleared() {
		cleared = true;
		clearedObservable.next(null);
	}
	
	private Observable<Void> clearedObservable = new Observable<Void>();
	
	public Observable<Void> getCleared() {
		return clearedObservable;
	}
	
	private boolean failing;
	
	
	protected void raiseFailing() {
		failing = true;
		failingObservable.next(null);
	}
	
	private Observable<Void> failingObservable = new Observable<Void>();
	
	public Observable<Void> getFailing() {
		return failingObservable;
	}
	
	private boolean operating;
	
	private boolean operatingValue;
	
	
	protected void raiseOperating(boolean value) {
		operatingValue = value;
		operating = true;
		operatingObservable.next(value);
	}
	
	private Observable<Boolean> operatingObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getOperating() {
		return operatingObservable;
	}
	
	private boolean editing;
	
	private boolean editingValue;
	
	
	protected void raiseEditing(boolean value) {
		editingValue = value;
		editing = true;
		editingObservable.next(value);
	}
	
	private Observable<Boolean> editingObservable = new Observable<Boolean>();
	
	public Observable<Boolean> getEditing() {
		return editingObservable;
	}
	
	public static final long timeout = 5000l;
	
	public long getTimeout() {
		return timeout;
	}
	
	/* Entry action for state 'Prepare Bus'. */
	private void entryAction_main_region_Prepare_Bus() {
		/* Entry action for state 'Prepare Bus'. */
		timerService.setTimer(this, 0, can.getTimeout(), false);
		can.operationCallback.connectBus();
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_main_region_Init() {
		/* Entry action for state 'Init'. */
		timerService.setTimer(this, 1, getTimeout(), false);
		operationCallback.resetTransaction();
		raiseStart();
	}
	
	/* Entry action for state 'Editing'. */
	private void entryAction_main_region_Editing() {
		/* Entry action for state 'Editing'. */
		raiseEditing(true);
	}
	
	/* Entry action for state 'Failed'. */
	private void entryAction_main_region_Failed() {
		/* Entry action for state 'Failed'. */
		raiseFailing();
	}
	
	/* Entry action for state 'Operating'. */
	private void entryAction_main_region_Operating() {
		/* Entry action for state 'Operating'. */
		raiseOperating(true);
	}
	
	/* Exit action for state 'Prepare Bus'. */
	private void exitAction_main_region_Prepare_Bus() {
		/* Exit action for state 'Prepare Bus'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Init'. */
	private void exitAction_main_region_Init() {
		/* Exit action for state 'Init'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Editing'. */
	private void exitAction_main_region_Editing() {
		/* Exit action for state 'Editing'. */
		raiseEditing(false);
	}
	
	/* Exit action for state 'Failed'. */
	private void exitAction_main_region_Failed() {
		/* Exit action for state 'Failed'. */
		raiseCleared();
	}
	
	/* Exit action for state 'Operating'. */
	private void exitAction_main_region_Operating() {
		/* Exit action for state 'Operating'. */
		raiseOperating(false);
	}
	
	/* 'default' enter sequence for state Prepare Bus */
	private void enterSequence_main_region_Prepare_Bus_default() {
		/* 'default' enter sequence for state Prepare Bus */
		entryAction_main_region_Prepare_Bus();
		stateVector[0] = State.MAIN_REGION_PREPARE_BUS;
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Init_default() {
		/* 'default' enter sequence for state Init */
		entryAction_main_region_Init();
		stateVector[0] = State.MAIN_REGION_INIT;
	}
	
	/* 'default' enter sequence for state Editing */
	private void enterSequence_main_region_Editing_default() {
		/* 'default' enter sequence for state Editing */
		entryAction_main_region_Editing();
		stateVector[0] = State.MAIN_REGION_EDITING;
	}
	
	/* 'default' enter sequence for state Failed */
	private void enterSequence_main_region_Failed_default() {
		/* 'default' enter sequence for state Failed */
		entryAction_main_region_Failed();
		stateVector[0] = State.MAIN_REGION_FAILED;
	}
	
	/* 'default' enter sequence for state Operating */
	private void enterSequence_main_region_Operating_default() {
		/* 'default' enter sequence for state Operating */
		entryAction_main_region_Operating();
		stateVector[0] = State.MAIN_REGION_OPERATING;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Prepare Bus */
	private void exitSequence_main_region_Prepare_Bus() {
		/* Default exit sequence for state Prepare Bus */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Prepare_Bus();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Init() {
		/* Default exit sequence for state Init */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Init();
	}
	
	/* Default exit sequence for state Editing */
	private void exitSequence_main_region_Editing() {
		/* Default exit sequence for state Editing */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Editing();
	}
	
	/* Default exit sequence for state Failed */
	private void exitSequence_main_region_Failed() {
		/* Default exit sequence for state Failed */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Failed();
	}
	
	/* Default exit sequence for state Operating */
	private void exitSequence_main_region_Operating() {
		/* Default exit sequence for state Operating */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_Operating();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_PREPARE_BUS:
			exitSequence_main_region_Prepare_Bus();
			break;
		case MAIN_REGION_INIT:
			exitSequence_main_region_Init();
			break;
		case MAIN_REGION_EDITING:
			exitSequence_main_region_Editing();
			break;
		case MAIN_REGION_FAILED:
			exitSequence_main_region_Failed();
			break;
		case MAIN_REGION_OPERATING:
			exitSequence_main_region_Operating();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Prepare_Bus_default();
	}
	
	private long main_region_Prepare_Bus_react(long transitioned_before) {
		/* The reactions of state Prepare Bus. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (can.connected) {
				exitSequence_main_region_Prepare_Bus();
				enterSequence_main_region_Init_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Prepare_Bus();
					timeEvents[0] = false;
					enterSequence_main_region_Failed_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Init_react(long transitioned_before) {
		/* The reactions of state Init. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_Init();
				timeEvents[1] = false;
				enterSequence_main_region_Failed_default();
				transitioned_after = 0l;
			} else {
				if (failed) {
					exitSequence_main_region_Init();
					enterSequence_main_region_Failed_default();
					transitioned_after = 0l;
				} else {
					if (started) {
						exitSequence_main_region_Init();
						enterSequence_main_region_Operating_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Editing_react(long transitioned_before) {
		/* The reactions of state Editing. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (operate) {
				exitSequence_main_region_Editing();
				enterSequence_main_region_Operating_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Failed_react(long transitioned_before) {
		/* The reactions of state Failed. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((clear) && (can.operationCallback.isConnected()))) {
				exitSequence_main_region_Failed();
				enterSequence_main_region_Init_default();
				transitioned_after = 0l;
			} else {
				if (edit) {
					exitSequence_main_region_Failed();
					enterSequence_main_region_Editing_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_Operating_react(long transitioned_before) {
		/* The reactions of state Operating. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((edit) && (!(operationCallback.hasActiveRoutes())))) {
				exitSequence_main_region_Operating();
				enterSequence_main_region_Editing_default();
				transitioned_after = 0l;
			} else {
				if (init) {
					exitSequence_main_region_Operating();
					enterSequence_main_region_Init_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
