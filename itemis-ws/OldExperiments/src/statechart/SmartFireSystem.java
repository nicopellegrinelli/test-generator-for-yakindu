/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;
import statechart.Actuator_Component;
import statechart.Controller_Component;
import statechart.DeviceTemp_Component;
import statechart.FireAlarm_Unit;
import statechart.Network_Component;
import statechart.Power_Component;
import statechart.Sensor_Component;

public class SmartFireSystem implements ITimed, IEventDriven {
	public static class System {
		private SmartFireSystem parent;
		
		public System(SmartFireSystem parent) {
			this.parent = parent;
		}
		private boolean on;
		
		
		public void raiseOn() {
			parent.inEventQueue.add(() -> {
				on = true;
			});
			parent.runCycle();
		}
		
		private boolean off;
		
		
		public void raiseOff() {
			parent.inEventQueue.add(() -> {
				off = true;
			});
			parent.runCycle();
		}
		
		private boolean connect_network;
		
		
		public void raiseConnect_network() {
			parent.inEventQueue.add(() -> {
				connect_network = true;
			});
			parent.runCycle();
		}
		
		private boolean disconnect_network;
		
		
		public void raiseDisconnect_network() {
			parent.inEventQueue.add(() -> {
				disconnect_network = true;
			});
			parent.runCycle();
		}
		
		private boolean isOn;
		
		public boolean getIsOn() {
			return isOn;
		}
		
		public void setIsOn(boolean value) {
			this.isOn = value;
		}
		
		private boolean alarm_status;
		
		public boolean getAlarm_status() {
			return alarm_status;
		}
		
		public void setAlarm_status(boolean value) {
			this.alarm_status = value;
		}
		
	}
	
	public static class SensorInput {
		private SmartFireSystem parent;
		
		public SensorInput(SmartFireSystem parent) {
			this.parent = parent;
		}
		private boolean reset;
		
		
		public void raiseReset() {
			parent.inEventQueue.add(() -> {
				reset = true;
			});
			parent.runCycle();
		}
		
		private long smoke_detection_time;
		
		public long getSmoke_detection_time() {
			return smoke_detection_time;
		}
		
		public void setSmoke_detection_time(long value) {
			this.smoke_detection_time = value;
		}
		
		private long carbon_detection_time;
		
		public long getCarbon_detection_time() {
			return carbon_detection_time;
		}
		
		public void setCarbon_detection_time(long value) {
			this.carbon_detection_time = value;
		}
		
		private long heat_detection_time;
		
		public long getHeat_detection_time() {
			return heat_detection_time;
		}
		
		public void setHeat_detection_time(long value) {
			this.heat_detection_time = value;
		}
		
	}
	
	public static class SensorOutput {
		private boolean activity;
		
		public boolean getActivity() {
			return activity;
		}
		
		public void setActivity(boolean value) {
			this.activity = value;
		}
		
		private String detected;
		
		public String getDetected() {
			return detected;
		}
		
		public void setDetected(String value) {
			this.detected = value;
		}
		
	}
	
	public static class CarbonSensorOutput {
		private long counter;
		
		public long getCounter() {
			return counter;
		}
		
		public void setCounter(long value) {
			this.counter = value;
		}
		
		private boolean activity;
		
		public boolean getActivity() {
			return activity;
		}
		
		public void setActivity(boolean value) {
			this.activity = value;
		}
		
	}
	
	public static class HeatSensorOutput {
		private long counter;
		
		public long getCounter() {
			return counter;
		}
		
		public void setCounter(long value) {
			this.counter = value;
		}
		
		private boolean activity;
		
		public boolean getActivity() {
			return activity;
		}
		
		public void setActivity(boolean value) {
			this.activity = value;
		}
		
	}
	
	public static class SmokeSensorOutput {
		private long counter;
		
		public long getCounter() {
			return counter;
		}
		
		public void setCounter(long value) {
			this.counter = value;
		}
		
		private boolean activity;
		
		public boolean getActivity() {
			return activity;
		}
		
		public void setActivity(boolean value) {
			this.activity = value;
		}
		
	}
	
	protected System system;
	
	protected SensorInput sensorInput;
	
	protected SensorOutput sensorOutput;
	
	protected CarbonSensorOutput carbonSensorOutput;
	
	protected HeatSensorOutput heatSensorOutput;
	
	protected SmokeSensorOutput smokeSensorOutput;
	
	public enum State {
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_OFF,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_ON,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_ONSTANDBY_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_ACTUATED_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_OFF_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON___CONTROLLER_RECEIVING_AND_SENDING_UPDATES___CONTROLLER_COMPONENT_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__CARBONDETECTED,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__SMOKEDETECTED,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__HEATDETECTED,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY___FINAL_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT_OFF,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT___RECEIVING_NETWORK_CONNECTION_UPDATES___NETWORK_CONNECTION_UPDATES_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT___RECEIVING_UPDATES_FROM_POWER_COMPONENT___POWER_CONSUMPTION_UPDATES_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT___RECEIVING_UPDATES_FROM_DEVICETEMP_COMPONENT___TEMPERATURE_UPDATES_,
		_SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT_OFF,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[7];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[8];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public SmartFireSystem() {
		system = new System(this);
		sensorInput = new SensorInput(this);
		sensorOutput = new SensorOutput();
		carbonSensorOutput = new CarbonSensorOutput();
		heatSensorOutput = new HeatSensorOutput();
		smokeSensorOutput = new SmokeSensorOutput();
		for (int i = 0; i < 7; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart SmartFireSystem */
		setActuator(null);
		setController(null);
		setCarbonSensor(null);
		setSmokeSensor(null);
		setHeatSensor(null);
		setWiFi(null);
		setPower(null);
		setTemp(null);
		setFireAlarm(null);
		setMessage("test");
		setWiFi_connection(false);
		setTemp_value(50l);
		setPower_input(20l);
		setPower_total(0l);
		setPower_required(10l);
		system.setIsOn(false);
		system.setAlarm_status(false);
		sensorInput.setSmoke_detection_time(9l);
		sensorInput.setCarbon_detection_time(12l);
		sensorInput.setHeat_detection_time(10l);
		sensorOutput.setActivity(false);
		sensorOutput.setDetected("");
		carbonSensorOutput.setCounter(0l);
		carbonSensorOutput.setActivity(false);
		heatSensorOutput.setCounter(0l);
		heatSensorOutput.setActivity(false);
		smokeSensorOutput.setCounter(0l);
		smokeSensorOutput.setActivity(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart SmartFireSystem */
		enterSequence__SmartFiresystem__default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart SmartFireSystem */
		exitSequence__SmartFiresystem_();
		stateVector[0] = State.$NULLSTATE$;
		stateVector[1] = State.$NULLSTATE$;
		stateVector[2] = State.$NULLSTATE$;
		stateVector[3] = State.$NULLSTATE$;
		stateVector[4] = State.$NULLSTATE$;
		stateVector[5] = State.$NULLSTATE$;
		stateVector[6] = State.$NULLSTATE$;
		stateConfVectorPosition = 6;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$||stateVector[4] != State.$NULLSTATE$||stateVector[5] != State.$NULLSTATE$||stateVector[6] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		system.on = false;
		system.off = false;
		system.connect_network = false;
		system.disconnect_network = false;
		sensorInput.reset = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_OFF:
			transitioned = _SmartFiresystem__SmartFireSystem_DeviceStatus_off_react(transitioned);
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_ON:
			transitioned = _SmartFiresystem__SmartFireSystem_DeviceStatus_on_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_ONSTANDBY_:
				transitioned = _SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby__react(transitioned);
				break;
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_ACTUATED_:
				transitioned = _SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated__react(transitioned);
				break;
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_OFF_:
				transitioned = _SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off__react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON___CONTROLLER_RECEIVING_AND_SENDING_UPDATES___CONTROLLER_COMPONENT_:
				transitioned = _SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component__react(transitioned);
				break;
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF:
				transitioned = _SmartFiresystem__SmartFireSystem_ControllerComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__CARBONDETECTED:
				transitioned = _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__CarbonDetected_react(transitioned);
				break;
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__SMOKEDETECTED:
				transitioned = _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__SmokeDetected_react(transitioned);
				break;
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__HEATDETECTED:
				transitioned = _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__HeatDetected_react(transitioned);
				break;
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY___FINAL_:
				transitioned = _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___final__react(transitioned);
				break;
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT_OFF:
				transitioned = _SmartFiresystem__SmartFireSystem_SensorComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<4l) {
			switch (stateVector[4]) {
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT___RECEIVING_NETWORK_CONNECTION_UPDATES___NETWORK_CONNECTION_UPDATES_:
				transitioned = _SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates__react(transitioned);
				break;
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF:
				transitioned = _SmartFiresystem__SmartFireSystem_NetworkComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<5l) {
			switch (stateVector[5]) {
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT___RECEIVING_UPDATES_FROM_POWER_COMPONENT___POWER_CONSUMPTION_UPDATES_:
				transitioned = _SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates__react(transitioned);
				break;
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF:
				transitioned = _SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<6l) {
			switch (stateVector[6]) {
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT___RECEIVING_UPDATES_FROM_DEVICETEMP_COMPONENT___TEMPERATURE_UPDATES_:
				_SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates__react(transitioned);
				break;
			case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT_OFF:
				_SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM:
			return stateVector[0].ordinal() >= State.
					_SMARTFIRESYSTEM__SMARTFIRESYSTEM.ordinal()&& stateVector[0].ordinal() <= State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT_OFF.ordinal();
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_OFF:
			return stateVector[0] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_OFF;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_ON:
			return stateVector[0] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_ON;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_ONSTANDBY_:
			return stateVector[1] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_ONSTANDBY_;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_ACTUATED_:
			return stateVector[1] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_ACTUATED_;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_OFF_:
			return stateVector[1] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_OFF_;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON_:
			return stateVector[2].ordinal() >= State.
					_SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON_.ordinal()&& stateVector[2].ordinal() <= State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON___CONTROLLER_RECEIVING_AND_SENDING_UPDATES___CONTROLLER_COMPONENT_.ordinal();
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON___CONTROLLER_RECEIVING_AND_SENDING_UPDATES___CONTROLLER_COMPONENT_:
			return stateVector[2] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON___CONTROLLER_RECEIVING_AND_SENDING_UPDATES___CONTROLLER_COMPONENT_;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF:
			return stateVector[2] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON_:
			return stateVector[3].ordinal() >= State.
					_SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON_.ordinal()&& stateVector[3].ordinal() <= State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY___FINAL_.ordinal();
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT_:
			return stateVector[3].ordinal() >= State.
					_SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT_.ordinal()&& stateVector[3].ordinal() <= State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY___FINAL_.ordinal();
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__CARBONDETECTED:
			return stateVector[3] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__CARBONDETECTED;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__SMOKEDETECTED:
			return stateVector[3] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__SMOKEDETECTED;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__HEATDETECTED:
			return stateVector[3] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__HEATDETECTED;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY___FINAL_:
			return stateVector[3] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY___FINAL_;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT_OFF:
			return stateVector[3] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT_OFF;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT_:
			return stateVector[4].ordinal() >= State.
					_SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT_.ordinal()&& stateVector[4].ordinal() <= State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT___RECEIVING_NETWORK_CONNECTION_UPDATES___NETWORK_CONNECTION_UPDATES_.ordinal();
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT___RECEIVING_NETWORK_CONNECTION_UPDATES___NETWORK_CONNECTION_UPDATES_:
			return stateVector[4] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT___RECEIVING_NETWORK_CONNECTION_UPDATES___NETWORK_CONNECTION_UPDATES_;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF:
			return stateVector[4] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_:
			return stateVector[5].ordinal() >= State.
					_SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_.ordinal()&& stateVector[5].ordinal() <= State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT___RECEIVING_UPDATES_FROM_POWER_COMPONENT___POWER_CONSUMPTION_UPDATES_.ordinal();
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT___RECEIVING_UPDATES_FROM_POWER_COMPONENT___POWER_CONSUMPTION_UPDATES_:
			return stateVector[5] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT___RECEIVING_UPDATES_FROM_POWER_COMPONENT___POWER_CONSUMPTION_UPDATES_;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF:
			return stateVector[5] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT_:
			return stateVector[6].ordinal() >= State.
					_SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT_.ordinal()&& stateVector[6].ordinal() <= State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT___RECEIVING_UPDATES_FROM_DEVICETEMP_COMPONENT___TEMPERATURE_UPDATES_.ordinal();
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT___RECEIVING_UPDATES_FROM_DEVICETEMP_COMPONENT___TEMPERATURE_UPDATES_:
			return stateVector[6] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT___RECEIVING_UPDATES_FROM_DEVICETEMP_COMPONENT___TEMPERATURE_UPDATES_;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT_OFF:
			return stateVector[6] == State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT_OFF;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public System system() {
		return system;
	}
	
	public SensorInput sensorInput() {
		return sensorInput;
	}
	
	public SensorOutput sensorOutput() {
		return sensorOutput;
	}
	
	public CarbonSensorOutput carbonSensorOutput() {
		return carbonSensorOutput;
	}
	
	public HeatSensorOutput heatSensorOutput() {
		return heatSensorOutput;
	}
	
	public SmokeSensorOutput smokeSensorOutput() {
		return smokeSensorOutput;
	}
	
	
	private Actuator_Component actuator;
	
	public Actuator_Component getActuator() {
		return actuator;
	}
	
	public void setActuator(Actuator_Component value) {
		this.actuator = value;
	}
	
	private Controller_Component controller;
	
	public Controller_Component getController() {
		return controller;
	}
	
	public void setController(Controller_Component value) {
		this.controller = value;
	}
	
	private Sensor_Component carbonSensor;
	
	public Sensor_Component getCarbonSensor() {
		return carbonSensor;
	}
	
	public void setCarbonSensor(Sensor_Component value) {
		this.carbonSensor = value;
	}
	
	private Sensor_Component smokeSensor;
	
	public Sensor_Component getSmokeSensor() {
		return smokeSensor;
	}
	
	public void setSmokeSensor(Sensor_Component value) {
		this.smokeSensor = value;
	}
	
	private Sensor_Component heatSensor;
	
	public Sensor_Component getHeatSensor() {
		return heatSensor;
	}
	
	public void setHeatSensor(Sensor_Component value) {
		this.heatSensor = value;
	}
	
	private Network_Component wiFi;
	
	public Network_Component getWiFi() {
		return wiFi;
	}
	
	public void setWiFi(Network_Component value) {
		this.wiFi = value;
	}
	
	private Power_Component power;
	
	public Power_Component getPower() {
		return power;
	}
	
	public void setPower(Power_Component value) {
		this.power = value;
	}
	
	private DeviceTemp_Component temp;
	
	public DeviceTemp_Component getTemp() {
		return temp;
	}
	
	public void setTemp(DeviceTemp_Component value) {
		this.temp = value;
	}
	
	private FireAlarm_Unit fireAlarm;
	
	public FireAlarm_Unit getFireAlarm() {
		return fireAlarm;
	}
	
	public void setFireAlarm(FireAlarm_Unit value) {
		this.fireAlarm = value;
	}
	
	private String message;
	
	public String getMessage() {
		return message;
	}
	
	public void setMessage(String value) {
		this.message = value;
	}
	
	private boolean wiFi_connection;
	
	public boolean getWiFi_connection() {
		return wiFi_connection;
	}
	
	public void setWiFi_connection(boolean value) {
		this.wiFi_connection = value;
	}
	
	private long temp_value;
	
	public long getTemp_value() {
		return temp_value;
	}
	
	public void setTemp_value(long value) {
		this.temp_value = value;
	}
	
	private long power_input;
	
	public long getPower_input() {
		return power_input;
	}
	
	public void setPower_input(long value) {
		this.power_input = value;
	}
	
	private long power_total;
	
	public long getPower_total() {
		return power_total;
	}
	
	public void setPower_total(long value) {
		this.power_total = value;
	}
	
	private long power_required;
	
	public long getPower_required() {
		return power_required;
	}
	
	public void setPower_required(long value) {
		this.power_required = value;
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_DeviceStatus_off() {
		/* Entry action for state 'off'. */
		system.setIsOn(false);
		system.setAlarm_status(fireAlarm.alarm().getSound());
		getPower().raiseOff();
		getCarbonSensor().raiseOff();
		getSmokeSensor().raiseOff();
		getHeatSensor().raiseOff();
	}
	
	/* Entry action for state 'on'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_DeviceStatus_on() {
		/* Entry action for state 'on'. */
		timerService.setTimer(this, 0, 500l, false);
		system.setIsOn(true);
		system.setAlarm_status(fireAlarm.alarm().getSound());
		setMessage(fireAlarm.message().getStatus());
		getPower().raiseOn();
		getCarbonSensor().raiseOn();
		getSmokeSensor().raiseOn();
		getHeatSensor().raiseOn();
	}
	
	/* Entry action for state '<Actuator_OnStandby>'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby_() {
		/* Entry action for state '<Actuator_OnStandby>'. */
		timerService.setTimer(this, 1, 100l, false);
		actuator.power().setDeviceInput(power_input);
		fireAlarm.sensors().setTriggerSignal_received(actuator.getIsTriggered());
	}
	
	/* Entry action for state '<Device_Actuated>'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated_() {
		/* Entry action for state '<Device_Actuated>'. */
		timerService.setTimer(this, 2, 500l, true);
		system.raiseOn();
		setMessage(fireAlarm.message().getStatus());
	}
	
	/* Entry action for state '<Actuator_off>'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off_() {
		/* Entry action for state '<Actuator_off>'. */
		getActuator().raiseOff();
		actuator.power().setRequired(power_required);
		system.setAlarm_status(fireAlarm.alarm().getSound());
	}
	
	/* Entry action for state '<Controller_Component>'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component_() {
		/* Entry action for state '<Controller_Component>'. */
		timerService.setTimer(this, 3, 500l, false);
		controller.sensors().setTriggered(sensorOutput.activity);
		controller.setActivity(sensorOutput.activity);
		actuator.setIsTriggered(controller.actuator().getTriggered());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_ControllerComponent_off() {
		/* Entry action for state 'off'. */
		getController().raiseOff();
	}
	
	/* Entry action for state '<Sensor_Component_isON>'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON_() {
		/* Entry action for state '<Sensor_Component_isON>'. */
		getCarbonSensor().raiseOn();
		getSmokeSensor().raiseOn();
		getHeatSensor().raiseOn();
		smokeSensor.setSimulate_detection_timer(sensorInput.smoke_detection_time);
		carbonSensor.setSimulate_detection_timer(sensorInput.carbon_detection_time);
		heatSensor.setSimulate_detection_timer(sensorInput.heat_detection_time);
	}
	
	/* Entry action for state '<Sensor_Component>'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_() {
		/* Entry action for state '<Sensor_Component>'. */
		timerService.setTimer(this, 4, 200l, false);
		carbonSensorOutput.setActivity(carbonSensor.getActivity());
		carbonSensorOutput.setCounter(carbonSensor.getCounter());
		heatSensorOutput.setActivity(heatSensor.getActivity());
		heatSensorOutput.setCounter(heatSensor.getCounter());
		smokeSensorOutput.setActivity(smokeSensor.getActivity());
		smokeSensorOutput.setCounter(smokeSensor.getCounter());
	}
	
	/* Entry action for state 'CarbonDetected'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__CarbonDetected() {
		/* Entry action for state 'CarbonDetected'. */
		sensorOutput.setActivity(carbonSensorOutput.activity);
		sensorOutput.setDetected("Carbon Detected");
	}
	
	/* Entry action for state 'SmokeDetected'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__SmokeDetected() {
		/* Entry action for state 'SmokeDetected'. */
		sensorOutput.setActivity(smokeSensorOutput.activity);
		sensorOutput.setDetected("Smoke Detected");
	}
	
	/* Entry action for state 'HeatDetected'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__HeatDetected() {
		/* Entry action for state 'HeatDetected'. */
		sensorOutput.setActivity(heatSensorOutput.activity);
		sensorOutput.setDetected("Heat Detected");
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_SensorComponent_off() {
		/* Entry action for state 'off'. */
		getCarbonSensor().raiseOff();
		getSmokeSensor().raiseOff();
		getHeatSensor().raiseOff();
		sensorOutput.setActivity(false);
		smokeSensor.setSimulate_detection_timer(sensorInput.smoke_detection_time);
		carbonSensor.setSimulate_detection_timer(sensorInput.carbon_detection_time);
		heatSensor.setSimulate_detection_timer(sensorInput.heat_detection_time);
	}
	
	/* Entry action for state '<Network_Connection_Updates>'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates_() {
		/* Entry action for state '<Network_Connection_Updates>'. */
		timerService.setTimer(this, 5, 500l, false);
		setWiFi_connection(wiFi.getConnection());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_NetworkComponent_off() {
		/* Entry action for state 'off'. */
		getWiFi().raiseOff();
	}
	
	/* Entry action for state '<Power_Consumption_Updates>'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates_() {
		/* Entry action for state '<Power_Consumption_Updates>'. */
		timerService.setTimer(this, 6, 500l, false);
		power.device().setIsOn(system.isOn);
		power.setKilowatt(power_input);
		setPower_total(power.getKWh());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off() {
		/* Entry action for state 'off'. */
		getPower().raiseOff();
	}
	
	/* Entry action for state '<Temperature_Updates>'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates_() {
		/* Entry action for state '<Temperature_Updates>'. */
		timerService.setTimer(this, 7, 500l, false);
		setTemp_value(temp.heat().getLevel());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_off() {
		/* Entry action for state 'off'. */
		temp.device().setIsOn(system.isOn);
	}
	
	/* Exit action for state 'on'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_DeviceStatus_on() {
		/* Exit action for state 'on'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state '<Actuator_OnStandby>'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby_() {
		/* Exit action for state '<Actuator_OnStandby>'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state '<Device_Actuated>'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated_() {
		/* Exit action for state '<Device_Actuated>'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state '<Actuator_off>'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off_() {
		/* Exit action for state '<Actuator_off>'. */
		getActuator().raiseOn();
	}
	
	/* Exit action for state '<Controller_Component>'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component_() {
		/* Exit action for state '<Controller_Component>'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_ControllerComponent_off() {
		/* Exit action for state 'off'. */
		getController().raiseOn();
	}
	
	/* Exit action for state '<Sensor_Component>'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_() {
		/* Exit action for state '<Sensor_Component>'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state '<Network_Connection_Updates>'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates_() {
		/* Exit action for state '<Network_Connection_Updates>'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_NetworkComponent_off() {
		/* Exit action for state 'off'. */
		getWiFi().raiseOn();
	}
	
	/* Exit action for state '<Power_Consumption_Updates>'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates_() {
		/* Exit action for state '<Power_Consumption_Updates>'. */
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off() {
		/* Exit action for state 'off'. */
		getPower().raiseOn();
	}
	
	/* Exit action for state '<Temperature_Updates>'. */
	private void exitAction__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates_() {
		/* Exit action for state '<Temperature_Updates>'. */
		timerService.unsetTimer(this, 7);
	}
	
	/* 'default' enter sequence for state SmartFireSystem */
	private void enterSequence__SmartFiresystem__SmartFireSystem_default() {
		/* 'default' enter sequence for state SmartFireSystem */
		enterSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_default();
		enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent_default();
		enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent_default();
		enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent_default();
		enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent_default();
		enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_default();
		enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_default();
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_off_default() {
		/* 'default' enter sequence for state off */
		entryAction__SmartFiresystem__SmartFireSystem_DeviceStatus_off();
		stateVector[0] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state on */
	private void enterSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_on_default() {
		/* 'default' enter sequence for state on */
		entryAction__SmartFiresystem__SmartFireSystem_DeviceStatus_on();
		stateVector[0] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_ON;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state <Actuator_OnStandby> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby__default() {
		/* 'default' enter sequence for state <Actuator_OnStandby> */
		entryAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby_();
		stateVector[1] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_ONSTANDBY_;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state <Device_Actuated> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated__default() {
		/* 'default' enter sequence for state <Device_Actuated> */
		entryAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated_();
		stateVector[1] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_ACTUATED_;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state <Actuator_off> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off__default() {
		/* 'default' enter sequence for state <Actuator_off> */
		entryAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off_();
		stateVector[1] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_OFF_;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state <Controller_Component_isON> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON__default() {
		/* 'default' enter sequence for state <Controller_Component_isON> */
		enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates__default();
	}
	
	/* 'default' enter sequence for state <Controller_Component> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component__default() {
		/* 'default' enter sequence for state <Controller_Component> */
		entryAction__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component_();
		stateVector[2] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON___CONTROLLER_RECEIVING_AND_SENDING_UPDATES___CONTROLLER_COMPONENT_;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent_off_default() {
		/* 'default' enter sequence for state off */
		entryAction__SmartFiresystem__SmartFireSystem_ControllerComponent_off();
		stateVector[2] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state <Sensor_Component_isON> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON__default() {
		/* 'default' enter sequence for state <Sensor_Component_isON> */
		entryAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON_();
		enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring__default();
	}
	
	/* 'default' enter sequence for state <Sensor_Component> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component__default() {
		/* 'default' enter sequence for state <Sensor_Component> */
		entryAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
		enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__default();
	}
	
	/* 'default' enter sequence for state CarbonDetected */
	private void enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__CarbonDetected_default() {
		/* 'default' enter sequence for state CarbonDetected */
		entryAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__CarbonDetected();
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__CARBONDETECTED;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state SmokeDetected */
	private void enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__SmokeDetected_default() {
		/* 'default' enter sequence for state SmokeDetected */
		entryAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__SmokeDetected();
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__SMOKEDETECTED;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state HeatDetected */
	private void enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__HeatDetected_default() {
		/* 'default' enter sequence for state HeatDetected */
		entryAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__HeatDetected();
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__HEATDETECTED;
		stateConfVectorPosition = 3;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___final__default() {
		/* Default enter sequence for final state */
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY___FINAL_;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent_off_default() {
		/* 'default' enter sequence for state off */
		entryAction__SmartFiresystem__SmartFireSystem_SensorComponent_off();
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT_OFF;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state <Initialize_Network_Component> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component__default() {
		/* 'default' enter sequence for state <Initialize_Network_Component> */
		enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates__default();
	}
	
	/* 'default' enter sequence for state <Network_Connection_Updates> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates__default() {
		/* 'default' enter sequence for state <Network_Connection_Updates> */
		entryAction__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates_();
		stateVector[4] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT___RECEIVING_NETWORK_CONNECTION_UPDATES___NETWORK_CONNECTION_UPDATES_;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent_off_default() {
		/* 'default' enter sequence for state off */
		entryAction__SmartFiresystem__SmartFireSystem_NetworkComponent_off();
		stateVector[4] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state <Initialize_Power_Component> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__default() {
		/* 'default' enter sequence for state <Initialize_Power_Component> */
		enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component__default();
	}
	
	/* 'default' enter sequence for state <Power_Consumption_Updates> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates__default() {
		/* 'default' enter sequence for state <Power_Consumption_Updates> */
		entryAction__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates_();
		stateVector[5] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT___RECEIVING_UPDATES_FROM_POWER_COMPONENT___POWER_CONSUMPTION_UPDATES_;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off_default() {
		/* 'default' enter sequence for state off */
		entryAction__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off();
		stateVector[5] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state <Initialize_DeviceTemp_Component> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component__default() {
		/* 'default' enter sequence for state <Initialize_DeviceTemp_Component> */
		enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component__default();
	}
	
	/* 'default' enter sequence for state <Temperature_Updates> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates__default() {
		/* 'default' enter sequence for state <Temperature_Updates> */
		entryAction__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates_();
		stateVector[6] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT___RECEIVING_UPDATES_FROM_DEVICETEMP_COMPONENT___TEMPERATURE_UPDATES_;
		stateConfVectorPosition = 6;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_off_default() {
		/* 'default' enter sequence for state off */
		entryAction__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_off();
		stateVector[6] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT_OFF;
		stateConfVectorPosition = 6;
	}
	
	/* 'default' enter sequence for region <SmartFiresystem> */
	private void enterSequence__SmartFiresystem__default() {
		/* 'default' enter sequence for region <SmartFiresystem> */
		react__SmartFiresystem___entry_Default();
	}
	
	/* 'default' enter sequence for region DeviceStatus */
	private void enterSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_default() {
		/* 'default' enter sequence for region DeviceStatus */
		react__SmartFiresystem__SmartFireSystem_DeviceStatus__entry_Default();
	}
	
	/* 'default' enter sequence for region ActuatorComponent */
	private void enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent_default() {
		/* 'default' enter sequence for region ActuatorComponent */
		react__SmartFiresystem__SmartFireSystem_ActuatorComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region ControllerComponent */
	private void enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent_default() {
		/* 'default' enter sequence for region ControllerComponent */
		react__SmartFiresystem__SmartFireSystem_ControllerComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region <Controller_Receiving_and_Sending_Updates> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates__default() {
		/* 'default' enter sequence for region <Controller_Receiving_and_Sending_Updates> */
		react__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___entry_Default();
	}
	
	/* 'default' enter sequence for region SensorComponent */
	private void enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent_default() {
		/* 'default' enter sequence for region SensorComponent */
		react__SmartFiresystem__SmartFireSystem_SensorComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region <Sensor_Monitoring> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring__default() {
		/* 'default' enter sequence for region <Sensor_Monitoring> */
		react__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___entry_Default();
	}
	
	/* 'default' enter sequence for region <Sensor_Detected_Activity> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__default() {
		/* 'default' enter sequence for region <Sensor_Detected_Activity> */
		react__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___entry_Default();
	}
	
	/* 'default' enter sequence for region NetworkComponent */
	private void enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent_default() {
		/* 'default' enter sequence for region NetworkComponent */
		react__SmartFiresystem__SmartFireSystem_NetworkComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region <Receiving_Network_Connection_Updates> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates__default() {
		/* 'default' enter sequence for region <Receiving_Network_Connection_Updates> */
		react__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___entry_Default();
	}
	
	/* 'default' enter sequence for region PowerCalculatorComponent */
	private void enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_default() {
		/* 'default' enter sequence for region PowerCalculatorComponent */
		react__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region <Receiving_Updates_From_Power_Component> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component__default() {
		/* 'default' enter sequence for region <Receiving_Updates_From_Power_Component> */
		react__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___entry_Default();
	}
	
	/* 'default' enter sequence for region DeviceTemperatureComponent */
	private void enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_default() {
		/* 'default' enter sequence for region DeviceTemperatureComponent */
		react__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region <Receiving_Updates_from_DeviceTemp_Component> */
	private void enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component__default() {
		/* 'default' enter sequence for region <Receiving_Updates_from_DeviceTemp_Component> */
		react__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___entry_Default();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_off() {
		/* Default exit sequence for state off */
		stateVector[0] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state on */
	private void exitSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_on() {
		/* Default exit sequence for state on */
		stateVector[0] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 0;
		exitAction__SmartFiresystem__SmartFireSystem_DeviceStatus_on();
	}
	
	/* Default exit sequence for state <Actuator_OnStandby> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby_() {
		/* Default exit sequence for state <Actuator_OnStandby> */
		stateVector[1] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 1;
		exitAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby_();
	}
	
	/* Default exit sequence for state <Device_Actuated> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated_() {
		/* Default exit sequence for state <Device_Actuated> */
		stateVector[1] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 1;
		exitAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated_();
	}
	
	/* Default exit sequence for state <Actuator_off> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off_() {
		/* Default exit sequence for state <Actuator_off> */
		stateVector[1] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 1;
		exitAction__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off_();
	}
	
	/* Default exit sequence for state <Controller_Component_isON> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON_() {
		/* Default exit sequence for state <Controller_Component_isON> */
		exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates_();
		stateVector[2] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state <Controller_Component> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component_() {
		/* Default exit sequence for state <Controller_Component> */
		stateVector[2] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON_;
		stateConfVectorPosition = 2;
		exitAction__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent_off() {
		/* Default exit sequence for state off */
		stateVector[2] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 2;
		exitAction__SmartFiresystem__SmartFireSystem_ControllerComponent_off();
	}
	
	/* Default exit sequence for state <Sensor_Component_isON> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON_() {
		/* Default exit sequence for state <Sensor_Component_isON> */
		exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring_();
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state <Sensor_Component> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_() {
		/* Default exit sequence for state <Sensor_Component> */
		exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity_();
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON_;
		stateConfVectorPosition = 3;
		exitAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
	}
	
	/* Default exit sequence for state CarbonDetected */
	private void exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__CarbonDetected() {
		/* Default exit sequence for state CarbonDetected */
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT_;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state SmokeDetected */
	private void exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__SmokeDetected() {
		/* Default exit sequence for state SmokeDetected */
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT_;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state HeatDetected */
	private void exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__HeatDetected() {
		/* Default exit sequence for state HeatDetected */
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT_;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___final_() {
		/* Default exit sequence for final state. */
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT_;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent_off() {
		/* Default exit sequence for state off */
		stateVector[3] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state <Initialize_Network_Component> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component_() {
		/* Default exit sequence for state <Initialize_Network_Component> */
		exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates_();
		stateVector[4] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state <Network_Connection_Updates> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates_() {
		/* Default exit sequence for state <Network_Connection_Updates> */
		stateVector[4] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT_;
		stateConfVectorPosition = 4;
		exitAction__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent_off() {
		/* Default exit sequence for state off */
		stateVector[4] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 4;
		exitAction__SmartFiresystem__SmartFireSystem_NetworkComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_Power_Component> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component_() {
		/* Default exit sequence for state <Initialize_Power_Component> */
		exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component_();
		stateVector[5] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 5;
	}
	
	/* Default exit sequence for state <Power_Consumption_Updates> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates_() {
		/* Default exit sequence for state <Power_Consumption_Updates> */
		stateVector[5] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_;
		stateConfVectorPosition = 5;
		exitAction__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off() {
		/* Default exit sequence for state off */
		stateVector[5] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 5;
		exitAction__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_DeviceTemp_Component> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component_() {
		/* Default exit sequence for state <Initialize_DeviceTemp_Component> */
		exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component_();
		stateVector[6] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 6;
	}
	
	/* Default exit sequence for state <Temperature_Updates> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates_() {
		/* Default exit sequence for state <Temperature_Updates> */
		stateVector[6] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT_;
		stateConfVectorPosition = 6;
		exitAction__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_off() {
		/* Default exit sequence for state off */
		stateVector[6] = State._SMARTFIRESYSTEM__SMARTFIRESYSTEM;
		stateConfVectorPosition = 6;
	}
	
	/* Default exit sequence for region <SmartFiresystem> */
	private void exitSequence__SmartFiresystem_() {
		/* Default exit sequence for region <SmartFiresystem> */
		switch (stateVector[0]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_OFF:
			exitSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_off();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICESTATUS_ON:
			exitSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_on();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_ONSTANDBY_:
			exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_ACTUATED_:
			exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_OFF_:
			exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off_();
			break;
		default:
			break;
		}
		switch (stateVector[2]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON_:
			exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON___CONTROLLER_RECEIVING_AND_SENDING_UPDATES___CONTROLLER_COMPONENT_:
			exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF:
			exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent_off();
			break;
		default:
			break;
		}
		switch (stateVector[3]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON_:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT_:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__CARBONDETECTED:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__CarbonDetected();
			exitAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__SMOKEDETECTED:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__SmokeDetected();
			exitAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__HEATDETECTED:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__HeatDetected();
			exitAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY___FINAL_:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___final_();
			exitAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT_OFF:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent_off();
			break;
		default:
			break;
		}
		switch (stateVector[4]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT_:
			exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT___RECEIVING_NETWORK_CONNECTION_UPDATES___NETWORK_CONNECTION_UPDATES_:
			exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF:
			exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent_off();
			break;
		default:
			break;
		}
		switch (stateVector[5]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_:
			exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT___RECEIVING_UPDATES_FROM_POWER_COMPONENT___POWER_CONSUMPTION_UPDATES_:
			exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF:
			exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off();
			break;
		default:
			break;
		}
		switch (stateVector[6]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT_:
			exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT___RECEIVING_UPDATES_FROM_DEVICETEMP_COMPONENT___TEMPERATURE_UPDATES_:
			exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT_OFF:
			exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_off();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region <Controller_Receiving_and_Sending_Updates> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates_() {
		/* Default exit sequence for region <Controller_Receiving_and_Sending_Updates> */
		switch (stateVector[2]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_CONTROLLERCOMPONENT__CONTROLLER_COMPONENT_ISON___CONTROLLER_RECEIVING_AND_SENDING_UPDATES___CONTROLLER_COMPONENT_:
			exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region <Sensor_Monitoring> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring_() {
		/* Default exit sequence for region <Sensor_Monitoring> */
		switch (stateVector[3]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT_:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__CARBONDETECTED:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__CarbonDetected();
			exitAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__SMOKEDETECTED:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__SmokeDetected();
			exitAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__HEATDETECTED:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__HeatDetected();
			exitAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY___FINAL_:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___final_();
			exitAction__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region <Sensor_Detected_Activity> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity_() {
		/* Default exit sequence for region <Sensor_Detected_Activity> */
		switch (stateVector[3]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__CARBONDETECTED:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__CarbonDetected();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__SMOKEDETECTED:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__SmokeDetected();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY__HEATDETECTED:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__HeatDetected();
			break;
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_SENSORCOMPONENT__SENSOR_COMPONENT_ISON___SENSOR_MONITORING___SENSOR_COMPONENT___SENSOR_DETECTED_ACTIVITY___FINAL_:
			exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region <Receiving_Network_Connection_Updates> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates_() {
		/* Default exit sequence for region <Receiving_Network_Connection_Updates> */
		switch (stateVector[4]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_NETWORK_COMPONENT___RECEIVING_NETWORK_CONNECTION_UPDATES___NETWORK_CONNECTION_UPDATES_:
			exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region <Receiving_Updates_From_Power_Component> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component_() {
		/* Default exit sequence for region <Receiving_Updates_From_Power_Component> */
		switch (stateVector[5]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT___RECEIVING_UPDATES_FROM_POWER_COMPONENT___POWER_CONSUMPTION_UPDATES_:
			exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region <Receiving_Updates_from_DeviceTemp_Component> */
	private void exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component_() {
		/* Default exit sequence for region <Receiving_Updates_from_DeviceTemp_Component> */
		switch (stateVector[6]) {
		case _SMARTFIRESYSTEM__SMARTFIRESYSTEM_DEVICETEMPERATURECOMPONENT__INITIALIZE_DEVICETEMP_COMPONENT___RECEIVING_UPDATES_FROM_DEVICETEMP_COMPONENT___TEMPERATURE_UPDATES_:
			exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___choice_0() {
		/* The reactions of state null. */
		if (carbonSensorOutput.getActivity()) {
			enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__CarbonDetected_default();
		} else {
			if (smokeSensorOutput.getActivity()) {
				enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__SmokeDetected_default();
			} else {
				if (heatSensorOutput.getActivity()) {
					enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__HeatDetected_default();
				} else {
					enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___final__default();
				}
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_DeviceStatus__entry_Default() {
		/* Default react sequence for initial entry  */
		getFireAlarm().enter();
		enterSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_ActuatorComponent__entry_Default() {
		/* Default react sequence for initial entry  */
		getActuator().enter();
		enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_ControllerComponent__entry_Default() {
		/* Default react sequence for initial entry  */
		getController().enter();
		enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_SensorComponent__entry_Default() {
		/* Default react sequence for initial entry  */
		getCarbonSensor().enter();
		getSmokeSensor().enter();
		getHeatSensor().enter();
		enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___entry_Default() {
		/* Default react sequence for initial entry  */
		react__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_NetworkComponent__entry_Default() {
		/* Default react sequence for initial entry  */
		getWiFi().enter();
		enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__entry_Default() {
		/* Default react sequence for initial entry  */
		getPower().enter();
		enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__entry_Default() {
		/* Default react sequence for initial entry  */
		getTemp().enter();
		enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartFiresystem___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__SmartFiresystem__SmartFireSystem_default();
	}
	
	private long _SmartFiresystem__SmartFireSystem_DeviceStatus_off_react(long transitioned_before) {
		/* The reactions of state off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (system.on) {
				exitSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_off();
				enterSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_on_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_DeviceStatus_on_react(long transitioned_before) {
		/* The reactions of state on. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (system.off) {
				exitSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_on();
				enterSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_off_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_on();
					timeEvents[0] = false;
					enterSequence__SmartFiresystem__SmartFireSystem_DeviceStatus_on_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby__react(long transitioned_before) {
		/* The reactions of state <Actuator_OnStandby>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (getActuator().getIsTriggered()) {
				exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby_();
				enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated__default();
				transitioned_after = 1l;
			} else {
				if (system.off) {
					exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby_();
					enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off__default();
					transitioned_after = 1l;
				} else {
					if (timeEvents[1]) {
						exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby_();
						timeEvents[1] = false;
						enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby__default();
						transitioned_after = 1l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated__react(long transitioned_before) {
		/* The reactions of state <Device_Actuated>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (!(getActuator().getIsTriggered())) {
				exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated_();
				enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby__default();
				transitioned_after = 1l;
			} else {
				if (system.off) {
					exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Device_Actuated_();
					enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off__default();
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			if (timeEvents[2]) {
				fireAlarm.sensors().setTriggerSignal_received(actuator.getIsTriggered());
				fireAlarm.sensors().setSmoke_presence(smokeSensorOutput.activity);
				fireAlarm.sensors().setCarbon_presence(carbonSensorOutput.activity);
				fireAlarm.sensors().setHeat_presence(heatSensorOutput.activity);
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off__react(long transitioned_before) {
		/* The reactions of state <Actuator_off>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (system.on) {
				exitSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_off_();
				enterSequence__SmartFiresystem__SmartFireSystem_ActuatorComponent__Actuator_OnStandby__default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON__react(long transitioned_before) {
		/* The reactions of state <Controller_Component_isON>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (system.off) {
				exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON_();
				enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent_off_default();
				transitioned_after = 2l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component__react(long transitioned_before) {
		/* The reactions of state <Controller_Component>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (timeEvents[3]) {
				exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component_();
				timeEvents[3] = false;
				enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON___Controller_Receiving_and_Sending_Updates___Controller_Component__default();
				_SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON__react(2l);
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = _SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_ControllerComponent_off_react(long transitioned_before) {
		/* The reactions of state off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<2l) {
			if (system.on) {
				exitSequence__SmartFiresystem__SmartFireSystem_ControllerComponent_off();
				enterSequence__SmartFiresystem__SmartFireSystem_ControllerComponent__Controller_Component_isON__default();
				transitioned_after = 2l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON__react(long transitioned_before) {
		/* The reactions of state <Sensor_Component_isON>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<3l) {
			if (system.off) {
				exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON_();
				enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent_off_default();
				transitioned_after = 3l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component__react(long transitioned_before) {
		/* The reactions of state <Sensor_Component>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<3l) {
			if (((timeEvents[4]) && (!(sensorOutput.getActivity())))) {
				exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
				timeEvents[4] = false;
				enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component__default();
				_SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON__react(3l);
				transitioned_after = 3l;
			} else {
				if (sensorInput.reset) {
					exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component_();
					enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component__default();
					_SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON__react(3l);
					transitioned_after = 3l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__CarbonDetected_react(long transitioned_before) {
		/* The reactions of state CarbonDetected. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component__react(transitioned_before);
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__SmokeDetected_react(long transitioned_before) {
		/* The reactions of state SmokeDetected. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component__react(transitioned_before);
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity__HeatDetected_react(long transitioned_before) {
		/* The reactions of state HeatDetected. */
		long transitioned_after = transitioned_before;
		/* Always execute local reactions. */
		transitioned_after = _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component__react(transitioned_before);
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component___Sensor_Detected_Activity___final__react(long transitioned_before) {
		/* The reactions of state null. */
		return _SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON___Sensor_Monitoring___Sensor_Component__react(transitioned_before);
	}
	
	private long _SmartFiresystem__SmartFireSystem_SensorComponent_off_react(long transitioned_before) {
		/* The reactions of state off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<3l) {
			if (system.on) {
				exitSequence__SmartFiresystem__SmartFireSystem_SensorComponent_off();
				enterSequence__SmartFiresystem__SmartFireSystem_SensorComponent__Sensor_Component_isON__default();
				transitioned_after = 3l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component__react(long transitioned_before) {
		/* The reactions of state <Initialize_Network_Component>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<4l) {
			if ((system.off || system.disconnect_network)) {
				exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component_();
				enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent_off_default();
				transitioned_after = 4l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates__react(long transitioned_before) {
		/* The reactions of state <Network_Connection_Updates>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<4l) {
			if (timeEvents[5]) {
				exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates_();
				timeEvents[5] = false;
				enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component___Receiving_Network_Connection_Updates___Network_Connection_Updates__default();
				_SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component__react(4l);
				transitioned_after = 4l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = _SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_NetworkComponent_off_react(long transitioned_before) {
		/* The reactions of state off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<4l) {
			if ((system.on || system.connect_network)) {
				exitSequence__SmartFiresystem__SmartFireSystem_NetworkComponent_off();
				enterSequence__SmartFiresystem__SmartFireSystem_NetworkComponent__Initialize_Network_Component__default();
				transitioned_after = 4l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__react(long transitioned_before) {
		/* The reactions of state <Initialize_Power_Component>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<5l) {
			if (system.off) {
				exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component_();
				enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off_default();
				transitioned_after = 5l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates__react(long transitioned_before) {
		/* The reactions of state <Power_Consumption_Updates>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<5l) {
			if (timeEvents[6]) {
				exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates_();
				timeEvents[6] = false;
				enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component___Receiving_Updates_From_Power_Component___Power_Consumption_Updates__default();
				_SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__react(5l);
				transitioned_after = 5l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = _SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off_react(long transitioned_before) {
		/* The reactions of state off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<5l) {
			if (system.on) {
				exitSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent_off();
				enterSequence__SmartFiresystem__SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__default();
				transitioned_after = 5l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component__react(long transitioned_before) {
		/* The reactions of state <Initialize_DeviceTemp_Component>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<6l) {
			if (system.off) {
				exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component_();
				enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_off_default();
				transitioned_after = 6l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates__react(long transitioned_before) {
		/* The reactions of state <Temperature_Updates>. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<6l) {
			if (timeEvents[7]) {
				exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates_();
				timeEvents[7] = false;
				enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component___Receiving_Updates_from_DeviceTemp_Component___Temperature_Updates__default();
				_SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component__react(6l);
				transitioned_after = 6l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = _SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_off_react(long transitioned_before) {
		/* The reactions of state off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<6l) {
			if (system.on) {
				exitSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent_off();
				enterSequence__SmartFiresystem__SmartFireSystem_DeviceTemperatureComponent__Initialize_DeviceTemp_Component__default();
				transitioned_after = 6l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
