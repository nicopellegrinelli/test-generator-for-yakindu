/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;

public class Keyboard implements ICycleBased {
	private static class EvBuf {
		private boolean pressCapsLock;
		private boolean pressNumLock;
	}
	private static class KeyboardEvBuf {
		private EvBuf iface = new EvBuf();
	}
	public enum State {
		CAPSLOCK_CAPSLOCK_OFF,
		CAPSLOCK_CAPSLOCK_ON,
		NUMLOCK_NUMLOCK_OFF,
		NUMLOCK_NUMLOCK_ON,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private KeyboardEvBuf current = new KeyboardEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Keyboard() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		microStep();
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart keyboard */
		enterSequence_CapsLock_default();
		enterSequence_NumLock_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart keyboard */
		exitSequence_CapsLock();
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitSequence_NumLock();
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		current.iface.pressCapsLock = pressCapsLock;
		pressCapsLock = false;
		current.iface.pressNumLock = pressNumLock;
		pressNumLock = false;
	}
	
	private void clearInEvents() {
		pressCapsLock = false;
		pressNumLock = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case CAPSLOCK_CAPSLOCK_OFF:
			transitioned = capsLock_CapsLock_OFF_react(transitioned);
			break;
		case CAPSLOCK_CAPSLOCK_ON:
			transitioned = capsLock_CapsLock_ON_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case NUMLOCK_NUMLOCK_OFF:
				numLock_NumLock_OFF_react(transitioned);
				break;
			case NUMLOCK_NUMLOCK_ON:
				numLock_NumLock_ON_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case CAPSLOCK_CAPSLOCK_OFF:
			return stateVector[0] == State.CAPSLOCK_CAPSLOCK_OFF;
		case CAPSLOCK_CAPSLOCK_ON:
			return stateVector[0] == State.CAPSLOCK_CAPSLOCK_ON;
		case NUMLOCK_NUMLOCK_OFF:
			return stateVector[1] == State.NUMLOCK_NUMLOCK_OFF;
		case NUMLOCK_NUMLOCK_ON:
			return stateVector[1] == State.NUMLOCK_NUMLOCK_ON;
		default:
			return false;
		}
	}
	
	
	private boolean pressCapsLock;
	
	
	public void raisePressCapsLock() {
		pressCapsLock = true;
	}
	
	private boolean pressNumLock;
	
	
	public void raisePressNumLock() {
		pressNumLock = true;
	}
	
	/* 'default' enter sequence for state CapsLock_OFF */
	private void enterSequence_CapsLock_CapsLock_OFF_default() {
		/* 'default' enter sequence for state CapsLock_OFF */
		stateVector[0] = State.CAPSLOCK_CAPSLOCK_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state CapsLock_ON */
	private void enterSequence_CapsLock_CapsLock_ON_default() {
		/* 'default' enter sequence for state CapsLock_ON */
		stateVector[0] = State.CAPSLOCK_CAPSLOCK_ON;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state NumLock_OFF */
	private void enterSequence_NumLock_NumLock_OFF_default() {
		/* 'default' enter sequence for state NumLock_OFF */
		stateVector[1] = State.NUMLOCK_NUMLOCK_OFF;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state NumLock_ON */
	private void enterSequence_NumLock_NumLock_ON_default() {
		/* 'default' enter sequence for state NumLock_ON */
		stateVector[1] = State.NUMLOCK_NUMLOCK_ON;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region CapsLock */
	private void enterSequence_CapsLock_default() {
		/* 'default' enter sequence for region CapsLock */
		react_CapsLock__entry_Default();
	}
	
	/* 'default' enter sequence for region NumLock */
	private void enterSequence_NumLock_default() {
		/* 'default' enter sequence for region NumLock */
		react_NumLock__entry_Default();
	}
	
	/* Default exit sequence for state CapsLock_OFF */
	private void exitSequence_CapsLock_CapsLock_OFF() {
		/* Default exit sequence for state CapsLock_OFF */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state CapsLock_ON */
	private void exitSequence_CapsLock_CapsLock_ON() {
		/* Default exit sequence for state CapsLock_ON */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state NumLock_OFF */
	private void exitSequence_NumLock_NumLock_OFF() {
		/* Default exit sequence for state NumLock_OFF */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state NumLock_ON */
	private void exitSequence_NumLock_NumLock_ON() {
		/* Default exit sequence for state NumLock_ON */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for region CapsLock */
	private void exitSequence_CapsLock() {
		/* Default exit sequence for region CapsLock */
		switch (stateVector[0]) {
		case CAPSLOCK_CAPSLOCK_OFF:
			exitSequence_CapsLock_CapsLock_OFF();
			break;
		case CAPSLOCK_CAPSLOCK_ON:
			exitSequence_CapsLock_CapsLock_ON();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region NumLock */
	private void exitSequence_NumLock() {
		/* Default exit sequence for region NumLock */
		switch (stateVector[1]) {
		case NUMLOCK_NUMLOCK_OFF:
			exitSequence_NumLock_NumLock_OFF();
			break;
		case NUMLOCK_NUMLOCK_ON:
			exitSequence_NumLock_NumLock_ON();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_CapsLock__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_CapsLock_CapsLock_OFF_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_NumLock__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_NumLock_NumLock_OFF_default();
	}
	
	private long capsLock_CapsLock_OFF_react(long transitioned_before) {
		/* The reactions of state CapsLock_OFF. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.pressCapsLock) {
				exitSequence_CapsLock_CapsLock_OFF();
				enterSequence_CapsLock_CapsLock_ON_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long capsLock_CapsLock_ON_react(long transitioned_before) {
		/* The reactions of state CapsLock_ON. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.iface.pressCapsLock) {
				exitSequence_CapsLock_CapsLock_ON();
				enterSequence_CapsLock_CapsLock_OFF_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long numLock_NumLock_OFF_react(long transitioned_before) {
		/* The reactions of state NumLock_OFF. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (current.iface.pressNumLock) {
				exitSequence_NumLock_NumLock_OFF();
				enterSequence_NumLock_NumLock_ON_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long numLock_NumLock_ON_react(long transitioned_before) {
		/* The reactions of state NumLock_ON. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (current.iface.pressNumLock) {
				exitSequence_NumLock_NumLock_ON();
				enterSequence_NumLock_NumLock_OFF_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
}
