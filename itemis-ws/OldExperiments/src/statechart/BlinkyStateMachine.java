/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;

public class BlinkyStateMachine implements ITimed, ICycleBased {
	private static class TimeEventsEvBuf {
		private boolean blinkyStateMachine_main_region_red_LED_on_time_event_0;
		private boolean blinkyStateMachine_main_region_red_LED_off_time_event_0;
	}
	private static class BlinkyStateMachineEvBuf {
		private TimeEventsEvBuf timeEvents = new TimeEventsEvBuf();
	}
	public enum State {
		MAIN_REGION_INITIALIZATION,
		MAIN_REGION_RED_LED_ON,
		MAIN_REGION_RED_LED_OFF,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private BlinkyStateMachineEvBuf current = new BlinkyStateMachineEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public BlinkyStateMachine() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.internalOperationCallback == null) {
			throw new IllegalStateException("Internal operation callback must be set.");	
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		swapInEvents();
		microStep();
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.internalOperationCallback == null) {
			throw new IllegalStateException("Internal operation callback must be set.");	
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart blinkyStateMachine */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart blinkyStateMachine */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		current.timeEvents.blinkyStateMachine_main_region_red_LED_on_time_event_0 = timeEvents[0];
		timeEvents[0] = false;
		current.timeEvents.blinkyStateMachine_main_region_red_LED_off_time_event_0 = timeEvents[1];
		timeEvents[1] = false;
	}
	
	private void clearInEvents() {
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_INITIALIZATION:
			main_region_Initialization_react(-1l);
			break;
		case MAIN_REGION_RED_LED_ON:
			main_region_red_LED_on_react(-1l);
			break;
		case MAIN_REGION_RED_LED_OFF:
			main_region_red_LED_off_react(-1l);
			break;
		default:
			break;
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_INITIALIZATION:
			return stateVector[0] == State.MAIN_REGION_INITIALIZATION;
		case MAIN_REGION_RED_LED_ON:
			return stateVector[0] == State.MAIN_REGION_RED_LED_ON;
		case MAIN_REGION_RED_LED_OFF:
			return stateVector[0] == State.MAIN_REGION_RED_LED_OFF;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		timeEvents[eventID] = true;
	}
	
	
	public interface InternalOperationCallback {
	
		public void init();
		
		public void redOn();
		
		public void redOff();
		
	}
	
	private InternalOperationCallback internalOperationCallback;
	
	public void setInternalOperationCallback(InternalOperationCallback internalOperationCallback) {
		this.internalOperationCallback = internalOperationCallback;
	}
	/* Entry action for state 'Initialization'. */
	private void entryAction_main_region_Initialization() {
		/* Entry action for state 'Initialization'. */
		internalOperationCallback.init();
	}
	
	/* Entry action for state 'red LED on'. */
	private void entryAction_main_region_red_LED_on() {
		/* Entry action for state 'red LED on'. */
		timerService.setTimer(this, 0, (1l * 1000l), false);
		internalOperationCallback.redOn();
	}
	
	/* Entry action for state 'red LED off'. */
	private void entryAction_main_region_red_LED_off() {
		/* Entry action for state 'red LED off'. */
		timerService.setTimer(this, 1, (1l * 1000l), false);
		internalOperationCallback.redOff();
	}
	
	/* Exit action for state 'red LED on'. */
	private void exitAction_main_region_red_LED_on() {
		/* Exit action for state 'red LED on'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'red LED off'. */
	private void exitAction_main_region_red_LED_off() {
		/* Exit action for state 'red LED off'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Initialization */
	private void enterSequence_main_region_Initialization_default() {
		/* 'default' enter sequence for state Initialization */
		entryAction_main_region_Initialization();
		stateVector[0] = State.MAIN_REGION_INITIALIZATION;
	}
	
	/* 'default' enter sequence for state red LED on */
	private void enterSequence_main_region_red_LED_on_default() {
		/* 'default' enter sequence for state red LED on */
		entryAction_main_region_red_LED_on();
		stateVector[0] = State.MAIN_REGION_RED_LED_ON;
	}
	
	/* 'default' enter sequence for state red LED off */
	private void enterSequence_main_region_red_LED_off_default() {
		/* 'default' enter sequence for state red LED off */
		entryAction_main_region_red_LED_off();
		stateVector[0] = State.MAIN_REGION_RED_LED_OFF;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Initialization */
	private void exitSequence_main_region_Initialization() {
		/* Default exit sequence for state Initialization */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state red LED on */
	private void exitSequence_main_region_red_LED_on() {
		/* Default exit sequence for state red LED on */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_red_LED_on();
	}
	
	/* Default exit sequence for state red LED off */
	private void exitSequence_main_region_red_LED_off() {
		/* Default exit sequence for state red LED off */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_red_LED_off();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_INITIALIZATION:
			exitSequence_main_region_Initialization();
			break;
		case MAIN_REGION_RED_LED_ON:
			exitSequence_main_region_red_LED_on();
			break;
		case MAIN_REGION_RED_LED_OFF:
			exitSequence_main_region_red_LED_off();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_Initialization_default();
	}
	
	private long main_region_Initialization_react(long transitioned_before) {
		/* The reactions of state Initialization. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			exitSequence_main_region_Initialization();
			enterSequence_main_region_red_LED_on_default();
			transitioned_after = 0l;
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_red_LED_on_react(long transitioned_before) {
		/* The reactions of state red LED on. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.blinkyStateMachine_main_region_red_LED_on_time_event_0) {
				exitSequence_main_region_red_LED_on();
				current.timeEvents.blinkyStateMachine_main_region_red_LED_on_time_event_0 = false;
				enterSequence_main_region_red_LED_off_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_red_LED_off_react(long transitioned_before) {
		/* The reactions of state red LED off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.timeEvents.blinkyStateMachine_main_region_red_LED_off_time_event_0) {
				exitSequence_main_region_red_LED_off();
				current.timeEvents.blinkyStateMachine_main_region_red_LED_off_time_event_0 = false;
				enterSequence_main_region_red_LED_on_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
}
