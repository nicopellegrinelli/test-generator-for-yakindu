/**
 * Generated by itemis CREATE code generator.
 */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class TrafficLightSimplified implements ITimed, IEventDriven {

    public enum State {

        MAIN_REGION_RED, MAIN_REGION_PENDING, MAIN_REGION_YELLOW, MAIN_REGION_GREEN, $NULLSTATE$
    }

    private final State[] stateVector = new State[1];

    private ITimerService timerService;

    private final boolean[] timeEvents = new boolean[4];

    private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();

    private boolean isExecuting;

    private boolean getIsExecuting() {
        return isExecuting;
    }

    private void setIsExecuting(boolean value) {
        this.isExecuting = value;
    }

    public TrafficLightSimplified() {
        for (int i = 0; i < 1; i++) {
            stateVector[i] = State.$NULLSTATE$;
        }
        clearInEvents();
        /* Default init sequence for statechart TrafficLight */
        setCount(0l);
        isExecuting = false;
    }

    public void enter() {
        /* Activates the state machine. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default enter sequence for statechart TrafficLight */
        enterSequence_main_region_default();
        isExecuting = false;
    }

    public void exit() {
        /* Deactivates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default exit sequence for statechart TrafficLight */
        exitSequence_main_region();
        isExecuting = false;
    }

    /**
     * @see IStatemachine#isActive()
     */
    public boolean isActive() {
        return stateVector[0] != State.$NULLSTATE$;
    }

    /**
     * Always returns 'false' since this state machine can never become final.
     *
     * @see IStatemachine#isFinal()
     */
    public boolean isFinal() {
        return false;
    }

    private void clearInEvents() {
        pedestrian = false;
        timeEvents[0] = false;
        timeEvents[1] = false;
        timeEvents[2] = false;
        timeEvents[3] = false;
    }

    private void microStep() {
        switch(stateVector[0]) {
            case MAIN_REGION_RED:
                main_region_red_react(-1l);
                break;
            case MAIN_REGION_PENDING:
                main_region_pending_react(-1l);
                break;
            case MAIN_REGION_YELLOW:
                main_region_yellow_react(-1l);
                break;
            case MAIN_REGION_GREEN:
                main_region_green_react(-1l);
                break;
            default:
                break;
        }
    }

    private void runCycle() {
        /* Performs a 'run to completion' step. */
        if (timerService == null) {
            throw new IllegalStateException("Timer service must be set.");
        }
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        nextEvent();
        do {
            microStep();
            clearInEvents();
        } while (nextEvent());
        isExecuting = false;
    }

    private boolean nextEvent() {
        if (!inEventQueue.isEmpty()) {
            inEventQueue.poll().run();
            return true;
        }
        return false;
    }

    /**
     * Returns true if the given state is currently active otherwise false.
     */
    public boolean isStateActive(State state) {
        switch(state) {
            case MAIN_REGION_RED:
                return stateVector[0] == State.MAIN_REGION_RED;
            case MAIN_REGION_PENDING:
                return stateVector[0] == State.MAIN_REGION_PENDING;
            case MAIN_REGION_YELLOW:
                return stateVector[0] == State.MAIN_REGION_YELLOW;
            case MAIN_REGION_GREEN:
                return stateVector[0] == State.MAIN_REGION_GREEN;
            default:
                return false;
        }
    }

    public void setTimerService(ITimerService timerService) {
        this.timerService = timerService;
    }

    private ITimerService getTimerService() {
        return timerService;
    }

    public void raiseTimeEvent(int eventID) {
        inEventQueue.add(() -> {
            timeEvents[eventID] = true;
        });
        runCycle();
    }

    private boolean pedestrian;

    public void raisePedestrian() {
        inEventQueue.add(() -> {
            pedestrian = true;
        });
        runCycle();
    }

    private boolean sigR;

    private void raiseSigR() {
        sigR = true;
        sigRObservable.next(null);
    }

    private Observable<Void> sigRObservable = new Observable<Void>();

    private Observable<Void> getSigR() {
        return sigRObservable;
    }

    private boolean sigG;

    private void raiseSigG() {
        sigG = true;
        sigGObservable.next(null);
    }

    private Observable<Void> sigGObservable = new Observable<Void>();

    private Observable<Void> getSigG() {
        return sigGObservable;
    }

    private boolean sigY;

    private void raiseSigY() {
        sigY = true;
        sigYObservable.next(null);
    }

    private Observable<Void> sigYObservable = new Observable<Void>();

    private Observable<Void> getSigY() {
        return sigYObservable;
    }

    private long count;

    private long getCount() {
        return count;
    }

    private void setCount(long value) {
        this.count = value;
    }

    /* Entry action for state 'red'. */
    private void entryAction_main_region_red() {
        /* Entry action for state 'red'. */
        timerService.setTimer(this, 0, (1l * 1000l), true);
    }

    /* Entry action for state 'pending'. */
    private void entryAction_main_region_pending() {
        /* Entry action for state 'pending'. */
        timerService.setTimer(this, 1, (1l * 1000l), true);
    }

    /* Entry action for state 'yellow'. */
    private void entryAction_main_region_yellow() {
        /* Entry action for state 'yellow'. */
        timerService.setTimer(this, 2, (1l * 1000l), true);
    }

    /* Entry action for state 'green'. */
    private void entryAction_main_region_green() {
        /* Entry action for state 'green'. */
        timerService.setTimer(this, 3, (1l * 1000l), true);
    }

    /* Exit action for state 'red'. */
    private void exitAction_main_region_red() {
        /* Exit action for state 'red'. */
        timerService.unsetTimer(this, 0);
    }

    /* Exit action for state 'pending'. */
    private void exitAction_main_region_pending() {
        /* Exit action for state 'pending'. */
        timerService.unsetTimer(this, 1);
    }

    /* Exit action for state 'yellow'. */
    private void exitAction_main_region_yellow() {
        /* Exit action for state 'yellow'. */
        timerService.unsetTimer(this, 2);
    }

    /* Exit action for state 'green'. */
    private void exitAction_main_region_green() {
        /* Exit action for state 'green'. */
        timerService.unsetTimer(this, 3);
    }

    /* 'default' enter sequence for state red */
    private void enterSequence_main_region_red_default() {
        /* 'default' enter sequence for state red */
        entryAction_main_region_red();
        stateVector[0] = State.MAIN_REGION_RED;
    }

    /* 'default' enter sequence for state pending */
    private void enterSequence_main_region_pending_default() {
        /* 'default' enter sequence for state pending */
        entryAction_main_region_pending();
        stateVector[0] = State.MAIN_REGION_PENDING;
    }

    /* 'default' enter sequence for state yellow */
    private void enterSequence_main_region_yellow_default() {
        /* 'default' enter sequence for state yellow */
        entryAction_main_region_yellow();
        stateVector[0] = State.MAIN_REGION_YELLOW;
    }

    /* 'default' enter sequence for state green */
    private void enterSequence_main_region_green_default() {
        /* 'default' enter sequence for state green */
        entryAction_main_region_green();
        stateVector[0] = State.MAIN_REGION_GREEN;
    }

    /* 'default' enter sequence for region main region */
    private void enterSequence_main_region_default() {
        /* 'default' enter sequence for region main region */
        react_main_region__entry_Default();
    }

    /* Default exit sequence for state red */
    private void exitSequence_main_region_red() {
        /* Default exit sequence for state red */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_red();
    }

    /* Default exit sequence for state pending */
    private void exitSequence_main_region_pending() {
        /* Default exit sequence for state pending */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_pending();
    }

    /* Default exit sequence for state yellow */
    private void exitSequence_main_region_yellow() {
        /* Default exit sequence for state yellow */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_yellow();
    }

    /* Default exit sequence for state green */
    private void exitSequence_main_region_green() {
        /* Default exit sequence for state green */
        stateVector[0] = State.$NULLSTATE$;
        exitAction_main_region_green();
    }

    /* Default exit sequence for region main region */
    private void exitSequence_main_region() {
        /* Default exit sequence for region main region */
        switch(stateVector[0]) {
            case MAIN_REGION_RED:
                exitSequence_main_region_red();
                break;
            case MAIN_REGION_PENDING:
                exitSequence_main_region_pending();
                break;
            case MAIN_REGION_YELLOW:
                exitSequence_main_region_yellow();
                break;
            case MAIN_REGION_GREEN:
                exitSequence_main_region_green();
                break;
            default:
                break;
        }
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__entry_Default() {
        /* Default react sequence for initial entry  */
        setCount(0l);
        enterSequence_main_region_red_default();
    }

    private long react(long transitioned_before) {
        /* State machine reactions. */
        return transitioned_before;
    }

    private long main_region_red_react(long transitioned_before) {
        /* The reactions of state red. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (getCount() >= 6l) {
                exitSequence_main_region_red();
                raiseSigG();
                setCount(0l);
                enterSequence_main_region_green_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            if (timeEvents[0]) {
                count++;
            }
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_pending_react(long transitioned_before) {
        /* The reactions of state pending. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (getCount() >= 6l) {
                exitSequence_main_region_pending();
                raiseSigY();
                setCount(0l);
                enterSequence_main_region_yellow_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            if (timeEvents[1]) {
                count++;
            }
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_yellow_react(long transitioned_before) {
        /* The reactions of state yellow. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (getCount() >= 1l) {
                exitSequence_main_region_yellow();
                raiseSigR();
                setCount(0l);
                enterSequence_main_region_red_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            if (timeEvents[2]) {
                count++;
            }
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_green_react(long transitioned_before) {
        /* The reactions of state green. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (((pedestrian) && (getCount() < 6l))) {
                exitSequence_main_region_green();
                count++;
                enterSequence_main_region_pending_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (((pedestrian) && (getCount() >= 6l))) {
                    exitSequence_main_region_green();
                    raiseSigY();
                    enterSequence_main_region_yellow_default();
                    react(0l);
                    transitioned_after = 0l;
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            if (((timeEvents[3]) && (getCount() < 6l))) {
                count++;
            }
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    /* Can be used by the client code to trigger a run to completion step without raising an event. */
    public void triggerWithoutEvent() {
        runCycle();
    }
}
