/* Generated by itemis CREATE code generator. */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class TrafficLight implements IEventDriven {
	public enum State {
		MAIN_REGION_RED,
		MAIN_REGION_PENDING,
		MAIN_REGION_YELLOW,
		MAIN_REGION_GREEN,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public TrafficLight() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart TrafficLight */
		setCount(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart TrafficLight */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart TrafficLight */
		exitSequence_main_region();
		stateVector[0] = State.$NULLSTATE$;
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		pedestrian = false;
		sec = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_RED:
			main_region_red_react(-1l);
			break;
		case MAIN_REGION_PENDING:
			main_region_pending_react(-1l);
			break;
		case MAIN_REGION_YELLOW:
			main_region_yellow_react(-1l);
			break;
		case MAIN_REGION_GREEN:
			main_region_green_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_RED:
			return stateVector[0] == State.MAIN_REGION_RED;
		case MAIN_REGION_PENDING:
			return stateVector[0] == State.MAIN_REGION_PENDING;
		case MAIN_REGION_YELLOW:
			return stateVector[0] == State.MAIN_REGION_YELLOW;
		case MAIN_REGION_GREEN:
			return stateVector[0] == State.MAIN_REGION_GREEN;
		default:
			return false;
		}
	}
	
	
	private boolean pedestrian;
	
	
	public void raisePedestrian() {
		inEventQueue.add(() -> {
			pedestrian = true;
		});
		runCycle();
	}
	
	private boolean sec;
	
	
	public void raiseSec() {
		inEventQueue.add(() -> {
			sec = true;
		});
		runCycle();
	}
	
	private boolean sigR;
	
	
	protected void raiseSigR() {
		sigR = true;
		sigRObservable.next(null);
	}
	
	private Observable<Void> sigRObservable = new Observable<Void>();
	
	public Observable<Void> getSigR() {
		return sigRObservable;
	}
	
	private boolean sigG;
	
	
	protected void raiseSigG() {
		sigG = true;
		sigGObservable.next(null);
	}
	
	private Observable<Void> sigGObservable = new Observable<Void>();
	
	public Observable<Void> getSigG() {
		return sigGObservable;
	}
	
	private boolean sigY;
	
	
	protected void raiseSigY() {
		sigY = true;
		sigYObservable.next(null);
	}
	
	private Observable<Void> sigYObservable = new Observable<Void>();
	
	public Observable<Void> getSigY() {
		return sigYObservable;
	}
	
	private long count;
	
	public long getCount() {
		return count;
	}
	
	public void setCount(long value) {
		this.count = value;
	}
	
	/* 'default' enter sequence for state red */
	private void enterSequence_main_region_red_default() {
		/* 'default' enter sequence for state red */
		stateVector[0] = State.MAIN_REGION_RED;
	}
	
	/* 'default' enter sequence for state pending */
	private void enterSequence_main_region_pending_default() {
		/* 'default' enter sequence for state pending */
		stateVector[0] = State.MAIN_REGION_PENDING;
	}
	
	/* 'default' enter sequence for state yellow */
	private void enterSequence_main_region_yellow_default() {
		/* 'default' enter sequence for state yellow */
		stateVector[0] = State.MAIN_REGION_YELLOW;
	}
	
	/* 'default' enter sequence for state green */
	private void enterSequence_main_region_green_default() {
		/* 'default' enter sequence for state green */
		stateVector[0] = State.MAIN_REGION_GREEN;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state red */
	private void exitSequence_main_region_red() {
		/* Default exit sequence for state red */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state pending */
	private void exitSequence_main_region_pending() {
		/* Default exit sequence for state pending */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state yellow */
	private void exitSequence_main_region_yellow() {
		/* Default exit sequence for state yellow */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state green */
	private void exitSequence_main_region_green() {
		/* Default exit sequence for state green */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_RED:
			exitSequence_main_region_red();
			break;
		case MAIN_REGION_PENDING:
			exitSequence_main_region_pending();
			break;
		case MAIN_REGION_YELLOW:
			exitSequence_main_region_yellow();
			break;
		case MAIN_REGION_GREEN:
			exitSequence_main_region_green();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		setCount(0l);
		enterSequence_main_region_red_default();
	}
	
	private long main_region_red_react(long transitioned_before) {
		/* The reactions of state red. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getCount()>=60l) {
				exitSequence_main_region_red();
				raiseSigG();
				setCount(0l);
				enterSequence_main_region_green_default();
				transitioned_after = 0l;
			} else {
				if (((sec) && (getCount()<60l))) {
					exitSequence_main_region_red();
					count++;
					enterSequence_main_region_red_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_pending_react(long transitioned_before) {
		/* The reactions of state pending. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getCount()>=60l) {
				exitSequence_main_region_pending();
				raiseSigY();
				setCount(0l);
				enterSequence_main_region_yellow_default();
				transitioned_after = 0l;
			} else {
				if (((sec) && (getCount()<60l))) {
					exitSequence_main_region_pending();
					count++;
					enterSequence_main_region_pending_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_yellow_react(long transitioned_before) {
		/* The reactions of state yellow. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getCount()>=5l) {
				exitSequence_main_region_yellow();
				raiseSigR();
				setCount(0l);
				enterSequence_main_region_red_default();
				transitioned_after = 0l;
			} else {
				if (((sec) && (getCount()<60l))) {
					exitSequence_main_region_yellow();
					count++;
					enterSequence_main_region_yellow_default();
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	private long main_region_green_react(long transitioned_before) {
		/* The reactions of state green. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (((pedestrian) && (getCount()<60l))) {
				exitSequence_main_region_green();
				enterSequence_main_region_pending_default();
				transitioned_after = 0l;
			} else {
				if (((pedestrian) && (getCount()>=60l))) {
					exitSequence_main_region_green();
					raiseSigY();
					setCount(0l);
					enterSequence_main_region_yellow_default();
					transitioned_after = 0l;
				} else {
					if (((sec) && (getCount()<60l))) {
						exitSequence_main_region_green();
						count++;
						enterSequence_main_region_green_default();
						transitioned_after = 0l;
					}
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
