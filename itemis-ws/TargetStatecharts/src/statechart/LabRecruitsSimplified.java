/**
 * Generated by itemis CREATE code generator.
 */
package statechart;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import java.util.LinkedList;
import java.util.Queue;

public class LabRecruitsSimplified implements IEventDriven {

    public enum State {

        MAIN_REGION_B0,
        MAIN_REGION_B1,
        MAIN_REGION_B2,
        MAIN_REGION_B3,
        MAIN_REGION_D2M,
        MAIN_REGION_D2P,
        MAIN_REGION_D1P,
        MAIN_REGION_D1M,
        MAIN_REGION_D3M,
        MAIN_REGION_D3P,
        $NULLSTATE$
    }

    private final State[] stateVector = new State[1];

    private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();

    private boolean isExecuting;

    private boolean getIsExecuting() {
        return isExecuting;
    }

    private void setIsExecuting(boolean value) {
        this.isExecuting = value;
    }

    public LabRecruitsSimplified() {
        for (int i = 0; i < 1; i++) {
            stateVector[i] = State.$NULLSTATE$;
        }
        clearInEvents();
        /* Default init sequence for statechart LabRecruits */
        setB1(false);
        setB2(false);
        setB3(false);
        isExecuting = false;
    }

    public void enter() {
        /* Activates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default enter sequence for statechart LabRecruits */
        enterSequence_main_region_default();
        isExecuting = false;
    }

    public void exit() {
        /* Deactivates the state machine. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        /* Default exit sequence for statechart LabRecruits */
        exitSequence_main_region();
        isExecuting = false;
    }

    /**
     * @see IStatemachine#isActive()
     */
    public boolean isActive() {
        return stateVector[0] != State.$NULLSTATE$;
    }

    /**
     * Always returns 'false' since this state machine can never become final.
     *
     * @see IStatemachine#isFinal()
     */
    public boolean isFinal() {
        return false;
    }

    private void clearInEvents() {
        travel_to_b0 = false;
        travel_to_b1 = false;
        travel_to_b2 = false;
        travel_to_b3 = false;
        travel_to_d1m = false;
        travel_to_d1p = false;
        travel_to_d2m = false;
        travel_to_d2p = false;
        travel_to_d3m = false;
        travel_to_d3p = false;
        toggle = false;
    }

    private void microStep() {
        switch(stateVector[0]) {
            case MAIN_REGION_B0:
                main_region_b0_react(-1l);
                break;
            case MAIN_REGION_B1:
                main_region_b1_react(-1l);
                break;
            case MAIN_REGION_B2:
                main_region_b2_react(-1l);
                break;
            case MAIN_REGION_B3:
                main_region_b3_react(-1l);
                break;
            case MAIN_REGION_D2M:
                main_region_d2m_react(-1l);
                break;
            case MAIN_REGION_D2P:
                main_region_d2p_react(-1l);
                break;
            case MAIN_REGION_D1P:
                main_region_d1p_react(-1l);
                break;
            case MAIN_REGION_D1M:
                main_region_d1m_react(-1l);
                break;
            case MAIN_REGION_D3M:
                main_region_d3m_react(-1l);
                break;
            case MAIN_REGION_D3P:
                main_region_d3p_react(-1l);
                break;
            default:
                break;
        }
    }

    private void runCycle() {
        /* Performs a 'run to completion' step. */
        if (getIsExecuting()) {
            return;
        }
        isExecuting = true;
        nextEvent();
        do {
            microStep();
            clearInEvents();
        } while (nextEvent());
        isExecuting = false;
    }

    private boolean nextEvent() {
        if (!inEventQueue.isEmpty()) {
            inEventQueue.poll().run();
            return true;
        }
        return false;
    }

    /**
     * Returns true if the given state is currently active otherwise false.
     */
    public boolean isStateActive(State state) {
        switch(state) {
            case MAIN_REGION_B0:
                return stateVector[0] == State.MAIN_REGION_B0;
            case MAIN_REGION_B1:
                return stateVector[0] == State.MAIN_REGION_B1;
            case MAIN_REGION_B2:
                return stateVector[0] == State.MAIN_REGION_B2;
            case MAIN_REGION_B3:
                return stateVector[0] == State.MAIN_REGION_B3;
            case MAIN_REGION_D2M:
                return stateVector[0] == State.MAIN_REGION_D2M;
            case MAIN_REGION_D2P:
                return stateVector[0] == State.MAIN_REGION_D2P;
            case MAIN_REGION_D1P:
                return stateVector[0] == State.MAIN_REGION_D1P;
            case MAIN_REGION_D1M:
                return stateVector[0] == State.MAIN_REGION_D1M;
            case MAIN_REGION_D3M:
                return stateVector[0] == State.MAIN_REGION_D3M;
            case MAIN_REGION_D3P:
                return stateVector[0] == State.MAIN_REGION_D3P;
            default:
                return false;
        }
    }

    private boolean travel_to_b0;

    public void raiseTravel_to_b0() {
        inEventQueue.add(() -> {
            travel_to_b0 = true;
        });
        runCycle();
    }

    private boolean travel_to_b1;

    public void raiseTravel_to_b1() {
        inEventQueue.add(() -> {
            travel_to_b1 = true;
        });
        runCycle();
    }

    private boolean travel_to_b2;

    public void raiseTravel_to_b2() {
        inEventQueue.add(() -> {
            travel_to_b2 = true;
        });
        runCycle();
    }

    private boolean travel_to_b3;

    public void raiseTravel_to_b3() {
        inEventQueue.add(() -> {
            travel_to_b3 = true;
        });
        runCycle();
    }

    private boolean travel_to_d1m;

    public void raiseTravel_to_d1m() {
        inEventQueue.add(() -> {
            travel_to_d1m = true;
        });
        runCycle();
    }

    private boolean travel_to_d1p;

    public void raiseTravel_to_d1p() {
        inEventQueue.add(() -> {
            travel_to_d1p = true;
        });
        runCycle();
    }

    private boolean travel_to_d2m;

    public void raiseTravel_to_d2m() {
        inEventQueue.add(() -> {
            travel_to_d2m = true;
        });
        runCycle();
    }

    private boolean travel_to_d2p;

    public void raiseTravel_to_d2p() {
        inEventQueue.add(() -> {
            travel_to_d2p = true;
        });
        runCycle();
    }

    private boolean travel_to_d3m;

    public void raiseTravel_to_d3m() {
        inEventQueue.add(() -> {
            travel_to_d3m = true;
        });
        runCycle();
    }

    private boolean travel_to_d3p;

    public void raiseTravel_to_d3p() {
        inEventQueue.add(() -> {
            travel_to_d3p = true;
        });
        runCycle();
    }

    private boolean toggle;

    public void raiseToggle() {
        inEventQueue.add(() -> {
            toggle = true;
        });
        runCycle();
    }

    private boolean b1;

    private boolean getB1() {
        return b1;
    }

    private void setB1(boolean value) {
        this.b1 = value;
    }

    private boolean b2;

    private boolean getB2() {
        return b2;
    }

    private void setB2(boolean value) {
        this.b2 = value;
    }

    private boolean b3;

    private boolean getB3() {
        return b3;
    }

    private void setB3(boolean value) {
        this.b3 = value;
    }

    /* 'default' enter sequence for state b0 */
    private void enterSequence_main_region_b0_default() {
        /* 'default' enter sequence for state b0 */
        stateVector[0] = State.MAIN_REGION_B0;
    }

    /* 'default' enter sequence for state b1 */
    private void enterSequence_main_region_b1_default() {
        /* 'default' enter sequence for state b1 */
        stateVector[0] = State.MAIN_REGION_B1;
    }

    /* 'default' enter sequence for state b2 */
    private void enterSequence_main_region_b2_default() {
        /* 'default' enter sequence for state b2 */
        stateVector[0] = State.MAIN_REGION_B2;
    }

    /* 'default' enter sequence for state b3 */
    private void enterSequence_main_region_b3_default() {
        /* 'default' enter sequence for state b3 */
        stateVector[0] = State.MAIN_REGION_B3;
    }

    /* 'default' enter sequence for state d2m */
    private void enterSequence_main_region_d2m_default() {
        /* 'default' enter sequence for state d2m */
        stateVector[0] = State.MAIN_REGION_D2M;
    }

    /* 'default' enter sequence for state d2p */
    private void enterSequence_main_region_d2p_default() {
        /* 'default' enter sequence for state d2p */
        stateVector[0] = State.MAIN_REGION_D2P;
    }

    /* 'default' enter sequence for state d1p */
    private void enterSequence_main_region_d1p_default() {
        /* 'default' enter sequence for state d1p */
        stateVector[0] = State.MAIN_REGION_D1P;
    }

    /* 'default' enter sequence for state d1m */
    private void enterSequence_main_region_d1m_default() {
        /* 'default' enter sequence for state d1m */
        stateVector[0] = State.MAIN_REGION_D1M;
    }

    /* 'default' enter sequence for state d3m */
    private void enterSequence_main_region_d3m_default() {
        /* 'default' enter sequence for state d3m */
        stateVector[0] = State.MAIN_REGION_D3M;
    }

    /* 'default' enter sequence for state d3p */
    private void enterSequence_main_region_d3p_default() {
        /* 'default' enter sequence for state d3p */
        stateVector[0] = State.MAIN_REGION_D3P;
    }

    /* 'default' enter sequence for region main region */
    private void enterSequence_main_region_default() {
        /* 'default' enter sequence for region main region */
        react_main_region__entry_Default();
    }

    /* Default exit sequence for state b0 */
    private void exitSequence_main_region_b0() {
        /* Default exit sequence for state b0 */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state b1 */
    private void exitSequence_main_region_b1() {
        /* Default exit sequence for state b1 */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state b2 */
    private void exitSequence_main_region_b2() {
        /* Default exit sequence for state b2 */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state b3 */
    private void exitSequence_main_region_b3() {
        /* Default exit sequence for state b3 */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state d2m */
    private void exitSequence_main_region_d2m() {
        /* Default exit sequence for state d2m */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state d2p */
    private void exitSequence_main_region_d2p() {
        /* Default exit sequence for state d2p */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state d1p */
    private void exitSequence_main_region_d1p() {
        /* Default exit sequence for state d1p */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state d1m */
    private void exitSequence_main_region_d1m() {
        /* Default exit sequence for state d1m */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state d3m */
    private void exitSequence_main_region_d3m() {
        /* Default exit sequence for state d3m */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for state d3p */
    private void exitSequence_main_region_d3p() {
        /* Default exit sequence for state d3p */
        stateVector[0] = State.$NULLSTATE$;
    }

    /* Default exit sequence for region main region */
    private void exitSequence_main_region() {
        /* Default exit sequence for region main region */
        switch(stateVector[0]) {
            case MAIN_REGION_B0:
                exitSequence_main_region_b0();
                break;
            case MAIN_REGION_B1:
                exitSequence_main_region_b1();
                break;
            case MAIN_REGION_B2:
                exitSequence_main_region_b2();
                break;
            case MAIN_REGION_B3:
                exitSequence_main_region_b3();
                break;
            case MAIN_REGION_D2M:
                exitSequence_main_region_d2m();
                break;
            case MAIN_REGION_D2P:
                exitSequence_main_region_d2p();
                break;
            case MAIN_REGION_D1P:
                exitSequence_main_region_d1p();
                break;
            case MAIN_REGION_D1M:
                exitSequence_main_region_d1m();
                break;
            case MAIN_REGION_D3M:
                exitSequence_main_region_d3m();
                break;
            case MAIN_REGION_D3P:
                exitSequence_main_region_d3p();
                break;
            default:
                break;
        }
    }

    /* Default react sequence for initial entry  */
    private void react_main_region__entry_Default() {
        /* Default react sequence for initial entry  */
        enterSequence_main_region_b0_default();
    }

    private long react(long transitioned_before) {
        /* State machine reactions. */
        return transitioned_before;
    }

    private long main_region_b0_react(long transitioned_before) {
        /* The reactions of state b0. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (toggle) {
                exitSequence_main_region_b0();
                enterSequence_main_region_b0_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (travel_to_d1m) {
                    exitSequence_main_region_b0();
                    enterSequence_main_region_d1m_default();
                    react(0l);
                    transitioned_after = 0l;
                } else {
                    if (travel_to_b1) {
                        exitSequence_main_region_b0();
                        enterSequence_main_region_b1_default();
                        react(0l);
                        transitioned_after = 0l;
                    } else {
                        if (travel_to_d3m) {
                            exitSequence_main_region_b0();
                            enterSequence_main_region_d3m_default();
                            react(0l);
                            transitioned_after = 0l;
                        }
                    }
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_b1_react(long transitioned_before) {
        /* The reactions of state b1. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (toggle) {
                exitSequence_main_region_b1();
                setB1(!(b1));
                enterSequence_main_region_b1_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (travel_to_d3m) {
                    exitSequence_main_region_b1();
                    enterSequence_main_region_d3m_default();
                    react(0l);
                    transitioned_after = 0l;
                } else {
                    if (travel_to_b0) {
                        exitSequence_main_region_b1();
                        enterSequence_main_region_b0_default();
                        react(0l);
                        transitioned_after = 0l;
                    } else {
                        if (travel_to_d1m) {
                            exitSequence_main_region_b1();
                            enterSequence_main_region_d1m_default();
                            react(0l);
                            transitioned_after = 0l;
                        }
                    }
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_b2_react(long transitioned_before) {
        /* The reactions of state b2. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (toggle) {
                exitSequence_main_region_b2();
                setB2(!(b2));
                enterSequence_main_region_b2_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (travel_to_d1p) {
                    exitSequence_main_region_b2();
                    enterSequence_main_region_d1p_default();
                    react(0l);
                    transitioned_after = 0l;
                } else {
                    if (travel_to_d2m) {
                        exitSequence_main_region_b2();
                        enterSequence_main_region_d2m_default();
                        react(0l);
                        transitioned_after = 0l;
                    }
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_b3_react(long transitioned_before) {
        /* The reactions of state b3. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (toggle) {
                exitSequence_main_region_b3();
                setB3(!(b3));
                enterSequence_main_region_b3_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (travel_to_d2p) {
                    exitSequence_main_region_b3();
                    enterSequence_main_region_d2p_default();
                    react(0l);
                    transitioned_after = 0l;
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_d2m_react(long transitioned_before) {
        /* The reactions of state d2m. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (((travel_to_d2p) && (getB2()))) {
                exitSequence_main_region_d2m();
                enterSequence_main_region_d2p_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (travel_to_b2) {
                    exitSequence_main_region_d2m();
                    enterSequence_main_region_b2_default();
                    react(0l);
                    transitioned_after = 0l;
                } else {
                    if (travel_to_d1p) {
                        exitSequence_main_region_d2m();
                        enterSequence_main_region_d1p_default();
                        react(0l);
                        transitioned_after = 0l;
                    }
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_d2p_react(long transitioned_before) {
        /* The reactions of state d2p. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (((travel_to_d2m) && (getB2()))) {
                exitSequence_main_region_d2p();
                enterSequence_main_region_d2m_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (travel_to_b3) {
                    exitSequence_main_region_d2p();
                    enterSequence_main_region_b3_default();
                    react(0l);
                    transitioned_after = 0l;
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_d1p_react(long transitioned_before) {
        /* The reactions of state d1p. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (((travel_to_d1m) && (getB1()))) {
                exitSequence_main_region_d1p();
                enterSequence_main_region_d1m_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (travel_to_b2) {
                    exitSequence_main_region_d1p();
                    enterSequence_main_region_b2_default();
                    react(0l);
                    transitioned_after = 0l;
                } else {
                    if (travel_to_d2m) {
                        exitSequence_main_region_d1p();
                        enterSequence_main_region_d2m_default();
                        react(0l);
                        transitioned_after = 0l;
                    }
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_d1m_react(long transitioned_before) {
        /* The reactions of state d1m. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (((travel_to_d1p) && (getB1()))) {
                exitSequence_main_region_d1m();
                enterSequence_main_region_d1p_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (travel_to_b0) {
                    exitSequence_main_region_d1m();
                    enterSequence_main_region_b0_default();
                    react(0l);
                    transitioned_after = 0l;
                } else {
                    if (travel_to_d3m) {
                        exitSequence_main_region_d1m();
                        enterSequence_main_region_d3m_default();
                        react(0l);
                        transitioned_after = 0l;
                    } else {
                        if (travel_to_b1) {
                            exitSequence_main_region_d1m();
                            enterSequence_main_region_b1_default();
                            react(0l);
                            transitioned_after = 0l;
                        }
                    }
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_d3m_react(long transitioned_before) {
        /* The reactions of state d3m. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (((travel_to_d3p) && (getB3()))) {
                exitSequence_main_region_d3m();
                enterSequence_main_region_d3p_default();
                react(0l);
                transitioned_after = 0l;
            } else {
                if (travel_to_b1) {
                    exitSequence_main_region_d3m();
                    enterSequence_main_region_b1_default();
                    react(0l);
                    transitioned_after = 0l;
                } else {
                    if (travel_to_d1m) {
                        exitSequence_main_region_d3m();
                        enterSequence_main_region_d1m_default();
                        react(0l);
                        transitioned_after = 0l;
                    } else {
                        if (travel_to_b0) {
                            exitSequence_main_region_d3m();
                            enterSequence_main_region_b0_default();
                            react(0l);
                            transitioned_after = 0l;
                        }
                    }
                }
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    private long main_region_d3p_react(long transitioned_before) {
        /* The reactions of state d3p. */
        long transitioned_after = transitioned_before;
        if (transitioned_after < 0l) {
            if (((travel_to_d3m) && (getB3()))) {
                exitSequence_main_region_d3p();
                enterSequence_main_region_d3m_default();
                react(0l);
                transitioned_after = 0l;
            }
        }
        /* If no transition was taken */
        if (transitioned_after == transitioned_before) {
            /* then execute local reactions. */
            transitioned_after = react(transitioned_before);
        }
        return transitioned_after;
    }

    /* Can be used by the client code to trigger a run to completion step without raising an event. */
    public void triggerWithoutEvent() {
        runCycle();
    }
}
