/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 10 08:40:03 GMT 2024
 */

package statechart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import statechart.TrafficLight_CBSimplified;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrafficLight_CBSimplified_ESTest extends TrafficLight_CBSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      // Undeclared exception!
      try { 
        trafficLight_CBSimplified0.isStateActive((TrafficLight_CBSimplified.State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("statechart.TrafficLight_CBSimplified", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      trafficLight_CBSimplified0.enter();
      assertTrue(trafficLight_CBSimplified0.isActive());
      
      trafficLight_CBSimplified0.exit();
      assertFalse(trafficLight_CBSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      TrafficLight_CBSimplified.State trafficLight_CBSimplified_State0 = TrafficLight_CBSimplified.State.MAIN_REGION_RED;
      trafficLight_CBSimplified0.enter();
      boolean boolean0 = trafficLight_CBSimplified0.isStateActive(trafficLight_CBSimplified_State0);
      assertTrue(trafficLight_CBSimplified0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      TrafficLight_CBSimplified.State trafficLight_CBSimplified_State0 = TrafficLight_CBSimplified.State.$NULLSTATE$;
      boolean boolean0 = trafficLight_CBSimplified0.isStateActive(trafficLight_CBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      TrafficLight_CBSimplified.State trafficLight_CBSimplified_State0 = TrafficLight_CBSimplified.State.MAIN_REGION_GREEN;
      boolean boolean0 = trafficLight_CBSimplified0.isStateActive(trafficLight_CBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      TrafficLight_CBSimplified.State trafficLight_CBSimplified_State0 = TrafficLight_CBSimplified.State.MAIN_REGION_PENDING;
      boolean boolean0 = trafficLight_CBSimplified0.isStateActive(trafficLight_CBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      TrafficLight_CBSimplified.State trafficLight_CBSimplified_State0 = TrafficLight_CBSimplified.State.MAIN_REGION_YELLOW;
      boolean boolean0 = trafficLight_CBSimplified0.isStateActive(trafficLight_CBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      TrafficLight_CBSimplified.State trafficLight_CBSimplified_State0 = TrafficLight_CBSimplified.State.MAIN_REGION_RED;
      boolean boolean0 = trafficLight_CBSimplified0.isStateActive(trafficLight_CBSimplified_State0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      trafficLight_CBSimplified0.runCycle();
      assertFalse(trafficLight_CBSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      trafficLight_CBSimplified0.enter();
      boolean boolean0 = trafficLight_CBSimplified0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      boolean boolean0 = trafficLight_CBSimplified0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      trafficLight_CBSimplified0.exit();
      assertFalse(trafficLight_CBSimplified0.isFinal());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      trafficLight_CBSimplified0.raisePedestrian();
      assertFalse(trafficLight_CBSimplified0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      boolean boolean0 = trafficLight_CBSimplified0.isFinal();
      assertFalse(trafficLight_CBSimplified0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrafficLight_CBSimplified trafficLight_CBSimplified0 = new TrafficLight_CBSimplified();
      assertFalse(trafficLight_CBSimplified0.isActive());
      
      trafficLight_CBSimplified0.enter();
      trafficLight_CBSimplified0.runCycle();
      assertTrue(trafficLight_CBSimplified0.isActive());
  }
}
