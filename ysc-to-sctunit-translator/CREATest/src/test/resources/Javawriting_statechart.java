/** Generated by itemis CREATE code generator. */
package javawriting;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;
import javawriting.Javawriting_submachine;

public class Javawriting_statechart implements ITimed, IEventDriven {
	public static class Interface1 {
		private Javawriting_statechart parent;
		
		public Interface1(Javawriting_statechart parent) {
			this.parent = parent;
		}
		public interface OperationCallback {
		
			public void op1(long value);
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean event2;
		
		
		public void raiseEvent2() {
			parent.inEventQueue.add(() -> {
				event2 = true;
			});
			parent.runCycle();
		}
		
		private long val;
		
		public long getVal() {
			return val;
		}
		
		public void setVal(long value) {
			this.val = value;
		}
		
	}
	
	protected Interface1 interface1;
	
	public enum State {
		MAIN_REGION_STATEA,
		MAIN_REGION_STATEB,
		MAIN_REGION_STATEC,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Javawriting_statechart() {
		interface1 = new Interface1(this);
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart Javawriting_statechart */
		setSub(null);
		interface1.setVal(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.interface1.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Interface1 must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart Javawriting_statechart */
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart Javawriting_statechart */
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		event1 = false;
		interface1.event2 = false;
		timeEvents[0] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_STATEA:
			main_region_StateA_react(-1l);
			break;
		case MAIN_REGION_STATEB:
			main_region_StateB_react(-1l);
			break;
		case MAIN_REGION_STATEC:
			main_region_StateC_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.interface1.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Interface1 must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_STATEA:
			return stateVector[0] == State.MAIN_REGION_STATEA;
		case MAIN_REGION_STATEB:
			return stateVector[0] == State.MAIN_REGION_STATEB;
		case MAIN_REGION_STATEC:
			return stateVector[0] == State.MAIN_REGION_STATEC;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Interface1 interface1() {
		return interface1;
	}
	
	
	private boolean event1;
	
	
	public void raiseEvent1() {
		inEventQueue.add(() -> {
			event1 = true;
		});
		runCycle();
	}
	
	private Javawriting_submachine sub;
	
	public Javawriting_submachine getSub() {
		return sub;
	}
	
	public void setSub(Javawriting_submachine value) {
		this.sub = value;
	}
	
	/* Entry action for state 'StateA'. */
	private void entryAction_main_region_StateA() {
		/* Entry action for state 'StateA'. */
		getSub().enter();
	}
	
	/* Entry action for state 'StateC'. */
	private void entryAction_main_region_StateC() {
		/* Entry action for state 'StateC'. */
		timerService.setTimer(this, 0, (10l * 1000l), true);
	}
	
	/* Exit action for state 'StateC'. */
	private void exitAction_main_region_StateC() {
		/* Exit action for state 'StateC'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state StateA */
	private void enterSequence_main_region_StateA_default() {
		/* 'default' enter sequence for state StateA */
		entryAction_main_region_StateA();
		stateVector[0] = State.MAIN_REGION_STATEA;
	}
	
	/* 'default' enter sequence for state StateB */
	private void enterSequence_main_region_StateB_default() {
		/* 'default' enter sequence for state StateB */
		stateVector[0] = State.MAIN_REGION_STATEB;
	}
	
	/* 'default' enter sequence for state StateC */
	private void enterSequence_main_region_StateC_default() {
		/* 'default' enter sequence for state StateC */
		entryAction_main_region_StateC();
		stateVector[0] = State.MAIN_REGION_STATEC;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		/* 'default' enter sequence for region main region */
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state StateA */
	private void exitSequence_main_region_StateA() {
		/* Default exit sequence for state StateA */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateB */
	private void exitSequence_main_region_StateB() {
		/* Default exit sequence for state StateB */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state StateC */
	private void exitSequence_main_region_StateC() {
		/* Default exit sequence for state StateC */
		stateVector[0] = State.$NULLSTATE$;
		exitAction_main_region_StateC();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		/* Default exit sequence for region main region */
		switch (stateVector[0]) {
		case MAIN_REGION_STATEA:
			exitSequence_main_region_StateA();
			break;
		case MAIN_REGION_STATEB:
			exitSequence_main_region_StateB();
			break;
		case MAIN_REGION_STATEC:
			exitSequence_main_region_StateC();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_region_StateA_default();
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		return transitioned_before;
	}
	
	private long main_region_StateA_react(long transitioned_before) {
		/* The reactions of state StateA. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (event1) {
				exitSequence_main_region_StateA();
				enterSequence_main_region_StateB_default();
				react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_StateB_react(long transitioned_before) {
		/* The reactions of state StateB. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (interface1.event2) {
				exitSequence_main_region_StateB();
				interface1.operationCallback.op1(interface1.getVal());
				enterSequence_main_region_StateC_default();
				react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_StateC_react(long transitioned_before) {
		/* The reactions of state StateC. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_StateC();
				timeEvents[0] = false;
				enterSequence_main_region_StateC_default();
				react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
